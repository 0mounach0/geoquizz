(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["vendor"],{

/***/ "../node_modules/assert/assert.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) { // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }

  return !!(b != null && b._isBuffer);
} // based on node assert, original notice:
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


var util = __webpack_require__("../node_modules/node-libs-browser/node_modules/util/util.js");

var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;

var functionsHaveNames = function () {
  return function foo() {}.name === 'foo';
}();

function pToString(obj) {
  return Object.prototype.toString.call(obj);
}

function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }

  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }

  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }

  if (!arrbuf) {
    return false;
  }

  if (arrbuf instanceof DataView) {
    return true;
  }

  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }

  return false;
} // 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.


var assert = module.exports = ok; // 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }

  if (functionsHaveNames) {
    return func.name;
  }

  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;

  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }

  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();

    if (err.stack) {
      var out = err.stack; // try to strip useless frames

      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);

      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
}; // assert.AssertionError instanceof Error


util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }

  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' + name + ']';
}

function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
} // At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.
// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.


function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
} // EXTENSION! allows for well behaved errors defined elsewhere.


assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}

assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
}; // 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);


assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
}; // 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {
      actual: [],
      expected: []
    };
    var actualIndex = memos.actual.indexOf(actual);

    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);
    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

  if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }

  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i; // having the same number of owned properties (keys incorporates
  // hasOwnProperty)

  if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

  ka.sort();
  kb.sort(); //~~~cheap key test

  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i]) return false;
  } //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test


  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
  }

  return true;
} // 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
} // 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);


assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
}; // 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);


assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;

  try {
    block();
  } catch (e) {
    error = e;
  }

  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);
  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
} // 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);


assert.throws = function (block,
/*optional*/
error,
/*optional*/
message) {
  _throws(true, block, error, message);
}; // EXTENSION! This is annoying to write outside this module.


assert.doesNotThrow = function (block,
/*optional*/
error,
/*optional*/
message) {
  _throws(false, block, error, message);
};

assert.ifError = function (err) {
  if (err) throw err;
};

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }

  return keys;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/axios/index.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("../node_modules/axios/lib/axios.js");

/***/ }),

/***/ "../node_modules/axios/lib/adapters/http.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

var settle = __webpack_require__("../node_modules/axios/lib/core/settle.js");

var buildURL = __webpack_require__("../node_modules/axios/lib/helpers/buildURL.js");

var http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");

var https = __webpack_require__("../node_modules/https-browserify/index.js");

var httpFollow = __webpack_require__("../node_modules/follow-redirects/index.js").http;

var httpsFollow = __webpack_require__("../node_modules/follow-redirects/index.js").https;

var url = __webpack_require__("../node_modules/url/url.js");

var zlib = __webpack_require__("../node_modules/browserify-zlib/lib/index.js");

var pkg = __webpack_require__("../node_modules/axios/package.json");

var createError = __webpack_require__("../node_modules/axios/lib/core/createError.js");

var enhanceError = __webpack_require__("../node_modules/axios/lib/core/enhanceError.js");
/*eslint consistent-return:0*/


module.exports = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolve, reject) {
    var data = config.data;
    var headers = config.headers;
    var timer; // Set User-Agent (required by some servers)
    // Only set header if it hasn't been set in config
    // See https://github.com/axios/axios/issues/69

    if (!headers['User-Agent'] && !headers['user-agent']) {
      headers['User-Agent'] = 'axios/' + pkg.version;
    }

    if (data && !utils.isStream(data)) {
      if (Buffer.isBuffer(data)) {// Nothing to do...
      } else if (utils.isArrayBuffer(data)) {
        data = new Buffer(new Uint8Array(data));
      } else if (utils.isString(data)) {
        data = new Buffer(data, 'utf-8');
      } else {
        return reject(createError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', config));
      } // Add Content-Length header if data exists


      headers['Content-Length'] = data.length;
    } // HTTP basic authentication


    var auth = undefined;

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    } // Parse url


    var parsed = url.parse(config.url);
    var protocol = parsed.protocol || 'http:';

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth) {
      delete headers.Authorization;
    }

    var isHttps = protocol === 'https:';
    var agent = isHttps ? config.httpsAgent : config.httpAgent;
    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method,
      headers: headers,
      agent: agent,
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;

    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];

      if (proxyUrl) {
        var parsedProxyUrl = url.parse(proxyUrl);
        proxy = {
          host: parsedProxyUrl.hostname,
          port: parsedProxyUrl.port
        };

        if (parsedProxyUrl.auth) {
          var proxyUrlAuth = parsedProxyUrl.auth.split(':');
          proxy.auth = {
            username: proxyUrlAuth[0],
            password: proxyUrlAuth[1]
          };
        }
      }
    }

    if (proxy) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      options.port = proxy.port;
      options.path = protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path; // Basic proxy authorization

      if (proxy.auth) {
        var base64 = new Buffer(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
        options.headers['Proxy-Authorization'] = 'Basic ' + base64;
      }
    }

    var transport;

    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttps ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }

      transport = isHttps ? httpsFollow : httpFollow;
    }

    if (config.maxContentLength && config.maxContentLength > -1) {
      options.maxBodyLength = config.maxContentLength;
    } // Create the request


    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return; // Response has been received so kill timer that handles request timeout

      clearTimeout(timer);
      timer = null; // uncompress the response body transparently if required

      var stream = res;

      switch (res.headers['content-encoding']) {
        /*eslint default-case:0*/
        case 'gzip':
        case 'compress':
        case 'deflate':
          // add the unzipper to the body stream processing pipeline
          stream = stream.pipe(zlib.createUnzip()); // remove the content-encoding in order to not confuse downstream operations

          delete res.headers['content-encoding'];
          break;
      } // return the last request in case of redirects


      var lastRequest = res.req || req;
      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk); // make sure the content length is not over the maxContentLength if specified

          if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {
            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded', config, null, lastRequest));
          }
        });
        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(enhanceError(err, config, null, lastRequest));
        });
        stream.on('end', function handleStreamEnd() {
          var responseData = Buffer.concat(responseBuffer);

          if (config.responseType !== 'arraybuffer') {
            responseData = responseData.toString('utf8');
          }

          response.data = responseData;
          settle(resolve, reject, response);
        });
      }
    }); // Handle errors

    req.on('error', function handleRequestError(err) {
      if (req.aborted) return;
      reject(enhanceError(err, config, null, req));
    }); // Handle request timeout

    if (config.timeout && !timer) {
      timer = setTimeout(function handleRequestTimeout() {
        req.abort();
        reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', req));
      }, config.timeout);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (req.aborted) return;
        req.abort();
        reject(cancel);
      });
    } // Send the request


    if (utils.isStream(data)) {
      data.pipe(req);
    } else {
      req.end(data);
    }
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/buffer/index.js").Buffer, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/axios/lib/adapters/xhr.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

var settle = __webpack_require__("../node_modules/axios/lib/core/settle.js");

var buildURL = __webpack_require__("../node_modules/axios/lib/helpers/buildURL.js");

var parseHeaders = __webpack_require__("../node_modules/axios/lib/helpers/parseHeaders.js");

var isURLSameOrigin = __webpack_require__("../node_modules/axios/lib/helpers/isURLSameOrigin.js");

var createError = __webpack_require__("../node_modules/axios/lib/core/createError.js");

var btoa = typeof window !== 'undefined' && window.btoa && window.btoa.bind(window) || __webpack_require__("../node_modules/axios/lib/helpers/btoa.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false; // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.

    if ( true && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;

      request.onprogress = function handleProgress() {};

      request.ontimeout = function handleTimeout() {};
    } // HTTP basic authentication


    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout; // Listen for ready state

    request[loadEvent] = function handleLoad() {
      if (!request || request.readyState !== 4 && !xDomain) {
        return;
      } // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request


      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(resolve, reject, response); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__("../node_modules/axios/lib/helpers/cookies.js"); // Add xsrf header


      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (config.withCredentials) {
      request.withCredentials = true;
    } // Add responseType to request if needed


    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel); // Clean up request

        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),

/***/ "../node_modules/axios/lib/axios.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

var bind = __webpack_require__("../node_modules/axios/lib/helpers/bind.js");

var Axios = __webpack_require__("../node_modules/axios/lib/core/Axios.js");

var defaults = __webpack_require__("../node_modules/axios/lib/defaults.js");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context);
  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Factory for creating new instances

axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
}; // Expose Cancel & CancelToken


axios.Cancel = __webpack_require__("../node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__("../node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__("../node_modules/axios/lib/cancel/isCancel.js"); // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__("../node_modules/axios/lib/helpers/spread.js");
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports.default = axios;

/***/ }),

/***/ "../node_modules/axios/lib/cancel/Cancel.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

/***/ }),

/***/ "../node_modules/axios/lib/cancel/CancelToken.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__("../node_modules/axios/lib/cancel/Cancel.js");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),

/***/ "../node_modules/axios/lib/cancel/isCancel.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),

/***/ "../node_modules/axios/lib/core/Axios.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__("../node_modules/axios/lib/defaults.js");

var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

var InterceptorManager = __webpack_require__("../node_modules/axios/lib/core/InterceptorManager.js");

var dispatchRequest = __webpack_require__("../node_modules/axios/lib/core/dispatchRequest.js");
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */


function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {
    method: 'get'
  }, this.defaults, config);
  config.method = config.method.toLowerCase(); // Hook up interceptors middleware

  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});
module.exports = Axios;

/***/ }),

/***/ "../node_modules/axios/lib/core/InterceptorManager.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),

/***/ "../node_modules/axios/lib/core/createError.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__("../node_modules/axios/lib/core/enhanceError.js");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),

/***/ "../node_modules/axios/lib/core/dispatchRequest.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

var transformData = __webpack_require__("../node_modules/axios/lib/core/transformData.js");

var isCancel = __webpack_require__("../node_modules/axios/lib/cancel/isCancel.js");

var defaults = __webpack_require__("../node_modules/axios/lib/defaults.js");

var isAbsoluteURL = __webpack_require__("../node_modules/axios/lib/helpers/isAbsoluteURL.js");

var combineURLs = __webpack_require__("../node_modules/axios/lib/helpers/combineURLs.js");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Support baseURL config

  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  } // Ensure headers exist


  config.headers = config.headers || {}; // Transform request data

  config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData(response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),

/***/ "../node_modules/axios/lib/core/enhanceError.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;

  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  return error;
};

/***/ }),

/***/ "../node_modules/axios/lib/core/settle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__("../node_modules/axios/lib/core/createError.js");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus; // Note: status is not exposed by XDomainRequest

  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),

/***/ "../node_modules/axios/lib/core/transformData.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });
  return data;
};

/***/ }),

/***/ "../node_modules/axios/lib/defaults.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

var normalizeHeaderName = __webpack_require__("../node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;

  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__("../node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__("../node_modules/axios/lib/adapters/http.js");
  }

  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {
        /* Ignore */
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};
defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/axios/lib/helpers/bind.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),

/***/ "../node_modules/axios/lib/helpers/btoa.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}

E.prototype = new Error();
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';

  for ( // initialize result and counter
  var block, charCode, idx = 0, map = chars; // if the next str index does not exist:
  //   change the mapping table to "="
  //   check if d has no fractional digits
  str.charAt(idx | 0) || (map = '=', idx % 1); // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
    charCode = str.charCodeAt(idx += 3 / 4);

    if (charCode > 0xFF) {
      throw new E();
    }

    block = block << 8 | charCode;
  }

  return output;
}

module.exports = btoa;

/***/ }),

/***/ "../node_modules/axios/lib/helpers/buildURL.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),

/***/ "../node_modules/axios/lib/helpers/combineURLs.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),

/***/ "../node_modules/axios/lib/helpers/cookies.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),

/***/ "../node_modules/axios/lib/helpers/isAbsoluteURL.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

/***/ }),

/***/ "../node_modules/axios/lib/helpers/isURLSameOrigin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),

/***/ "../node_modules/axios/lib/helpers/normalizeHeaderName.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),

/***/ "../node_modules/axios/lib/helpers/parseHeaders.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("../node_modules/axios/lib/utils.js"); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),

/***/ "../node_modules/axios/lib/helpers/spread.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),

/***/ "../node_modules/axios/lib/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__("../node_modules/axios/lib/helpers/bind.js");

var isBuffer = __webpack_require__("../node_modules/is-buffer/index.js");
/*global toString:true*/
// utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

function isArray(val) {
  return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */


function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && typeof val === 'object';
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


function isDate(val) {
  return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */


function isFile(val) {
  return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */


function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */


function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */


function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function merge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};

/***/ }),

/***/ "../node_modules/axios/package.json":
/***/ (function(module) {

module.exports = {"_from":"axios@0.18.0","_id":"axios@0.18.0","_inBundle":false,"_integrity":"sha1-MtU+SFHv3AoRmTts0AB4nXDAUQI=","_location":"/axios","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"axios@0.18.0","name":"axios","escapedName":"axios","rawSpec":"0.18.0","saveSpec":null,"fetchSpec":"0.18.0"},"_requiredBy":["#USER","/"],"_resolved":"https://registry.npmjs.org/axios/-/axios-0.18.0.tgz","_shasum":"32d53e4851efdc0a11993b6cd000789d70c05102","_spec":"axios@0.18.0","_where":"/var/www/html/geoquizz/mobile/geoQuizzApp","author":{"name":"Matt Zabriskie"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"bugs":{"url":"https://github.com/axios/axios/issues"},"bundleDependencies":false,"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}],"dependencies":{"follow-redirects":"^1.3.0","is-buffer":"^1.1.5"},"deprecated":false,"description":"Promise based HTTP client for the browser and node.js","devDependencies":{"bundlesize":"^0.5.7","coveralls":"^2.11.9","es6-promise":"^4.0.5","grunt":"^1.0.1","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.0.0","grunt-contrib-nodeunit":"^1.0.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^19.0.0","grunt-karma":"^2.0.0","grunt-ts":"^6.0.0-beta.3","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^1.3.0","karma-chrome-launcher":"^2.0.0","karma-coverage":"^1.0.0","karma-firefox-launcher":"^1.0.0","karma-jasmine":"^1.0.2","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.1.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","sinon":"^1.17.4","typescript":"^2.0.3","url-search-params":"^0.6.1","webpack":"^1.13.1","webpack-dev-server":"^1.14.1"},"homepage":"https://github.com/axios/axios","keywords":["xhr","http","ajax","promise","node"],"license":"MIT","main":"index.js","name":"axios","repository":{"type":"git","url":"git+https://github.com/axios/axios.git"},"scripts":{"build":"NODE_ENV=production grunt build","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","examples":"node ./examples/server.js","postversion":"git push && git push --tags","preversion":"npm test","start":"node ./sandbox/server.js","test":"grunt test && bundlesize","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json"},"typings":"./index.d.ts","version":"0.18.0"};

/***/ }),

/***/ "../node_modules/base64-js/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

  for (var i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "../node_modules/browserify-zlib/lib/binding.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {
/* eslint camelcase: "off" */

var assert = __webpack_require__("../node_modules/assert/assert.js");

var Zstream = __webpack_require__("../node_modules/pako/lib/zlib/zstream.js");

var zlib_deflate = __webpack_require__("../node_modules/pako/lib/zlib/deflate.js");

var zlib_inflate = __webpack_require__("../node_modules/pako/lib/zlib/inflate.js");

var constants = __webpack_require__("../node_modules/pako/lib/zlib/constants.js");

for (var key in constants) {
  exports[key] = constants[key];
} // zlib modes


exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;
var GZIP_HEADER_ID1 = 0x1f;
var GZIP_HEADER_ID2 = 0x8b;
/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */

function Zlib(mode) {
  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
    throw new TypeError('Bad argument');
  }

  this.dictionary = null;
  this.err = 0;
  this.flush = 0;
  this.init_done = false;
  this.level = 0;
  this.memLevel = 0;
  this.mode = mode;
  this.strategy = 0;
  this.windowBits = 0;
  this.write_in_progress = false;
  this.pending_close = false;
  this.gzip_id_bytes_read = 0;
}

Zlib.prototype.close = function () {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }

  this.pending_close = false;
  assert(this.init_done, 'close before init');
  assert(this.mode <= exports.UNZIP);

  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
    zlib_inflate.inflateEnd(this.strm);
  }

  this.mode = exports.NONE;
  this.dictionary = null;
};

Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
  assert.equal(arguments.length, 8);
  assert(this.init_done, 'write before init');
  assert(this.mode !== exports.NONE, 'already finalized');
  assert.equal(false, this.write_in_progress, 'write already in progress');
  assert.equal(false, this.pending_close, 'close is pending');
  this.write_in_progress = true;
  assert.equal(false, flush === undefined, 'must provide flush value');
  this.write_in_progress = true;

  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
    throw new Error('Invalid flush value');
  }

  if (input == null) {
    input = Buffer.alloc(0);
    in_len = 0;
    in_off = 0;
  }

  this.strm.avail_in = in_len;
  this.strm.input = input;
  this.strm.next_in = in_off;
  this.strm.avail_out = out_len;
  this.strm.output = out;
  this.strm.next_out = out_off;
  this.flush = flush;

  if (!async) {
    // sync version
    this._process();

    if (this._checkError()) {
      return this._afterSync();
    }

    return;
  } // async version


  var self = this;
  process.nextTick(function () {
    self._process();

    self._after();
  });
  return this;
};

Zlib.prototype._afterSync = function () {
  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;
  this.write_in_progress = false;
  return [avail_in, avail_out];
};

Zlib.prototype._process = function () {
  var next_expected_header_byte = null; // If the avail_out is left at 0, then it means that it ran out
  // of room.  If there was avail_out left over, then it means
  // that all of the input was consumed.

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflate(this.strm, this.flush);
      break;

    case exports.UNZIP:
      if (this.strm.avail_in > 0) {
        next_expected_header_byte = this.strm.next_in;
      }

      switch (this.gzip_id_bytes_read) {
        case 0:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
            this.gzip_id_bytes_read = 1;
            next_expected_header_byte++;

            if (this.strm.avail_in === 1) {
              // The only available byte was already read.
              break;
            }
          } else {
            this.mode = exports.INFLATE;
            break;
          }

        // fallthrough

        case 1:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
            this.gzip_id_bytes_read = 2;
            this.mode = exports.GUNZIP;
          } else {
            // There is no actual difference between INFLATE and INFLATERAW
            // (after initialization).
            this.mode = exports.INFLATE;
          }

          break;

        default:
          throw new Error('invalid number of gzip magic number bytes read');
      }

    // fallthrough

    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      this.err = zlib_inflate.inflate(this.strm, this.flush // If data was encoded with dictionary
      );

      if (this.err === exports.Z_NEED_DICT && this.dictionary) {
        // Load it
        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);

        if (this.err === exports.Z_OK) {
          // And try to decode again
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        } else if (this.err === exports.Z_DATA_ERROR) {
          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
          // Make it possible for After() to tell a bad dictionary from bad
          // input.
          this.err = exports.Z_NEED_DICT;
        }
      }

      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
        // Bytes remain in input buffer. Perhaps this is another compressed
        // member in the same archive, or just trailing garbage.
        // Trailing zero bytes are okay, though, since they are frequently
        // used for padding.
        this.reset();
        this.err = zlib_inflate.inflate(this.strm, this.flush);
      }

      break;

    default:
      throw new Error('Unknown mode ' + this.mode);
  }
};

Zlib.prototype._checkError = function () {
  // Acceptable error states depend on the type of zlib stream.
  switch (this.err) {
    case exports.Z_OK:
    case exports.Z_BUF_ERROR:
      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
        this._error('unexpected end of file');

        return false;
      }

      break;

    case exports.Z_STREAM_END:
      // normal statuses, not fatal
      break;

    case exports.Z_NEED_DICT:
      if (this.dictionary == null) {
        this._error('Missing dictionary');
      } else {
        this._error('Bad dictionary');
      }

      return false;

    default:
      // something else.
      this._error('Zlib error');

      return false;
  }

  return true;
};

Zlib.prototype._after = function () {
  if (!this._checkError()) {
    return;
  }

  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;
  this.write_in_progress = false; // call the write() cb

  this.callback(avail_in, avail_out);

  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype._error = function (message) {
  if (this.strm.msg) {
    message = this.strm.msg;
  }

  this.onerror(message, this.err // no hope of rescue.
  );
  this.write_in_progress = false;

  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');
  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
  assert(level >= -1 && level <= 9, 'invalid compression level');
  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');
  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

  this._init(level, windowBits, memLevel, strategy, dictionary);

  this._setDictionary();
};

Zlib.prototype.params = function () {
  throw new Error('deflateParams Not supported');
};

Zlib.prototype.reset = function () {
  this._reset();

  this._setDictionary();
};

Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
  this.level = level;
  this.windowBits = windowBits;
  this.memLevel = memLevel;
  this.strategy = strategy;
  this.flush = exports.Z_NO_FLUSH;
  this.err = exports.Z_OK;

  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
    this.windowBits += 16;
  }

  if (this.mode === exports.UNZIP) {
    this.windowBits += 32;
  }

  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
    this.windowBits = -1 * this.windowBits;
  }

  this.strm = new Zstream();

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
      break;

    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
      break;

    default:
      throw new Error('Unknown mode ' + this.mode);
  }

  if (this.err !== exports.Z_OK) {
    this._error('Init error');
  }

  this.dictionary = dictionary;
  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype._setDictionary = function () {
  if (this.dictionary == null) {
    return;
  }

  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
      break;

    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to set dictionary');
  }
};

Zlib.prototype._reset = function () {
  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
    case exports.GZIP:
      this.err = zlib_deflate.deflateReset(this.strm);
      break;

    case exports.INFLATE:
    case exports.INFLATERAW:
    case exports.GUNZIP:
      this.err = zlib_inflate.inflateReset(this.strm);
      break;

    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to reset stream');
  }
};

exports.Zlib = Zlib;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/buffer/index.js").Buffer, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/browserify-zlib/lib/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var Buffer = __webpack_require__("../node_modules/buffer/index.js").Buffer;

var Transform = __webpack_require__("../node_modules/stream-browserify/index.js").Transform;

var binding = __webpack_require__("../node_modules/browserify-zlib/lib/binding.js");

var util = __webpack_require__("../node_modules/node-libs-browser/node_modules/util/util.js");

var assert = __webpack_require__("../node_modules/assert/assert.js").ok;

var kMaxLength = __webpack_require__("../node_modules/buffer/index.js").kMaxLength;

var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes'; // zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.

binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15; // fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.

binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = 16 * 1024;
binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;
binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION; // expose all the zlib constants

var bkeys = Object.keys(binding);

for (var bk = 0; bk < bkeys.length; bk++) {
  var bkey = bkeys[bk];

  if (bkey.match(/^Z/)) {
    Object.defineProperty(exports, bkey, {
      enumerable: true,
      value: binding[bkey],
      writable: false
    });
  }
} // translation table for return codes.


var codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};
var ckeys = Object.keys(codes);

for (var ck = 0; ck < ckeys.length; ck++) {
  var ckey = ckeys[ck];
  codes[codes[ckey]] = ckey;
}

Object.defineProperty(exports, 'codes', {
  enumerable: true,
  value: Object.freeze(codes),
  writable: false
});
exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function (o) {
  return new Deflate(o);
};

exports.createInflate = function (o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function (o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function (o) {
  return new InflateRaw(o);
};

exports.createGzip = function (o) {
  return new Gzip(o);
};

exports.createGunzip = function (o) {
  return new Gunzip(o);
};

exports.createUnzip = function (o) {
  return new Unzip(o);
}; // Convenience methods.
// compress/decompress a string or buffer in one step.


exports.deflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function (buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function (buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function (buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;
  engine.on('error', onError);
  engine.on('end', onEnd);
  engine.end(buffer);
  flow();

  function flow() {
    var chunk;

    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }

    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf;
    var err = null;

    if (nread >= kMaxLength) {
      err = new RangeError(kRangeErrorMessage);
    } else {
      buf = Buffer.concat(buffers, nread);
    }

    buffers = [];
    engine.close();
    callback(err, buf);
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') buffer = Buffer.from(buffer);
  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');
  var flushFlag = engine._finishFlushFlag;
  return engine._processChunk(buffer, flushFlag);
} // generic zlib
// minimal 2-byte header


function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
} // gzip - bigger header, same deflate compression


function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
} // raw - no header


function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
} // auto-detect header.


function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}

function isValidFlushFlag(flag) {
  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
} // the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.


function Zlib(opts, mode) {
  var _this = this;

  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
  Transform.call(this, opts);

  if (opts.flush && !isValidFlushFlag(opts.flush)) {
    throw new Error('Invalid flush flag: ' + opts.flush);
  }

  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
    throw new Error('Invalid flush flag: ' + opts.finishFlush);
  }

  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._handle = new binding.Zlib(mode);
  var self = this;
  this._hadError = false;

  this._handle.onerror = function (message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    _close(self);

    self._hadError = true;
    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;
  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

  this._buffer = Buffer.allocUnsafe(this._chunkSize);
  this._offset = 0;
  this._level = level;
  this._strategy = strategy;
  this.once('end', this.close);
  Object.defineProperty(this, '_closed', {
    get: function () {
      return !_this._handle;
    },
    configurable: true,
    enumerable: true
  });
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function (level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }

  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function () {
      assert(self._handle, 'zlib binding closed');

      self._handle.params(level, strategy);

      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function () {
  assert(this._handle, 'zlib binding closed');
  return this._handle.reset();
}; // This is the _flush function called by the transform class,
// internally, when the last chunk has been written.


Zlib.prototype._flush = function (callback) {
  this._transform(Buffer.alloc(0), '', callback);
};

Zlib.prototype.flush = function (kind, callback) {
  var _this2 = this;

  var ws = this._writableState;

  if (typeof kind === 'function' || kind === undefined && !callback) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback) process.nextTick(callback);
  } else if (ws.ending) {
    if (callback) this.once('end', callback);
  } else if (ws.needDrain) {
    if (callback) {
      this.once('drain', function () {
        return _this2.flush(kind, callback);
      });
    }
  } else {
    this._flushFlag = kind;
    this.write(Buffer.alloc(0), '', callback);
  }
};

Zlib.prototype.close = function (callback) {
  _close(this, callback);

  process.nextTick(emitCloseNT, this);
};

function _close(engine, callback) {
  if (callback) process.nextTick(callback); // Caller may invoke .close after a zlib error (which will null _handle).

  if (!engine._handle) return;

  engine._handle.close();

  engine._handle = null;
}

function emitCloseNT(self) {
  self.emit('close');
}

Zlib.prototype._transform = function (chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);
  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));
  if (!this._handle) return cb(new Error('zlib binding closed')); // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
  // (or whatever flag was provided using opts.finishFlush).
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.

  if (last) flushFlag = this._finishFlushFlag;else {
    flushFlag = this._flushFlag; // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.

    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;
  var self = this;
  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;
    var error;
    this.on('error', function (er) {
      error = er;
    });
    assert(this._handle, 'zlib binding closed');

    do {
      var res = this._handle.writeSync(flushFlag, chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len

    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    if (nread >= kMaxLength) {
      _close(this);

      throw new RangeError(kRangeErrorMessage);
    }

    var buf = Buffer.concat(buffers, nread);

    _close(this);

    return buf;
  }

  assert(this._handle, 'zlib binding closed');

  var req = this._handle.write(flushFlag, chunk, // in
  inOff, // in_off
  availInBefore, // in_len
  this._buffer, // out
  this._offset, //out_off
  availOutBefore); // out_len


  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    // When the callback is used in an async write, the callback's
    // context is the `req` object that was created. The req object
    // is === this._handle, and that's why it's important to null
    // out the values after they are done being used. `this._handle`
    // can stay in memory longer than the callback and buffer are needed.
    if (this) {
      this.buffer = null;
      this.callback = null;
    }

    if (self._hadError) return;
    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);

      self._offset += have; // serve some output to the consumer.

      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    } // exhausted the output buffer, or used all the input create a new one.


    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;
      if (!async) return true;

      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);

      newReq.callback = callback; // this same function

      newReq.buffer = chunk;
      return;
    }

    if (!async) return false; // finished with the chunk.

    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__("../node_modules/base64-js/index.js");

var ieee754 = __webpack_require__("../node_modules/ieee754/index.js");

var isArray = __webpack_require__("../node_modules/isarray/index.js");

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function () {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/core-util-is/lib/util.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }

  return objectToString(arg) === '[object Array]';
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../node_modules/css-loader/lib/css-base.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media " + item[2] + "{" + content + "}";
      } else {
        return content;
      }
    }).join("");
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === "string") modules = [[null, modules, ""]];
    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];
      if (typeof id === "number") alreadyImportedModules[id] = true;
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      //  when a module is imported multiple times with different media queries.
      //  I hope this will never occur (Hey this way we have smaller bundles)

      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "../node_modules/debug/src/browser.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  const c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  let index = 0;
  let lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, match => {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log(...args) {
  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return typeof console === 'object' && console.log && console.log(...args);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  let r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = __webpack_require__("../node_modules/debug/src/common.js")(exports);
const {
  formatters
} = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/debug/src/common.js":
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__("../node_modules/ms/index.js");
  Object.keys(env).forEach(key => {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    let hash = 0;

    for (let i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    let prevTime;

    function debug(...args) {
      // Disabled?
      if (!debug.enabled) {
        return;
      }

      const self = debug; // Set `diff` timestamp

      const curr = Number(new Date());
      const ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      let index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        const formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          const val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      const logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    const index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    let i;
    const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    const len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      const instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */


  function disable() {
    const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');
    createDebug.enable('');
    return namespaces;
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    let i;
    let len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */


  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

/***/ }),

/***/ "../node_modules/debug/src/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */
if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
  module.exports = __webpack_require__("../node_modules/debug/src/browser.js");
} else {
  module.exports = __webpack_require__("../node_modules/debug/src/node.js");
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/debug/src/node.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * Module dependencies.
 */
const tty = __webpack_require__("../node_modules/tty-browserify/index.js");

const util = __webpack_require__("../node_modules/node-libs-browser/node_modules/util/util.js");
/**
 * This is the Node.js implementation of `debug()`.
 */


exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
  // eslint-disable-next-line import/no-extraneous-dependencies
  const supportsColor = __webpack_require__("../node_modules/supports-color/index.js");

  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
  }
} catch (error) {} // Swallow - we only care if `supports-color` is available; it doesn't have to be.

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */


exports.inspectOpts = Object.keys(process.env).filter(key => {
  return /^debug_/i.test(key);
}).reduce((obj, key) => {
  // Camel-case
  const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
    return k.toUpperCase();
  }); // Coerce string value into JS value

  let val = process.env[key];

  if (/^(yes|on|true|enabled)$/i.test(val)) {
    val = true;
  } else if (/^(no|off|false|disabled)$/i.test(val)) {
    val = false;
  } else if (val === 'null') {
    val = null;
  } else {
    val = Number(val);
  }

  obj[prop] = val;
  return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  const {
    namespace: name,
    useColors
  } = this;

  if (useColors) {
    const c = this.color;
    const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
    const prefix = `  ${colorCode};1m${name} \u001B[0m`;
    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
  } else {
    args[0] = getDate() + name + ' ' + args[0];
  }
}

function getDate() {
  if (exports.inspectOpts.hideDate) {
    return '';
  }

  return new Date().toISOString() + ' ';
}
/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */


function log(...args) {
  return process.stderr.write(util.format(...args) + '\n');
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  if (namespaces) {
    process.env.DEBUG = namespaces;
  } else {
    // If you set a process.env field to null or undefined, it gets cast to the
    // string 'null' or 'undefined'. Just delete instead.
    delete process.env.DEBUG;
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */


function init(debug) {
  debug.inspectOpts = {};
  const keys = Object.keys(exports.inspectOpts);

  for (let i = 0; i < keys.length; i++) {
    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
  }
}

module.exports = __webpack_require__("../node_modules/debug/src/common.js")(exports);
const {
  formatters
} = module.exports;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts).replace(/\s*\n\s*/g, ' ');
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */


formatters.O = function (v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/events/events.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = $getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  var args = [];

  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);

  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

/***/ }),

/***/ "../node_modules/follow-redirects/index.js":
/***/ (function(module, exports, __webpack_require__) {

var url = __webpack_require__("../node_modules/url/url.js");

var URL = url.URL;

var http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");

var https = __webpack_require__("../node_modules/https-browserify/index.js");

var assert = __webpack_require__("../node_modules/assert/assert.js");

var Writable = __webpack_require__("../node_modules/stream-browserify/index.js").Writable;

var debug = __webpack_require__("../node_modules/debug/src/index.js")("follow-redirects"); // RFC7231§4.2.1: Of the request methods defined by this specification,
// the GET, HEAD, OPTIONS, and TRACE methods are defined to be safe.


var SAFE_METHODS = {
  GET: true,
  HEAD: true,
  OPTIONS: true,
  TRACE: true
}; // Create handlers that pass events from native requests

var eventHandlers = Object.create(null);
["abort", "aborted", "error", "socket", "timeout"].forEach(function (event) {
  eventHandlers[event] = function (arg) {
    this._redirectable.emit(event, arg);
  };
}); // An HTTP(S) request that can be redirected

function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  options.headers = options.headers || {};
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = []; // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.

  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }

    delete options.host;
  } // Attach a callback if passed


  if (responseCallback) {
    this.on("response", responseCallback);
  } // React to responses of native requests


  var self = this;

  this._onNativeResponse = function (response) {
    self._processResponse(response);
  }; // Complete the URL object when necessary


  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");

    if (searchPos < 0) {
      options.pathname = options.path;
    } else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  } // Perform the first request


  this._performRequest();
}

RedirectableRequest.prototype = Object.create(Writable.prototype); // Writes buffered data to the current native request

RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new Error("write after end");
  } // Validate input and shift parameters if necessary


  if (!(typeof data === "string" || typeof data === "object" && "length" in data)) {
    throw new Error("data should be a string, Buffer or Uint8Array");
  }

  if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  } // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066


  if (data.length === 0) {
    if (callback) {
      callback();
    }

    return;
  } // Only write when we don't exceed the maximum body length


  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;

    this._requestBodyBuffers.push({
      data: data,
      encoding: encoding
    });

    this._currentRequest.write(data, encoding, callback);
  } // Error when we exceed the maximum body length
  else {
      this.emit("error", new Error("Request body larger than maxBodyLength limit"));
      this.abort();
    }
}; // Ends the current native request


RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (typeof data === "function") {
    callback = data;
    data = encoding = null;
  } else if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  } // Write data if needed and end


  if (!data) {
    this._ended = this._ending = true;

    this._currentRequest.end(null, null, callback);
  } else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
}; // Sets a header value on the current native request


RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;

  this._currentRequest.setHeader(name, value);
}; // Clears a header value on the current native request


RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];

  this._currentRequest.removeHeader(name);
}; // Global timeout for all underlying requests


RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  if (callback) {
    this.once("timeout", callback);
  }

  if (this.socket) {
    startTimer(this, msecs);
  } else {
    var self = this;

    this._currentRequest.once("socket", function () {
      startTimer(self, msecs);
    });
  }

  this.once("response", clearTimer);
  this.once("error", clearTimer);
  return this;
};

function startTimer(request, msecs) {
  clearTimeout(request._timeout);
  request._timeout = setTimeout(function () {
    request.emit("timeout");
  }, msecs);
}

function clearTimer() {
  clearTimeout(this._timeout);
} // Proxy all other public ClientRequest methods


["abort", "flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive"].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
}); // Proxy all public ClientRequest properties

["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () {
      return this._currentRequest[property];
    }
  });
}); // Executes the next native request (initial or redirect)

RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];

  if (!nativeProtocol) {
    this.emit("error", new Error("Unsupported protocol " + protocol));
    return;
  } // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)


  if (this._options.agents) {
    var scheme = protocol.substr(0, protocol.length - 1);
    this._options.agent = this._options.agents[scheme];
  } // Create the native request


  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
  this._currentUrl = url.format(this._options); // Set up event handlers

  request._redirectable = this;

  for (var event in eventHandlers) {
    /* istanbul ignore else */
    if (event) {
      request.on(event, eventHandlers[event]);
    }
  } // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)


  if (this._isRedirect) {
    // Write the request entity and end.
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;

    (function writeNext(error) {
      // Only write if this request has not been redirected yet

      /* istanbul ignore else */
      if (request === self._currentRequest) {
        // Report any write errors

        /* istanbul ignore if */
        if (error) {
          self.emit("error", error);
        } // Write the next buffer if there are still left
        else if (i < buffers.length) {
            var buffer = buffers[i++];
            /* istanbul ignore else */

            if (!request.finished) {
              request.write(buffer.data, buffer.encoding, writeNext);
            }
          } // End the request if `end` has been called on us
          else if (self._ended) {
              request.end();
            }
      }
    })();
  }
}; // Processes a response from the current native request


RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: response.statusCode
    });
  } // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.


  var location = response.headers.location;

  if (location && this._options.followRedirects !== false && response.statusCode >= 300 && response.statusCode < 400) {
    // Abort the current request
    this._currentRequest.removeAllListeners();

    this._currentRequest.on("error", noop);

    this._currentRequest.abort(); // RFC7231§6.4: A client SHOULD detect and intervene
    // in cyclical redirections (i.e., "infinite" redirection loops).


    if (++this._redirectCount > this._options.maxRedirects) {
      this.emit("error", new Error("Max redirects exceeded."));
      return;
    } // RFC7231§6.4: Automatic redirection needs to done with
    // care for methods not known to be safe […],
    // since the user might not wish to redirect an unsafe request.
    // RFC7231§6.4.7: The 307 (Temporary Redirect) status code indicates
    // that the target resource resides temporarily under a different URI
    // and the user agent MUST NOT change the request method
    // if it performs an automatic redirection to that URI.


    var header;
    var headers = this._options.headers;

    if (response.statusCode !== 307 && !(this._options.method in SAFE_METHODS)) {
      this._options.method = "GET"; // Drop a possible entity and headers related to it

      this._requestBodyBuffers = [];

      for (header in headers) {
        if (/^content-/i.test(header)) {
          delete headers[header];
        }
      }
    } // Drop the Host header, as the redirect might lead to a different host


    if (!this._isRedirect) {
      for (header in headers) {
        if (/^host$/i.test(header)) {
          delete headers[header];
        }
      }
    } // Perform the redirected request


    var redirectUrl = url.resolve(this._currentUrl, location);
    debug("redirecting to", redirectUrl);
    Object.assign(this._options, url.parse(redirectUrl));
    this._isRedirect = true;

    this._performRequest(); // Discard the remainder of the response to avoid waiting for data


    response.destroy();
  } else {
    // The response is not a redirect; return it as-is
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response); // Clean up

    this._requestBodyBuffers = [];
  }
}; // Wraps the key/value object of protocols with redirect functionality


function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024
  }; // Wrap each protocol

  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects

    wrappedProtocol.request = function (input, options, callback) {
      // Parse parameters
      if (typeof input === "string") {
        var urlStr = input;

        try {
          input = urlToOptions(new URL(urlStr));
        } catch (err) {
          /* istanbul ignore next */
          input = url.parse(urlStr);
        }
      } else if (URL && input instanceof URL) {
        input = urlToOptions(input);
      } else {
        callback = options;
        options = input;
        input = {
          protocol: protocol
        };
      }

      if (typeof options === "function") {
        callback = options;
        options = null;
      } // Set defaults


      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    }; // Executes a GET request, following redirects


    wrappedProtocol.get = function (input, options, callback) {
      var request = wrappedProtocol.request(input, options, callback);
      request.end();
      return request;
    };
  });
  return exports;
}
/* istanbul ignore next */


function noop() {}
/* empty */
// from https://github.com/nodejs/node/blob/master/lib/internal/url.js


function urlToOptions(urlObject) {
  var options = {
    protocol: urlObject.protocol,
    hostname: urlObject.hostname.startsWith("[") ?
    /* istanbul ignore next */
    urlObject.hostname.slice(1, -1) : urlObject.hostname,
    hash: urlObject.hash,
    search: urlObject.search,
    pathname: urlObject.pathname,
    path: urlObject.pathname + urlObject.search,
    href: urlObject.href
  };

  if (urlObject.port !== "") {
    options.port = Number(urlObject.port);
  }

  return options;
} // Exports


module.exports = wrap({
  http: http,
  https: https
});
module.exports.wrap = wrap;

/***/ }),

/***/ "../node_modules/has-flag/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

module.exports = (flag, argv) => {
  argv = argv || process.argv;
  const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
  const pos = argv.indexOf(prefix + flag);
  const terminatorPos = argv.indexOf('--');
  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/https-browserify/index.js":
/***/ (function(module, exports, __webpack_require__) {

var http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");

var url = __webpack_require__("../node_modules/url/url.js");

var https = module.exports;

for (var key in http) {
  if (http.hasOwnProperty(key)) https[key] = http[key];
}

https.request = function (params, cb) {
  params = validateParams(params);
  return http.request.call(this, params, cb);
};

https.get = function (params, cb) {
  params = validateParams(params);
  return http.get.call(this, params, cb);
};

function validateParams(params) {
  if (typeof params === 'string') {
    params = url.parse(params);
  }

  if (!params.protocol) {
    params.protocol = 'https:';
  }

  if (params.protocol !== 'https:') {
    throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
  }

  return params;
}

/***/ }),

/***/ "../node_modules/ieee754/index.js":
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "../node_modules/inherits/inherits.js":
/***/ (function(module, exports, __webpack_require__) {

try {
  var util = __webpack_require__("../node_modules/node-libs-browser/node_modules/util/util.js");

  if (typeof util.inherits !== 'function') throw '';
  module.exports = util.inherits;
} catch (e) {
  module.exports = __webpack_require__("../node_modules/inherits/inherits_browser.js");
}

/***/ }),

/***/ "../node_modules/inherits/inherits_browser.js":
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function () {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),

/***/ "../node_modules/is-buffer/index.js":
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
} // For Node v0.10 support. Remove this eventually.


function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

/***/ }),

/***/ "../node_modules/isarray/index.js":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "../node_modules/ms/index.js":
/***/ (function(module, exports) {

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css-regular.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const loadCss = __webpack_require__("../node_modules/nativescript-dev-webpack/load-application-css.js");

module.exports = function () {
  loadCss(function () {
    const appCssContext = __webpack_require__("./ sync ^\\.\\/app\\.(css|scss|less|sass)$");

    global.registerWebpackModules(appCssContext);
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = function (loadModuleFn) {
  const application = __webpack_require__("tns-core-modules/application");

  __webpack_require__("tns-core-modules/ui/styling/style-scope");

  loadModuleFn();
  application.loadAppCss();
};

/***/ }),

/***/ "../node_modules/nativescript-localstorage/localstorage.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**********************************************************************************
* (c) 2017-2018, Nathanael Anderson.
* Licensed under the MIT license.
*
* Version 1.1.8                                        nathan@master-technology.com
**********************************************************************************/


const FileSystemAccess = __webpack_require__("tns-core-modules/file-system/file-system-access").FileSystemAccess; // So that code that is looking for the "Storage" object will pass its check


if (!global.Storage) {
  global.Storage = function Storage() {};
}

if (!global.localStorage) {
  let localStorageData = {};
  let localStorageTimeout = null;

  const internalSaveData = function () {
    let fsa = new FileSystemAccess();
    let fileName = fsa.getDocumentsFolderPath() + "/localStorage.db";

    try {
      fsa.writeText(fileName, JSON.stringify(localStorageData));
    } catch (err) {
      // This should never happen on normal data, but if they tried to put non JS stuff it won't serialize
      console.log("localStorage: unable to write storage, error: ", err);
    }
  };

  const saveData = function () {
    if (localStorageTimeout !== null) {
      clearTimeout(localStorageTimeout);
    }

    localStorageTimeout = setTimeout(internalSaveData, 250);
  };

  const loadData = function () {
    let fsa = new FileSystemAccess();
    let fileName = fsa.getDocumentsFolderPath() + "/localStorage.db";

    if (!fsa.fileExists(fileName)) {
      return;
    }

    let data;

    try {
      let textData = fsa.readText(fileName);
      data = JSON.parse(textData);
      localStorageData = data;
    } catch (err) {
      console.log("localStorage: error reading storage, Error: ", err);
    }
  };

  loadData();
  global.localStorage = {
    getItem: function (name) {
      if (localStorageData.hasOwnProperty(name)) {
        return localStorageData[name];
      }

      return null;
    },
    key: function (id) {
      const keys = Object.keys(localStorageData);

      if (id >= keys.length) {
        return null;
      }

      return keys[id];
    },
    setItemObject: function (name, value) {
      localStorageData[name] = value;
      saveData();
    },
    // Revamp this to be "String" only
    // https://github.com/NathanaelA/nativescript-localstorage/issues/17
    setItem: function (name, value) {
      if (value == null) {
        if (value === null) {
          localStorageData[name] = "null";
        } else {
          localStorageData[name] = "undefined";
        }
      } else {
        localStorageData[name] = value.toString();
      }

      saveData();
    },
    removeItem: function (name) {
      if (localStorageData[name]) {
        delete localStorageData[name];
        saveData();
      }
    },
    clear: function () {
      localStorageData = {};
      saveData();
    }
  };
  Object.defineProperty(global.localStorage, "length", {
    get: function () {
      return Object.keys(localStorageData).length;
    },
    enumerable: true,
    configurable: true
  });
}

if (!global.sessionStorage) {
  let sessionStorageData = {};
  global.sessionStorage = {
    getItem: function (name) {
      if (sessionStorageData.hasOwnProperty(name)) {
        return sessionStorageData[name];
      }

      return null;
    },
    key: function (id) {
      const keys = Object.keys(sessionStorageData);

      if (id >= keys.length) {
        return null;
      }

      return keys[id];
    },
    setItemObject: function (name, value) {
      sessionStorageData[name] = value;
    },
    setItem: function (name, value) {
      if (value == null) {
        if (value === null) {
          sessionStorageData[name] = "null";
        } else {
          sessionStorageData[name] = "undefined";
        }
      } else {
        sessionStorageData[name] = value.toString();
      }
    },
    removeItem: function (name) {
      if (sessionStorageData[name]) {
        delete sessionStorageData[name];
      }
    },
    clear: function () {
      sessionStorageData = {};
    }
  };
  Object.defineProperty(global.sessionStorage, "length", {
    get: function () {
      return Object.keys(sessionStorageData).length;
    },
    enumerable: true,
    configurable: true
  });
}

module.exports = global.localStorage;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;

(function (root) {
  /** Detect free variables */
  var freeExports =  true && exports && !exports.nodeType && exports;
  var freeModule =  true && module && !module.nodeType && module;
  var freeGlobal = typeof global == 'object' && global;

  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
    root = freeGlobal;
  }
  /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */


  var punycode,

  /** Highest positive signed 32-bit float value */
  maxInt = 2147483647,
      // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  base = 36,
      tMin = 1,
      tMax = 26,
      skew = 38,
      damp = 700,
      initialBias = 72,
      initialN = 128,
      // 0x80
  delimiter = '-',
      // '\x2D'

  /** Regular expressions */
  regexPunycode = /^xn--/,
      regexNonASCII = /[^\x20-\x7E]/,
      // unprintable ASCII chars + non-ASCII chars
  regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
      // RFC 3490 separators

  /** Error messages */
  errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  },

  /** Convenience shortcuts */
  baseMinusTMin = base - tMin,
      floor = Math.floor,
      stringFromCharCode = String.fromCharCode,

  /** Temporary variable */
  key;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  function ucs2encode(array) {
    return map(array, function (value) {
      var output = '';

      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }

      output += stringFromCharCode(value);
      return output;
    }).join('');
  }
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }

    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }

    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }

    return base;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  function decode(input) {
    // Don't use UCS-2
    var output = [],
        inputLength = input.length,
        out,
        i = 0,
        n = initialN,
        bias = initialBias,
        basic,
        j,
        index,
        oldi,
        w,
        k,
        digit,
        t,

    /** Cached calculation results */
    baseMinusT; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
    /* no final expression */
    {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for (oldi = i, w = 1, k = base;;
      /* no condition */
      k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;
      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output

      output.splice(i++, 0, n);
    }

    return ucs2encode(output);
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;;
          /* no condition */
          k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.4.1',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /** Expose `punycode` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return punycode;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/module.js")(module), __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/node-libs-browser/node_modules/util/support/isBuffer.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function isBuffer(arg) {
  return arg instanceof Buffer;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../node_modules/node-libs-browser/node_modules/util/util.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};

  for (var i = 0; i < keys.length; i++) {
    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
  }

  return descriptors;
};

var formatRegExp = /%[sdj%]/g;

exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];

    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }

    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;

    switch (x) {
      case '%s':
        return String(args[i++]);

      case '%d':
        return Number(args[i++]);

      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }

      default:
        return x;
    }
  });

  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }

  return str;
}; // Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.


exports.deprecate = function (fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  } // Allow for deprecating things in the process of starting up.


  if (typeof process === 'undefined') {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnviron;

exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();

  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;

      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }

  return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/* legacy: obj, showHidden, depth, colors*/


function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = JSON.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
} // NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.


function isArray(ar) {
  return Array.isArray(ar);
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__("../node_modules/node-libs-browser/node_modules/util/support/isBuffer.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
} // log is just a thin wrapper to console.log that prepends a timestamp


exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */


exports.inherits = __webpack_require__("../node_modules/inherits/inherits.js");

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];

    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }

    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};

exports.promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }

  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  } // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.


  function callbackified() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();

    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }

    var self = this;

    var cb = function () {
      return maybeCb.apply(self, arguments);
    }; // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)


    original.apply(this, args).then(function (ret) {
      process.nextTick(cb, null, ret);
    }, function (rej) {
      process.nextTick(callbackifyOnRejected, rej, cb);
    });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}

exports.callbackify = callbackify;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/os-browserify/browser.js":
/***/ (function(module, exports) {

exports.endianness = function () {
  return 'LE';
};

exports.hostname = function () {
  if (typeof location !== 'undefined') {
    return location.hostname;
  } else return '';
};

exports.loadavg = function () {
  return [];
};

exports.uptime = function () {
  return 0;
};

exports.freemem = function () {
  return Number.MAX_VALUE;
};

exports.totalmem = function () {
  return Number.MAX_VALUE;
};

exports.cpus = function () {
  return [];
};

exports.type = function () {
  return 'Browser';
};

exports.release = function () {
  if (typeof navigator !== 'undefined') {
    return navigator.appVersion;
  }

  return '';
};

exports.networkInterfaces = exports.getNetworkInterfaces = function () {
  return {};
};

exports.arch = function () {
  return 'javascript';
};

exports.platform = function () {
  return 'browser';
};

exports.tmpdir = exports.tmpDir = function () {
  return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
  return '/';
};

/***/ }),

/***/ "../node_modules/pako/lib/utils/common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj
/*from1, from2, from3, ...*/
) {
  var sources = Array.prototype.slice.call(arguments, 1);

  while (sources.length) {
    var source = sources.shift();

    if (!source) {
      continue;
    }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
}; // reduce buffer size, avoiding mem copy


exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) {
    return buf;
  }

  if (buf.subarray) {
    return buf.subarray(0, size);
  }

  buf.length = size;
  return buf;
};

var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    } // Fallback to ordinary array


    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result; // calculate data length

    len = 0;

    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    } // join chunks


    result = new Uint8Array(len);
    pos = 0;

    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};
var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
}; // Enable/Disable typed arrays use, for testing
//

exports.setTyped = function (on) {
  if (on) {
    exports.Buf8 = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8 = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

/***/ }),

/***/ "../node_modules/pako/lib/zlib/adler32.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = adler & 0xffff | 0,
      s2 = adler >>> 16 & 0xffff | 0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return s1 | s2 << 16 | 0;
}

module.exports = adler32;

/***/ }),

/***/ "../node_modules/pako/lib/zlib/constants.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,

  /* The deflate compression method */
  Z_DEFLATED: 8 //Z_NULL:                 null // Use -1 or null inline, depending on var type

};

/***/ }),

/***/ "../node_modules/pako/lib/zlib/crc32.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// Use ordinary array, since untyped makes no boost here

function makeTable() {
  var c,
      table = [];

  for (var n = 0; n < 256; n++) {
    c = n;

    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
    }

    table[n] = c;
  }

  return table;
} // Create table on load. Just 255 signed longs. Not a problem.


var crcTable = makeTable();

function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;
  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return crc ^ -1; // >>> 0;
}

module.exports = crc32;

/***/ }),

/***/ "../node_modules/pako/lib/zlib/deflate.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__("../node_modules/pako/lib/utils/common.js");

var trees = __webpack_require__("../node_modules/pako/lib/zlib/trees.js");

var adler32 = __webpack_require__("../node_modules/pako/lib/zlib/adler32.js");

var crc32 = __webpack_require__("../node_modules/pako/lib/zlib/crc32.js");

var msg = __webpack_require__("../node_modules/pako/lib/zlib/messages.js");
/* Public constants ==========================================================*/

/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */


var Z_NO_FLUSH = 0;
var Z_PARTIAL_FLUSH = 1; //var Z_SYNC_FLUSH    = 2;

var Z_FULL_FLUSH = 3;
var Z_FINISH = 4;
var Z_BLOCK = 5; //var Z_TREES         = 6;

/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */

var Z_OK = 0;
var Z_STREAM_END = 1; //var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;

var Z_STREAM_ERROR = -2;
var Z_DATA_ERROR = -3; //var Z_MEM_ERROR     = -4;

var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;

var Z_DEFAULT_COMPRESSION = -1;
var Z_FILTERED = 1;
var Z_HUFFMAN_ONLY = 2;
var Z_RLE = 3;
var Z_FIXED = 4;
var Z_DEFAULT_STRATEGY = 0;
/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT

var Z_UNKNOWN = 2;
/* The deflate compression method */

var Z_DEFLATED = 8;
/*============================================================================*/

var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */

var MAX_WBITS = 15;
/* 32K LZ77 window */

var DEF_MEM_LEVEL = 8;
var LENGTH_CODES = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS = 256;
/* number of literal bytes 0..255 */

var L_CODES = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES = 30;
/* number of distance codes */

var BL_CODES = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
var PRESET_DICT = 0x20;
var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;
var BS_NEED_MORE = 1;
/* block not completed, need more input or more output */

var BS_BLOCK_DONE = 2;
/* block flush performed */

var BS_FINISH_STARTED = 3;
/* finish started, need only more output at next deflate */

var BS_FINISH_DONE = 4;
/* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return (f << 1) - (f > 4 ? 9 : 0);
}

function zero(buf) {
  var len = buf.length;

  while (--len >= 0) {
    buf[len] = 0;
  }
}
/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */


function flush_pending(strm) {
  var s = strm.state; //_tr_flush_bits(s);

  var len = s.pending;

  if (len > strm.avail_out) {
    len = strm.avail_out;
  }

  if (len === 0) {
    return;
  }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;

  if (s.pending === 0) {
    s.pending_out = 0;
  }
}

function flush_block_only(s, last) {
  trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);

  s.block_start = s.strstart;
  flush_pending(s.strm);
}

function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}
/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */


function putShortMSB(s, b) {
  //  put_byte(s, (Byte)(b >> 8));
  //  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = b >>> 8 & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}
/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */


function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) {
    len = size;
  }

  if (len === 0) {
    return 0;
  }

  strm.avail_in -= len; // zmemcpy(buf, strm->next_in, len);

  utils.arraySet(buf, strm.input, strm.next_in, len, start);

  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;
  return len;
}
/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */


function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;
  /* max hash chain length */

  var scan = s.strstart;
  /* current string */

  var match;
  /* matched string */

  var len;
  /* length of current match */

  var best_len = s.prev_length;
  /* best match length so far */

  var nice_match = s.nice_match;
  /* stop if match long enough */

  var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0
  /*NIL*/
  ;
  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev = s.prev;
  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1 = _win[scan + best_len - 1];
  var scan_end = _win[scan + best_len];
  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */

  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */


  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  } // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");


  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;
    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }
    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */


    scan += 2;
    match++; // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */

    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend); // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");


    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;

      if (len >= nice_match) {
        break;
      }

      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }

  return s.lookahead;
}
/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */


function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str; //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart; // JS ints have 32 bit, block below not needed

    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}

    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */

    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */

      s.block_start -= _w_size;
      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;

      do {
        m = s.head[--p];
        s.head[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);

      n = _w_size;
      p = n;

      do {
        m = s.prev[--p];
        s.prev[p] = m >= _w_size ? m - _w_size : 0;
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }

    if (s.strm.avail_in === 0) {
      break;
    }
    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");


    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;
    /* Initialize the hash value now that we have some input: */

    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];
      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */

      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask; //#if MIN_MATCH != 3
      //        Call update_hash() MIN_MATCH-3 more times
      //#endif

      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;

        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
  //  if (s.high_water < s.window_size) {
  //    var curr = s.strstart + s.lookahead;
  //    var init = 0;
  //
  //    if (s.high_water < curr) {
  //      /* Previous high water mark below current data -- zero WIN_INIT
  //       * bytes or up to end of window, whichever is less.
  //       */
  //      init = s.window_size - curr;
  //      if (init > WIN_INIT)
  //        init = WIN_INIT;
  //      zmemzero(s->window + curr, (unsigned)init);
  //      s->high_water = curr + init;
  //    }
  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
  //      /* High water mark at or above current data, but below current data
  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
  //       * to end of window, whichever is less.
  //       */
  //      init = (ulg)curr + WIN_INIT - s->high_water;
  //      if (init > s->window_size - s->high_water)
  //        init = s->window_size - s->high_water;
  //      zmemzero(s->window + s->high_water, (unsigned)init);
  //      s->high_water += init;
  //    }
  //  }
  //
  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
  //    "not enough room for search");

}
/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */


function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }
  /* Copy as much as possible from input to output: */


  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {
      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
      //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
      //        s.block_start >= s.w_size)) {
      //        throw  new Error("slide too late");
      //      }
      fill_window(s);

      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */

    } //Assert(s->block_start >= 0L, "block gone");
    //    if (s.block_start < 0) throw new Error("block gone");


    s.strstart += s.lookahead;
    s.lookahead = 0;
    /* Emit a stored block if pending_buf will be full: */

    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/

      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */


    if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);

    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/


    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);

    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/

  }

  return BS_NEED_MORE;
}
/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */


function deflate_fast(s, flush) {
  var hash_head;
  /* head of the hash chain */

  var bflush;
  /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);

      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
        /* flush the current block */
      }
    }
    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */


    hash_head = 0
    /*NIL*/
    ;

    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }
    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */


    if (hash_head !== 0
    /*NIL*/
    && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }

    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */

      if (s.match_length <= s.max_lazy_match
      /*max_insert_length*/
      && s.lookahead >= MIN_MATCH) {
        s.match_length--;
        /* string at strstart already in table */

        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/

          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/

          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);

        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */

        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask; //#if MIN_MATCH != 3
        //                Call UPDATE_HASH() MIN_MATCH-3 more times
        //#endif

        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));

      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }

    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }
  }

  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);

    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/


    return BS_FINISH_DONE;
  }

  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);

    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/

  }

  return BS_BLOCK_DONE;
}
/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */


function deflate_slow(s, flush) {
  var hash_head;
  /* head of hash chain */

  var bflush;
  /* set if current block must be flushed */

  var max_insert;
  /* Process the input block. */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);

      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */

    }
    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */


    hash_head = 0
    /*NIL*/
    ;

    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }
    /* Find the longest match, discarding those <= prev_length.
     */


    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0
    /*NIL*/
    && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD
    /*MAX_DIST(s)*/
    ) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */

        if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096
        /*TOO_FAR*/
        )) {
          /* If prev_match is also MIN_MATCH, match_start is garbage
           * but we will ignore the current match anyway.
           */
          s.match_length = MIN_MATCH - 1;
        }
      }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */


    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */
      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/

      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */

      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;

      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);

      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);

        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/

      }
    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));

      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }

      s.strstart++;
      s.lookahead--;

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  } //Assert (flush != Z_NO_FLUSH, "no flush?");


  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));

    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }

  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);

    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/


    return BS_FINISH_DONE;
  }

  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);

    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/

  }

  return BS_BLOCK_DONE;
}
/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */


function deflate_rle(s, flush) {
  var bflush;
  /* set if current block must be flushed */

  var prev;
  /* byte at distance one to match */

  var scan, strend;
  /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);

      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */

    }
    /* See how many times the previous byte repeats */


    s.match_length = 0;

    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];

      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;

        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);

        s.match_length = MAX_MATCH - (strend - scan);

        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      } //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");

    }
    /* Emit match if have run of MIN_MATCH or longer, else emit literal */


    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));

      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }

    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);

    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/


    return BS_FINISH_DONE;
  }

  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);

    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/

  }

  return BS_BLOCK_DONE;
}
/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */


function deflate_huff(s, flush) {
  var bflush;
  /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);

      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }

        break;
        /* flush the current block */
      }
    }
    /* Output a literal byte */


    s.match_length = 0; //Tracevv((stderr,"%c", s->window[s->strstart]));

    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/

    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;

    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);

    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/


    return BS_FINISH_DONE;
  }

  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);

    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/

  }

  return BS_BLOCK_DONE;
}
/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */


function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;
configuration_table = [
/*      good lazy nice chain */
new Config(0, 0, 0, 0, deflate_stored),
/* 0 store only */
new Config(4, 4, 8, 4, deflate_fast),
/* 1 max speed, no lazy matches */
new Config(4, 5, 16, 8, deflate_fast),
/* 2 */
new Config(4, 6, 32, 32, deflate_fast),
/* 3 */
new Config(4, 4, 16, 16, deflate_slow),
/* 4 lazy matches */
new Config(8, 16, 32, 32, deflate_slow),
/* 5 */
new Config(8, 16, 128, 128, deflate_slow),
/* 6 */
new Config(8, 32, 128, 256, deflate_slow),
/* 7 */
new Config(32, 128, 258, 1024, deflate_slow),
/* 8 */
new Config(32, 258, 258, 4096, deflate_slow)
/* 9 max compression */
];
/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */

function lm_init(s) {
  s.window_size = 2 * s.w_size;
  /*** CLEAR_HASH(s); ***/

  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */

  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}

function DeflateState() {
  this.strm = null;
  /* pointer back to this zlib stream */

  this.status = 0;
  /* as the name implies */

  this.pending_buf = null;
  /* output still pending */

  this.pending_buf_size = 0;
  /* size of pending_buf */

  this.pending_out = 0;
  /* next pending byte to output to the stream */

  this.pending = 0;
  /* nb of bytes in the pending buffer */

  this.wrap = 0;
  /* bit 0 true for zlib, bit 1 true for gzip */

  this.gzhead = null;
  /* gzip header information to write */

  this.gzindex = 0;
  /* where in extra, name, or comment */

  this.method = Z_DEFLATED;
  /* can only be DEFLATED */

  this.last_flush = -1;
  /* value of flush param for previous deflate call */

  this.w_size = 0;
  /* LZ77 window size (32K by default) */

  this.w_bits = 0;
  /* log2(w_size)  (8..16) */

  this.w_mask = 0;
  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;
  /* Heads of the hash chains or NIL. */

  this.ins_h = 0;
  /* hash index of string to be inserted */

  this.hash_size = 0;
  /* number of elements in hash table */

  this.hash_bits = 0;
  /* log2(hash_size) */

  this.hash_mask = 0;
  /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;
  /* length of best match */

  this.prev_match = 0;
  /* previous match */

  this.match_available = 0;
  /* set if previous match exists */

  this.strstart = 0;
  /* start of string to insert */

  this.match_start = 0;
  /* start of matching string */

  this.lookahead = 0;
  /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;

  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;
  /* compression level (1..9) */

  this.strategy = 0;
  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0;
  /* Stop searching when current match exceeds this */

  /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */
  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective

  this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);
  this.l_desc = null;
  /* desc. for literal tree */

  this.d_desc = null;
  /* desc. for distance tree */

  this.bl_desc = null;
  /* desc. for bit length tree */
  //ush bl_count[MAX_BITS+1];

  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */
  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */

  this.heap = new utils.Buf16(2 * L_CODES + 1);
  /* heap used to build the Huffman trees */

  zero(this.heap);
  this.heap_len = 0;
  /* number of elements in the heap */

  this.heap_max = 0;
  /* element of largest frequency */

  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];

  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;
  /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;
  /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;
  /* bit length of current block with optimal trees */

  this.static_len = 0;
  /* bit length of current block with static trees */

  this.matches = 0;
  /* number of string matches in current block */

  this.insert = 0;
  /* bytes at end of window left to insert */

  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */

  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */
  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;

  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}

function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;
  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }

  s.status = s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
  : 1; // adler32(0, Z_NULL, 0)

  s.last_flush = Z_NO_FLUSH;

  trees._tr_init(s);

  return Z_OK;
}

function deflateReset(strm) {
  var ret = deflateResetKeep(strm);

  if (ret === Z_OK) {
    lm_init(strm.state);
  }

  return ret;
}

function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }

  if (strm.state.wrap !== 2) {
    return Z_STREAM_ERROR;
  }

  strm.state.gzhead = head;
  return Z_OK;
}

function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) {
    // === Z_NULL
    return Z_STREAM_ERROR;
  }

  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) {
    /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2;
    /* write gzip wrapper instead */

    windowBits -= 16;
  }

  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }

  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */


  var s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size); // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << memLevel + 6;
  /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4; //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;

  s.pending_buf = new utils.Buf8(s.pending_buf_size); // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  s.d_buf = 1 * s.lit_bufsize; //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

  s.l_buf = (1 + 2) * s.lit_bufsize;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}

function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm;
  /* just in case */

  old_flush = s.last_flush;
  s.last_flush = flush;
  /* Write the header */

  if (s.status === INIT_STATE) {
    if (s.wrap === 2) {
      // GZIP header
      strm.adler = 0; //crc32(0L, Z_NULL, 0);

      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);

      if (!s.gzhead) {
        // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      } else {
        put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, s.gzhead.time >> 8 & 0xff);
        put_byte(s, s.gzhead.time >> 16 & 0xff);
        put_byte(s, s.gzhead.time >> 24 & 0xff);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, s.gzhead.os & 0xff);

        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
        }

        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }

        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    } else // DEFLATE header
      {
        var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
        var level_flags = -1;

        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }

        header |= level_flags << 6;

        if (s.strstart !== 0) {
          header |= PRESET_DICT;
        }

        header += 31 - header % 31;
        s.status = BUSY_STATE;
        putShortMSB(s, header);
        /* Save the adler32 of the preset dictionary: */

        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }

        strm.adler = 1; // adler32(0L, Z_NULL, 0);
      }
  } //#ifdef GZIP


  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra
    /* != Z_NULL*/
    ) {
        beg = s.pending;
        /* start of bytes to update crc */

        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }

            flush_pending(strm);
            beg = s.pending;

            if (s.pending === s.pending_buf_size) {
              break;
            }
          }

          put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
          s.gzindex++;
        }

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }

        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      } else {
      s.status = NAME_STATE;
    }
  }

  if (s.status === NAME_STATE) {
    if (s.gzhead.name
    /* != Z_NULL*/
    ) {
        beg = s.pending;
        /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }

            flush_pending(strm);
            beg = s.pending;

            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          } // JS specific: little magic to add zero terminator to end of string


          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }

          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }

        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      } else {
      s.status = COMMENT_STATE;
    }
  }

  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment
    /* != Z_NULL*/
    ) {
        beg = s.pending;
        /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }

            flush_pending(strm);
            beg = s.pending;

            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          } // JS specific: little magic to add zero terminator to end of string


          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }

          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }

        if (val === 0) {
          s.status = HCRC_STATE;
        }
      } else {
      s.status = HCRC_STATE;
    }
  }

  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }

      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, strm.adler >> 8 & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);

        s.status = BUSY_STATE;
      }
    } else {
      s.status = BUSY_STATE;
    }
  } //#endif

  /* Flush as much pending output as possible */


  if (s.pending !== 0) {
    flush_pending(strm);

    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }
    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */

  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }
  /* User must not provide more input after the first FINISH: */


  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }
  /* Start a new block or continue the current one.
   */


  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
    var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }

    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }

      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }

    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      } else if (flush !== Z_BLOCK) {
        /* FULL_FLUSH or SYNC_FLUSH */
        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */


        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/

          /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }

      flush_pending(strm);

      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR at next call, see above */

        return Z_OK;
      }
    }
  } //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}


  if (flush !== Z_FINISH) {
    return Z_OK;
  }

  if (s.wrap <= 0) {
    return Z_STREAM_END;
  }
  /* Write the trailer */


  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, strm.adler >> 8 & 0xff);
    put_byte(s, strm.adler >> 16 & 0xff);
    put_byte(s, strm.adler >> 24 & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, strm.total_in >> 8 & 0xff);
    put_byte(s, strm.total_in >> 16 & 0xff);
    put_byte(s, strm.total_in >> 24 & 0xff);
  } else {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */

  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  /* write the trailer only once! */


  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm
  /*== Z_NULL*/
  || !strm.state
  /*== Z_NULL*/
  ) {
      return Z_STREAM_ERROR;
    }

  status = strm.state.status;

  if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}
/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */


function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm
  /*== Z_NULL*/
  || !strm.state
  /*== Z_NULL*/
  ) {
      return Z_STREAM_ERROR;
    }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
    return Z_STREAM_ERROR;
  }
  /* when using zlib wrappers, compute Adler-32 for provided dictionary */


  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;
  /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */

  if (dictLength >= s.w_size) {
    if (wrap === 0) {
      /* already empty otherwise */

      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);

      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);


    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */


  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);

  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);

    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
      s.prev[str & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = str;
      str++;
    } while (--n);

    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }

  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}

exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';
/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

/***/ }),

/***/ "../node_modules/pako/lib/zlib/inffast.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// See state defs from inflate.js

var BAD = 30;
/* got a data error -- remain here until reset */

var TYPE = 12;
/* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */

module.exports = function inflate_fast(strm, start) {
  var state;

  var _in;
  /* local strm.input */


  var last;
  /* have enough input while in < last */

  var _out;
  /* local strm.output */


  var beg;
  /* inflate()'s initial strm.output */

  var end;
  /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT

  var dmax;
  /* maximum distance from zlib header */
  //#endif

  var wsize;
  /* window size or zero if not using window */

  var whave;
  /* valid bytes in the window */

  var wnext;
  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools

  var s_window;
  /* allocated sliding window, if wsize != 0 */

  var hold;
  /* local strm.hold */

  var bits;
  /* local strm.bits */

  var lcode;
  /* local strm.lencode */

  var dcode;
  /* local strm.distcode */

  var lmask;
  /* mask for first level of length codes */

  var dmask;
  /* mask for first level of distance codes */

  var here;
  /* retrieved table entry */

  var op;
  /* code bits, operation, extra bits, or */

  /*  window position, window bytes to copy */

  var len;
  /* match length, unused bytes */

  var dist;
  /* match distance */

  var from;
  /* where to copy match from */

  var from_source;
  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */

  state = strm.state; //here = state.here;

  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT

  dmax = state.dmax; //#endif

  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;
  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top: do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen: for (;;) {
      // Goto emulation
      op = here >>> 24
      /*here.bits*/
      ;
      hold >>>= op;
      bits -= op;
      op = here >>> 16 & 0xff
      /*here.op*/
      ;

      if (op === 0) {
        /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff
        /*here.val*/
        ;
      } else if (op & 16) {
        /* length base */
        len = here & 0xffff
        /*here.val*/
        ;
        op &= 15;
        /* number of extra bits */

        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }

          len += hold & (1 << op) - 1;
          hold >>>= op;
          bits -= op;
        } //Tracevv((stderr, "inflate:         length %u\n", len));


        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }

        here = dcode[hold & dmask];

        dodist: for (;;) {
          // goto emulation
          op = here >>> 24
          /*here.bits*/
          ;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 0xff
          /*here.op*/
          ;

          if (op & 16) {
            /* distance base */
            dist = here & 0xffff
            /*here.val*/
            ;
            op &= 15;
            /* number of extra bits */

            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;

              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }

            dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT

            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            } //#endif


            hold >>>= op;
            bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));

            op = _out - beg;
            /* max distance in output */

            if (dist > op) {
              /* see if copy from window */
              op = dist - op;
              /* distance back in window */

              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                } // (!) This block is disabled in zlib defaults,
                // don't enable it for binary compatibility
                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                //                if (len <= op - whave) {
                //                  do {
                //                    output[_out++] = 0;
                //                  } while (--len);
                //                  continue top;
                //                }
                //                len -= op - whave;
                //                do {
                //                  output[_out++] = 0;
                //                } while (--op > whave);
                //                if (op === 0) {
                //                  from = _out - dist;
                //                  do {
                //                    output[_out++] = output[from++];
                //                  } while (--len);
                //                  continue top;
                //                }
                //#endif

              }

              from = 0; // window index

              from_source = s_window;

              if (wnext === 0) {
                /* very common case */
                from += wsize - op;

                if (op < len) {
                  /* some from window */
                  len -= op;

                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);

                  from = _out - dist;
                  /* rest from output */

                  from_source = output;
                }
              } else if (wnext < op) {
                /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;

                if (op < len) {
                  /* some from end of window */
                  len -= op;

                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);

                  from = 0;

                  if (wnext < len) {
                    /* some from start of window */
                    op = wnext;
                    len -= op;

                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);

                    from = _out - dist;
                    /* rest from output */

                    from_source = output;
                  }
                }
              } else {
                /* contiguous in window */
                from += wnext - op;

                if (op < len) {
                  /* some from window */
                  len -= op;

                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);

                  from = _out - dist;
                  /* rest from output */

                  from_source = output;
                }
              }

              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }

              if (len) {
                output[_out++] = from_source[from++];

                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            } else {
              from = _out - dist;
              /* copy direct from output */

              do {
                /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);

              if (len) {
                output[_out++] = output[from++];

                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          } else if ((op & 64) === 0) {
            /* 2nd level distance code */
            here = dcode[(here & 0xffff) + (
            /*here.val*/
            hold & (1 << op) - 1)];
            continue dodist;
          } else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      } else if ((op & 64) === 0) {
        /* 2nd level length code */
        here = lcode[(here & 0xffff) + (
        /*here.val*/
        hold & (1 << op) - 1)];
        continue dolen;
      } else if (op & 32) {
        /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      } else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);
  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */


  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  /* update state and return */

  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
};

/***/ }),

/***/ "../node_modules/pako/lib/zlib/inflate.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__("../node_modules/pako/lib/utils/common.js");

var adler32 = __webpack_require__("../node_modules/pako/lib/zlib/adler32.js");

var crc32 = __webpack_require__("../node_modules/pako/lib/zlib/crc32.js");

var inflate_fast = __webpack_require__("../node_modules/pako/lib/zlib/inffast.js");

var inflate_table = __webpack_require__("../node_modules/pako/lib/zlib/inftrees.js");

var CODES = 0;
var LENS = 1;
var DISTS = 2;
/* Public constants ==========================================================*/

/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;

var Z_FINISH = 4;
var Z_BLOCK = 5;
var Z_TREES = 6;
/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */

var Z_OK = 0;
var Z_STREAM_END = 1;
var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;

var Z_STREAM_ERROR = -2;
var Z_DATA_ERROR = -3;
var Z_MEM_ERROR = -4;
var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

/* The deflate compression method */

var Z_DEFLATED = 8;
/* STATES ====================================================================*/

/* ===========================================================================*/

var HEAD = 1;
/* i: waiting for magic header */

var FLAGS = 2;
/* i: waiting for method and flags (gzip) */

var TIME = 3;
/* i: waiting for modification time (gzip) */

var OS = 4;
/* i: waiting for extra flags and operating system (gzip) */

var EXLEN = 5;
/* i: waiting for extra length (gzip) */

var EXTRA = 6;
/* i: waiting for extra bytes (gzip) */

var NAME = 7;
/* i: waiting for end of file name (gzip) */

var COMMENT = 8;
/* i: waiting for end of comment (gzip) */

var HCRC = 9;
/* i: waiting for header crc (gzip) */

var DICTID = 10;
/* i: waiting for dictionary check value */

var DICT = 11;
/* waiting for inflateSetDictionary() call */

var TYPE = 12;
/* i: waiting for type bits, including last-flag bit */

var TYPEDO = 13;
/* i: same, but skip check to exit inflate on new block */

var STORED = 14;
/* i: waiting for stored size (length and complement) */

var COPY_ = 15;
/* i/o: same as COPY below, but only first time in */

var COPY = 16;
/* i/o: waiting for input or output to copy stored block */

var TABLE = 17;
/* i: waiting for dynamic block table lengths */

var LENLENS = 18;
/* i: waiting for code length code lengths */

var CODELENS = 19;
/* i: waiting for length/lit and distance code lengths */

var LEN_ = 20;
/* i: same as LEN below, but only first time in */

var LEN = 21;
/* i: waiting for length/lit/eob code */

var LENEXT = 22;
/* i: waiting for length extra bits */

var DIST = 23;
/* i: waiting for distance code */

var DISTEXT = 24;
/* i: waiting for distance extra bits */

var MATCH = 25;
/* o: waiting for output space to copy string */

var LIT = 26;
/* o: waiting for output space to write literal */

var CHECK = 27;
/* i: waiting for 32-bit check value */

var LENGTH = 28;
/* i: waiting for 32-bit length (gzip) */

var DONE = 29;
/* finished check, done -- remain here until reset */

var BAD = 30;
/* got a data error -- remain here until reset */

var MEM = 31;
/* got an inflate() memory error -- remain here until reset */

var SYNC = 32;
/* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/

var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */

var DEF_WBITS = MAX_WBITS;

function zswap32(q) {
  return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
}

function InflateState() {
  this.mode = 0;
  /* current inflate mode */

  this.last = false;
  /* true if processing last block */

  this.wrap = 0;
  /* bit 0 true for zlib, bit 1 true for gzip */

  this.havedict = false;
  /* true if dictionary provided */

  this.flags = 0;
  /* gzip header method and flags (0 if zlib) */

  this.dmax = 0;
  /* zlib header max distance (INFLATE_STRICT) */

  this.check = 0;
  /* protected copy of check value */

  this.total = 0;
  /* protected copy of output count */
  // TODO: may be {}

  this.head = null;
  /* where to save gzip header information */

  /* sliding window */

  this.wbits = 0;
  /* log base 2 of requested window size */

  this.wsize = 0;
  /* window size or zero if not using window */

  this.whave = 0;
  /* valid bytes in the window */

  this.wnext = 0;
  /* window write index */

  this.window = null;
  /* allocated sliding window, if needed */

  /* bit accumulator */

  this.hold = 0;
  /* input bit accumulator */

  this.bits = 0;
  /* number of bits in "in" */

  /* for string and stored block copying */

  this.length = 0;
  /* literal or length of data to copy */

  this.offset = 0;
  /* distance back to copy string from */

  /* for table and code decoding */

  this.extra = 0;
  /* extra bits needed */

  /* fixed and dynamic code tables */

  this.lencode = null;
  /* starting table for length/literal codes */

  this.distcode = null;
  /* starting table for distance codes */

  this.lenbits = 0;
  /* index bits for lencode */

  this.distbits = 0;
  /* index bits for distcode */

  /* dynamic table building */

  this.ncode = 0;
  /* number of code length code lengths */

  this.nlen = 0;
  /* number of length code lengths */

  this.ndist = 0;
  /* number of distance code lengths */

  this.have = 0;
  /* number of code lengths in lens[] */

  this.next = null;
  /* next available space in codes[] */

  this.lens = new utils.Buf16(320);
  /* temporary storage for code lengths */

  this.work = new utils.Buf16(288);
  /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */

  this.lendyn = null;
  /* dynamic table for length/literal codes (JS specific) */

  this.distdyn = null;
  /* dynamic table for distance codes (JS specific) */

  this.sane = 0;
  /* if false, allow invalid distance too far */

  this.back = 0;
  /* bits back of last unprocessed length/lit */

  this.was = 0;
  /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = '';
  /*Z_NULL*/

  if (state.wrap) {
    /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }

  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null
  /*Z_NULL*/
  ;
  state.hold = 0;
  state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;

  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
  state.sane = 1;
  state.back = -1; //Tracev((stderr, "inflate: reset\n"));

  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;
  /* get the state */

  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  /* extract wrap request from windowBits parameter */

  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 1;

    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  /* set number of window bits, free window if different */


  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }

  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }
  /* update state and reset the rest of it */


  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) {
    return Z_STREAM_ERROR;
  } //strm.msg = Z_NULL;                 /* in case we return an error */


  state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));

  strm.state = state;
  state.window = null
  /*Z_NULL*/
  ;
  ret = inflateReset2(strm, windowBits);

  if (ret !== Z_OK) {
    strm.state = null
    /*Z_NULL*/
    ;
  }

  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}
/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */


var virgin = true;
var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;
    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);
    /* literal/length table */

    sym = 0;

    while (sym < 144) {
      state.lens[sym++] = 8;
    }

    while (sym < 256) {
      state.lens[sym++] = 9;
    }

    while (sym < 280) {
      state.lens[sym++] = 7;
    }

    while (sym < 288) {
      state.lens[sym++] = 8;
    }

    inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
      bits: 9
    });
    /* distance table */

    sym = 0;

    while (sym < 32) {
      state.lens[sym++] = 5;
    }

    inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
      bits: 5
    });
    /* do this just once */

    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}
/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */


function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;
  /* if it hasn't been done already, allocate space for the window */

  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new utils.Buf8(state.wsize);
  }
  /* copy state->wsize or less output bytes into the circular window */


  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;

    if (dist > copy) {
      dist = copy;
    } //zmemcpy(state->window + state->wnext, end - copy, dist);


    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;

    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;

      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }

      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }

  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output; // input/output buffers

  var next;
  /* next input INDEX */

  var put;
  /* next output INDEX */

  var have, left;
  /* available input and output */

  var hold;
  /* bit buffer */

  var bits;
  /* bits in bit buffer */

  var _in, _out;
  /* save starting available input and output */


  var copy;
  /* number of stored or match bytes to copy */

  var from;
  /* where to copy match bytes from */

  var from_source;
  var here = 0;
  /* current decoding table entry */

  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */

  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)

  var len;
  /* length to copy for repeats, bits to drop */

  var ret;
  /* return code */

  var hbuf = new utils.Buf8(4);
  /* buffer for gzip header crc calculation */

  var opts;
  var n; // temporary var for NEED_BITS

  var order =
  /* permutation of code lengths */
  [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;

  if (state.mode === TYPE) {
    state.mode = TYPEDO;
  }
  /* skip check */
  //--- LOAD() ---


  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits; //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        } //=== NEEDBITS(16);


        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8;
        } //===//


        if (state.wrap & 2 && hold === 0x8b1f) {
          /* gzip header */
          state.check = 0
          /*crc32(0L, Z_NULL, 0)*/
          ; //=== CRC2(state.check, hold);

          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0); //===//
          //=== INITBITS();

          hold = 0;
          bits = 0; //===//

          state.mode = FLAGS;
          break;
        }

        state.flags = 0;
        /* expect zlib header */

        if (state.head) {
          state.head.done = false;
        }

        if (!(state.wrap & 1) ||
        /* check if zlib header allowed */
        (((hold & 0xff) <<
        /*BITS(8)*/
        8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }

        if ((hold & 0x0f) !==
        /*BITS(4)*/
        Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        } //--- DROPBITS(4) ---//


        hold >>>= 4;
        bits -= 4; //---//

        len = (hold & 0x0f) +
        /*BITS(4)*/
        8;

        if (state.wbits === 0) {
          state.wbits = len;
        } else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }

        state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));

        strm.adler = state.check = 1
        /*adler32(0L, Z_NULL, 0)*/
        ;
        state.mode = hold & 0x200 ? DICTID : TYPE; //=== INITBITS();

        hold = 0;
        bits = 0; //===//

        break;

      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8;
        } //===//


        state.flags = hold;

        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }

        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }

        if (state.head) {
          state.head.text = hold >> 8 & 1;
        }

        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0); //===//
        } //=== INITBITS();


        hold = 0;
        bits = 0; //===//

        state.mode = TIME;

      /* falls through */

      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8;
        } //===//


        if (state.head) {
          state.head.time = hold;
        }

        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          hbuf[2] = hold >>> 16 & 0xff;
          hbuf[3] = hold >>> 24 & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0); //===
        } //=== INITBITS();


        hold = 0;
        bits = 0; //===//

        state.mode = OS;

      /* falls through */

      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8;
        } //===//


        if (state.head) {
          state.head.xflags = hold & 0xff;
          state.head.os = hold >> 8;
        }

        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0); //===//
        } //=== INITBITS();


        hold = 0;
        bits = 0; //===//

        state.mode = EXLEN;

      /* falls through */

      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          state.length = hold;

          if (state.head) {
            state.head.extra_len = hold;
          }

          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = hold >>> 8 & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0); //===//
          } //=== INITBITS();


          hold = 0;
          bits = 0; //===//
        } else if (state.head) {
          state.head.extra = null
          /*Z_NULL*/
          ;
        }

        state.mode = EXTRA;

      /* falls through */

      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;

          if (copy > have) {
            copy = have;
          }

          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;

              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }

              utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len); //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }

            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }

            have -= copy;
            next += copy;
            state.length -= copy;
          }

          if (state.length) {
            break inf_leave;
          }
        }

        state.length = 0;
        state.mode = NAME;

      /* falls through */

      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) {
            break inf_leave;
          }

          copy = 0;

          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */

            if (state.head && len && state.length < 65536
            /*state.head.name_max*/
            ) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }

          have -= copy;
          next += copy;

          if (len) {
            break inf_leave;
          }
        } else if (state.head) {
          state.head.name = null;
        }

        state.length = 0;
        state.mode = COMMENT;

      /* falls through */

      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) {
            break inf_leave;
          }

          copy = 0;

          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */

            if (state.head && len && state.length < 65536
            /*state.head.comm_max*/
            ) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }

          have -= copy;
          next += copy;

          if (len) {
            break inf_leave;
          }
        } else if (state.head) {
          state.head.comment = null;
        }

        state.mode = HCRC;

      /* falls through */

      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          } //=== INITBITS();


          hold = 0;
          bits = 0; //===//
        }

        if (state.head) {
          state.head.hcrc = state.flags >> 9 & 1;
          state.head.done = true;
        }

        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;

      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8;
        } //===//


        strm.adler = state.check = zswap32(hold); //=== INITBITS();

        hold = 0;
        bits = 0; //===//

        state.mode = DICT;

      /* falls through */

      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits; //---

          return Z_NEED_DICT;
        }

        strm.adler = state.check = 1
        /*adler32(0L, Z_NULL, 0)*/
        ;
        state.mode = TYPE;

      /* falls through */

      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) {
          break inf_leave;
        }

      /* falls through */

      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7; //---//

          state.mode = CHECK;
          break;
        } //=== NEEDBITS(3); */


        while (bits < 3) {
          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8;
        } //===//


        state.last = hold & 0x01
        /*BITS(1)*/
        ; //--- DROPBITS(1) ---//

        hold >>>= 1;
        bits -= 1; //---//

        switch (hold & 0x03) {
          /*BITS(2)*/
          case 0:
            /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;

          case 1:
            /* fixed block */
            fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));

            state.mode = LEN_;
            /* decode codes */

            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2; //---//

              break inf_leave;
            }

            break;

          case 2:
            /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;

          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        } //--- DROPBITS(2) ---//


        hold >>>= 2;
        bits -= 2; //---//

        break;

      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7; //---//
        //=== NEEDBITS(32); */

        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8;
        } //===//


        if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }

        state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();

        hold = 0;
        bits = 0; //===//

        state.mode = COPY_;

        if (flush === Z_TREES) {
          break inf_leave;
        }

      /* falls through */

      case COPY_:
        state.mode = COPY;

      /* falls through */

      case COPY:
        copy = state.length;

        if (copy) {
          if (copy > have) {
            copy = have;
          }

          if (copy > left) {
            copy = left;
          }

          if (copy === 0) {
            break inf_leave;
          } //--- zmemcpy(put, next, copy); ---


          utils.arraySet(output, input, next, copy, put); //---//

          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        } //Tracev((stderr, "inflate:       stored end\n"));


        state.mode = TYPE;
        break;

      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8;
        } //===//


        state.nlen = (hold & 0x1f) +
        /*BITS(5)*/
        257; //--- DROPBITS(5) ---//

        hold >>>= 5;
        bits -= 5; //---//

        state.ndist = (hold & 0x1f) +
        /*BITS(5)*/
        1; //--- DROPBITS(5) ---//

        hold >>>= 5;
        bits -= 5; //---//

        state.ncode = (hold & 0x0f) +
        /*BITS(4)*/
        4; //--- DROPBITS(4) ---//

        hold >>>= 4;
        bits -= 4; //---//
        //#ifndef PKZIP_BUG_WORKAROUND

        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        } //#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));


        state.have = 0;
        state.mode = LENLENS;

      /* falls through */

      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
          //--- DROPBITS(3) ---//

          hold >>>= 3;
          bits -= 3; //---//
        }

        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        } // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table


        state.lencode = state.lendyn;
        state.lenbits = 7;
        opts = {
          bits: state.lenbits
        };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        } //Tracev((stderr, "inflate:       code lengths ok\n"));


        state.have = 0;
        state.mode = CODELENS;

      /* falls through */

      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & (1 << state.lenbits) - 1];
            /*BITS(state.lenbits)*/

            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) {
              break;
            } //--- PULLBYTE() ---//


            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8; //---//
          }

          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits; //---//

            state.lens[state.have++] = here_val;
          } else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;

              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//
              //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }

              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03); //BITS(2);
              //--- DROPBITS(2) ---//

              hold >>>= 2;
              bits -= 2; //---//
            } else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;

              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//
              //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              len = 0;
              copy = 3 + (hold & 0x07); //BITS(3);
              //--- DROPBITS(3) ---//

              hold >>>= 3;
              bits -= 3; //---//
            } else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;

              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//
              //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              len = 0;
              copy = 11 + (hold & 0x7f); //BITS(7);
              //--- DROPBITS(7) ---//

              hold >>>= 7;
              bits -= 7; //---//
            }

            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }

            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }
        /* handle error breaks in while */


        if (state.mode === BAD) {
          break;
        }
        /* check for end-of-block code (better have one) */


        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }
        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */


        state.lenbits = 9;
        opts = {
          bits: state.lenbits
        };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;

        state.lenbits = opts.bits; // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6; //state.distcode.copy(state.codes);
        // Switch to use dynamic table

        state.distcode = state.distdyn;
        opts = {
          bits: state.distbits
        };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;

        state.distbits = opts.bits; // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        } //Tracev((stderr, 'inflate:       codes ok\n'));


        state.mode = LEN_;

        if (flush === Z_TREES) {
          break inf_leave;
        }

      /* falls through */

      case LEN_:
        state.mode = LEN;

      /* falls through */

      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits; //---

          inflate_fast(strm, _out); //--- LOAD() ---

          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits; //---

          if (state.mode === TYPE) {
            state.back = -1;
          }

          break;
        }

        state.back = 0;

        for (;;) {
          here = state.lencode[hold & (1 << state.lenbits) - 1];
          /*BITS(state.lenbits)*/

          here_bits = here >>> 24;
          here_op = here >>> 16 & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) {
            break;
          } //--- PULLBYTE() ---//


          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8; //---//
        }

        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;

          for (;;) {
            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
            /*BITS(last.bits + last.op)*/
            last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (last_bits + here_bits <= bits) {
              break;
            } //--- PULLBYTE() ---//


            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8; //---//
          } //--- DROPBITS(last.bits) ---//


          hold >>>= last_bits;
          bits -= last_bits; //---//

          state.back += last_bits;
        } //--- DROPBITS(here.bits) ---//


        hold >>>= here_bits;
        bits -= here_bits; //---//

        state.back += here_bits;
        state.length = here_val;

        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }

        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }

        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }

        state.extra = here_op & 15;
        state.mode = LENEXT;

      /* falls through */

      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;

          while (bits < n) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          state.length += hold & (1 << state.extra) - 1
          /*BITS(state.extra)*/
          ; //--- DROPBITS(state.extra) ---//

          hold >>>= state.extra;
          bits -= state.extra; //---//

          state.back += state.extra;
        } //Tracevv((stderr, "inflate:         length %u\n", state.length));


        state.was = state.length;
        state.mode = DIST;

      /* falls through */

      case DIST:
        for (;;) {
          here = state.distcode[hold & (1 << state.distbits) - 1];
          /*BITS(state.distbits)*/

          here_bits = here >>> 24;
          here_op = here >>> 16 & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) {
            break;
          } //--- PULLBYTE() ---//


          if (have === 0) {
            break inf_leave;
          }

          have--;
          hold += input[next++] << bits;
          bits += 8; //---//
        }

        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;

          for (;;) {
            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
            /*BITS(last.bits + last.op)*/
            last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (last_bits + here_bits <= bits) {
              break;
            } //--- PULLBYTE() ---//


            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8; //---//
          } //--- DROPBITS(last.bits) ---//


          hold >>>= last_bits;
          bits -= last_bits; //---//

          state.back += last_bits;
        } //--- DROPBITS(here.bits) ---//


        hold >>>= here_bits;
        bits -= here_bits; //---//

        state.back += here_bits;

        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }

        state.offset = here_val;
        state.extra = here_op & 15;
        state.mode = DISTEXT;

      /* falls through */

      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;

          while (bits < n) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          state.offset += hold & (1 << state.extra) - 1
          /*BITS(state.extra)*/
          ; //--- DROPBITS(state.extra) ---//

          hold >>>= state.extra;
          bits -= state.extra; //---//

          state.back += state.extra;
        } //#ifdef INFLATE_STRICT


        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        } //#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));


        state.mode = MATCH;

      /* falls through */

      case MATCH:
        if (left === 0) {
          break inf_leave;
        }

        copy = _out - left;

        if (state.offset > copy) {
          /* copy from window */
          copy = state.offset - copy;

          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            } // (!) This block is disabled in zlib defaults,
            // don't enable it for binary compatibility
            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
            //          Trace((stderr, "inflate.c too far\n"));
            //          copy -= state.whave;
            //          if (copy > state.length) { copy = state.length; }
            //          if (copy > left) { copy = left; }
            //          left -= copy;
            //          state.length -= copy;
            //          do {
            //            output[put++] = 0;
            //          } while (--copy);
            //          if (state.length === 0) { state.mode = LEN; }
            //          break;
            //#endif

          }

          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          } else {
            from = state.wnext - copy;
          }

          if (copy > state.length) {
            copy = state.length;
          }

          from_source = state.window;
        } else {
          /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }

        if (copy > left) {
          copy = left;
        }

        left -= copy;
        state.length -= copy;

        do {
          output[put++] = from_source[from++];
        } while (--copy);

        if (state.length === 0) {
          state.mode = LEN;
        }

        break;

      case LIT:
        if (left === 0) {
          break inf_leave;
        }

        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;

      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }

            have--; // Use '|' instead of '+' to make sure that result is signed

            hold |= input[next++] << bits;
            bits += 8;
          } //===//


          _out -= left;
          strm.total_out += _out;
          state.total += _out;

          if (_out) {
            strm.adler = state.check =
            /*UPDATE(state.check, put - _out, _out);*/
            state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
          }

          _out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too

          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          } //=== INITBITS();


          hold = 0;
          bits = 0; //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }

        state.mode = LENGTH;

      /* falls through */

      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          } //=== INITBITS();


          hold = 0;
          bits = 0; //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }

        state.mode = DONE;

      /* falls through */

      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;

      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;

      case MEM:
        return Z_MEM_ERROR;

      case SYNC:
      /* falls through */

      default:
        return Z_STREAM_ERROR;
    }
  } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */
  //--- RESTORE() ---


  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits; //---

  if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }

  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;

  if (state.wrap && _out) {
    strm.adler = state.check =
    /*UPDATE(state.check, strm.next_out - _out, _out);*/
    state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
  }

  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);

  if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }

  return ret;
}

function inflateEnd(strm) {
  if (!strm || !strm.state
  /*|| strm->zfree == (free_func)0*/
  ) {
      return Z_STREAM_ERROR;
    }

  var state = strm.state;

  if (state.window) {
    state.window = null;
  }

  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;
  /* check state */

  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;

  if ((state.wrap & 2) === 0) {
    return Z_STREAM_ERROR;
  }
  /* save header structure */


  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var state;
  var dictid;
  var ret;
  /* check state */

  if (!strm
  /* == Z_NULL */
  || !strm.state
  /* == Z_NULL */
  ) {
      return Z_STREAM_ERROR;
    }

  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }
  /* check for correct dictionary identifier */


  if (state.mode === DICT) {
    dictid = 1;
    /* adler32(0, null, 0)*/

    /* dictid = adler32(dictid, dictionary, dictLength); */

    dictid = adler32(dictid, dictionary, dictLength, 0);

    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */


  ret = updatewindow(strm, dictionary, dictLength, dictLength);

  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }

  state.havedict = 1; // Tracev((stderr, "inflate:   dictionary set\n"));

  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';
/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

/***/ }),

/***/ "../node_modules/pako/lib/zlib/inftrees.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__("../node_modules/pako/lib/utils/common.js");

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;
var lbase = [
/* Length codes 257..285 base */
3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
var lext = [
/* Length codes 257..285 extra */
16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
var dbase = [
/* Distance codes 0..29 base */
1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
var dext = [
/* Distance codes 0..29 extra */
16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
  var bits = opts.bits; //here = opts.here; /* table entry for duplication */

  var len = 0;
  /* a code's length in bits */

  var sym = 0;
  /* index of code symbols */

  var min = 0,
      max = 0;
  /* minimum and maximum code lengths */

  var root = 0;
  /* number of index bits for root table */

  var curr = 0;
  /* number of index bits for current table */

  var drop = 0;
  /* code bits to drop for sub-table */

  var left = 0;
  /* number of prefix codes available */

  var used = 0;
  /* code entries in table used */

  var huff = 0;
  /* Huffman code */

  var incr;
  /* for incrementing code, index */

  var fill;
  /* index for replicating entries */

  var low;
  /* low bits for current root entry */

  var mask;
  /* mask for low root bits */

  var next;
  /* next available space in table */

  var base = null;
  /* base value table to use */

  var base_index = 0; //  var shoextra;    /* extra bits table to use */

  var end;
  /* use base and extra for symbol > end */

  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */

  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */

  var extra = null;
  var extra_index = 0;
  var here_bits, here_op, here_val;
  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.
    This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.
    The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.
    The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */

  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }

  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }
  /* bound code lengths, force root to be within code lengths */


  root = bits;

  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }

  if (root > max) {
    root = max;
  }

  if (max === 0) {
    /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;

    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    opts.bits = 1;
    return 0;
    /* no symbols, but wait for decoding to report error */
  }

  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }

  if (root < min) {
    root = min;
  }
  /* check for an over-subscribed or incomplete set of lengths */


  left = 1;

  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];

    if (left < 0) {
      return -1;
    }
    /* over-subscribed */

  }

  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;
    /* incomplete set */
  }
  /* generate offsets into symbol table for each length for sorting */


  offs[1] = 0;

  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  /* sort symbols by length, by symbol order within each length */


  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.
    root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.
    When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.
    used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.
    sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8


  if (type === CODES) {
    base = extra = work;
    /* dummy value--not used */

    end = 19;
  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;
  } else {
    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }
  /* initialize opts for loop */


  huff = 0;
  /* starting code */

  sym = 0;
  /* starting code symbol */

  len = min;
  /* starting code length */

  next = table_index;
  /* current table to fill in */

  curr = root;
  /* current table index bits */

  drop = 0;
  /* current bits to drop from code for index */

  low = -1;
  /* trigger new sub-table when len > root */

  used = 1 << root;
  /* use root table entries */

  mask = used - 1;
  /* mask for comparing low */

  /* check available table space */

  if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
    return 1;
  }
  /* process all codes and make table entries */


  for (;;) {
    /* create table entry */
    here_bits = len - drop;

    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    } else {
      here_op = 32 + 64;
      /* end of block */

      here_val = 0;
    }
    /* replicate for those indices with low len bits equal to huff */


    incr = 1 << len - drop;
    fill = 1 << curr;
    min = fill;
    /* save offset to next table */

    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);
    /* backwards increment the len-bit code huff */


    incr = 1 << len - 1;

    while (huff & incr) {
      incr >>= 1;
    }

    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    /* go to next symbol, update count, len */


    sym++;

    if (--count[len] === 0) {
      if (len === max) {
        break;
      }

      len = lens[lens_index + work[sym]];
    }
    /* create new sub-table if needed */


    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }
      /* increment past last table */


      next += min;
      /* here min is 1 << curr */

      /* determine length of next table */

      curr = len - drop;
      left = 1 << curr;

      while (curr + drop < max) {
        left -= count[curr + drop];

        if (left <= 0) {
          break;
        }

        curr++;
        left <<= 1;
      }
      /* check for enough space */


      used += 1 << curr;

      if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
        return 1;
      }
      /* point entry in root table to sub-table */


      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/

      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }
  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */


  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }
  /* set return parameters */
  //opts.table_index += used;


  opts.bits = root;
  return 0;
};

/***/ }),

/***/ "../node_modules/pako/lib/zlib/messages.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2: 'need dictionary',

  /* Z_NEED_DICT       2  */
  1: 'stream end',

  /* Z_STREAM_END      1  */
  0: '',

  /* Z_OK              0  */
  '-1': 'file error',

  /* Z_ERRNO         (-1) */
  '-2': 'stream error',

  /* Z_STREAM_ERROR  (-2) */
  '-3': 'data error',

  /* Z_DATA_ERROR    (-3) */
  '-4': 'insufficient memory',

  /* Z_MEM_ERROR     (-4) */
  '-5': 'buffer error',

  /* Z_BUF_ERROR     (-5) */
  '-6': 'incompatible version'
  /* Z_VERSION_ERROR (-6) */

};

/***/ }),

/***/ "../node_modules/pako/lib/zlib/trees.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = __webpack_require__("../node_modules/pako/lib/utils/common.js");
/* Public constants ==========================================================*/

/* ===========================================================================*/
//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;


var Z_FIXED = 4; //var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */

var Z_BINARY = 0;
var Z_TEXT = 1; //var Z_ASCII             = 1; // = Z_TEXT

var Z_UNKNOWN = 2;
/*============================================================================*/

function zero(buf) {
  var len = buf.length;

  while (--len >= 0) {
    buf[len] = 0;
  }
} // From zutil.h


var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES = 2;
/* The three kinds of block type */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
/* The minimum and maximum match lengths */
// From deflate.h

/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS = 256;
/* number of literal bytes 0..255 */

var L_CODES = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES = 30;
/* number of distance codes */

var BL_CODES = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size = 16;
/* size of bit buffer in bi_buf */

/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK = 256;
/* end of block literal code */

var REP_3_6 = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10 = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */

var extra_lbits =
/* extra bits for each length code */
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
var extra_dbits =
/* extra bits for each distance code */
[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
var extra_blbits =
/* extra bits for each bit length code */
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */
// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512;
/* see definition of array dist_code below */
// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1

var static_ltree = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code = new Array(DIST_CODE_LEN);

zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);

zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */

function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree = static_tree;
  /* static tree or NULL */

  this.extra_bits = extra_bits;
  /* extra bits for each code or NULL */

  this.extra_base = extra_base;
  /* base index for extra_bits */

  this.elems = elems;
  /* max number of elements in the tree */

  this.max_length = max_length;
  /* max bit length for the codes */
  // show if `static_tree` has data or dummy - needed for monomorphic objects

  this.has_stree = static_tree && static_tree.length;
}

var static_l_desc;
var static_d_desc;
var static_bl_desc;

function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;
  /* the dynamic tree */

  this.max_code = 0;
  /* largest code with non zero frequency */

  this.stat_desc = stat_desc;
  /* the corresponding static tree */
}

function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}
/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */


function put_short(s, w) {
  //    put_byte(s, (uch)((w) & 0xff));
  //    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = w & 0xff;
  s.pending_buf[s.pending++] = w >>> 8 & 0xff;
}
/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */


function send_bits(s, value, length) {
  if (s.bi_valid > Buf_size - length) {
    s.bi_buf |= value << s.bi_valid & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> Buf_size - s.bi_valid;
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= value << s.bi_valid & 0xffff;
    s.bi_valid += length;
  }
}

function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]
  /*.Code*/
  , tree[c * 2 + 1]
  /*.Len*/
  );
}
/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */


function bi_reverse(code, len) {
  var res = 0;

  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);

  return res >>> 1;
}
/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */


function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}
/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */


function gen_bitlen(s, desc) //    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree = desc.dyn_tree;
  var max_code = desc.max_code;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var extra = desc.stat_desc.extra_bits;
  var base = desc.stat_desc.extra_base;
  var max_length = desc.stat_desc.max_length;
  var h;
  /* heap index */

  var n, m;
  /* iterate over the tree elements */

  var bits;
  /* bit length */

  var xbits;
  /* extra bits */

  var f;
  /* frequency */

  var overflow = 0;
  /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }
  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */


  tree[s.heap[s.heap_max] * 2 + 1]
  /*.Len*/
  = 0;
  /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]
    /*.Dad*/
    * 2 + 1]
    /*.Len*/
    + 1;

    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }

    tree[n * 2 + 1]
    /*.Len*/
    = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) {
      continue;
    }
    /* not a leaf node */


    s.bl_count[bits]++;
    xbits = 0;

    if (n >= base) {
      xbits = extra[n - base];
    }

    f = tree[n * 2]
    /*.Freq*/
    ;
    s.opt_len += f * (bits + xbits);

    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]
      /*.Len*/
      + xbits);
    }
  }

  if (overflow === 0) {
    return;
  } // Trace((stderr,"\nbit length overflow\n"));

  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */


  do {
    bits = max_length - 1;

    while (s.bl_count[bits] === 0) {
      bits--;
    }

    s.bl_count[bits]--;
    /* move one leaf down the tree */

    s.bl_count[bits + 1] += 2;
    /* move one overflow item as its brother */

    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */

    overflow -= 2;
  } while (overflow > 0);
  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */


  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];

    while (n !== 0) {
      m = s.heap[--h];

      if (m > max_code) {
        continue;
      }

      if (tree[m * 2 + 1]
      /*.Len*/
      !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]
        /*.Len*/
        ) * tree[m * 2]
        /*.Freq*/
        ;
        tree[m * 2 + 1]
        /*.Len*/
        = bits;
      }

      n--;
    }
  }
}
/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */


function gen_codes(tree, max_code, bl_count) //    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1);
  /* next code value for each bit length */

  var code = 0;
  /* running code value */

  var bits;
  /* bit index */

  var n;
  /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */

  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = code + bl_count[bits - 1] << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));


  for (n = 0; n <= max_code; n++) {
    var len = tree[n * 2 + 1]
    /*.Len*/
    ;

    if (len === 0) {
      continue;
    }
    /* Now reverse the bits */


    tree[n * 2]
    /*.Code*/
    = bi_reverse(next_code[len]++, len); //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}
/* ===========================================================================
 * Initialize the various 'constant' tables.
 */


function tr_static_init() {
  var n;
  /* iterates over tree elements */

  var bits;
  /* bit counter */

  var length;
  /* length value */

  var code;
  /* code value */

  var dist;
  /* distance index */

  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */
  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */

  /*#ifdef NO_INIT_GLOBAL_POINTERS
    static_l_desc.static_tree = static_ltree;
    static_l_desc.extra_bits = extra_lbits;
    static_d_desc.static_tree = static_dtree;
    static_d_desc.extra_bits = extra_dbits;
    static_bl_desc.extra_bits = extra_blbits;
  #endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */

  length = 0;

  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;

    for (n = 0; n < 1 << extra_lbits[code]; n++) {
      _length_code[length++] = code;
    }
  } //Assert (length == 256, "tr_static_init: length != 256");

  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */


  _length_code[length - 1] = code;
  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */

  dist = 0;

  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;

    for (n = 0; n < 1 << extra_dbits[code]; n++) {
      _dist_code[dist++] = code;
    }
  } //Assert (dist == 256, "tr_static_init: dist != 256");


  dist >>= 7;
  /* from now on, all distances are divided by 128 */

  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;

    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
      _dist_code[256 + dist++] = code;
    }
  } //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */


  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;

  while (n <= 143) {
    static_ltree[n * 2 + 1]
    /*.Len*/
    = 8;
    n++;
    bl_count[8]++;
  }

  while (n <= 255) {
    static_ltree[n * 2 + 1]
    /*.Len*/
    = 9;
    n++;
    bl_count[9]++;
  }

  while (n <= 279) {
    static_ltree[n * 2 + 1]
    /*.Len*/
    = 7;
    n++;
    bl_count[7]++;
  }

  while (n <= 287) {
    static_ltree[n * 2 + 1]
    /*.Len*/
    = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */


  gen_codes(static_ltree, L_CODES + 1, bl_count);
  /* The static distance tree is trivial: */

  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]
    /*.Len*/
    = 5;
    static_dtree[n * 2]
    /*.Code*/
    = bi_reverse(n, 5);
  } // Now data ready and we can init static trees


  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS); //static_init_done = true;
}
/* ===========================================================================
 * Initialize a new block.
 */


function init_block(s) {
  var n;
  /* iterates over tree elements */

  /* Initialize the trees. */

  for (n = 0; n < L_CODES; n++) {
    s.dyn_ltree[n * 2]
    /*.Freq*/
    = 0;
  }

  for (n = 0; n < D_CODES; n++) {
    s.dyn_dtree[n * 2]
    /*.Freq*/
    = 0;
  }

  for (n = 0; n < BL_CODES; n++) {
    s.bl_tree[n * 2]
    /*.Freq*/
    = 0;
  }

  s.dyn_ltree[END_BLOCK * 2]
  /*.Freq*/
  = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}
/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */


function bi_windup(s) {
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }

  s.bi_buf = 0;
  s.bi_valid = 0;
}
/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */


function copy_block(s, buf, len, header) //DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);
  /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  } //  while (len--) {
  //    put_byte(s, *buf++);
  //  }


  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}
/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */


function smaller(tree, n, m, depth) {
  var _n2 = n * 2;

  var _m2 = m * 2;

  return tree[_n2]
  /*.Freq*/
  < tree[_m2]
  /*.Freq*/
  || tree[_n2]
  /*.Freq*/
  === tree[_m2]
  /*.Freq*/
  && depth[n] <= depth[m];
}
/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */


function pqdownheap(s, tree, k) //    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;
  /* left son of k */

  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */


    if (smaller(tree, v, s.heap[j], s.depth)) {
      break;
    }
    /* Exchange v with the smallest son */


    s.heap[k] = s.heap[j];
    k = j;
    /* And continue down the tree, setting j to the left son of k */

    j <<= 1;
  }

  s.heap[k] = v;
} // inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */


function compress_block(s, ltree, dtree) //    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;
  /* distance of matched string */

  var lc;
  /* match length or unmatched char (if dist == 0) */

  var lx = 0;
  /* running index in l_buf */

  var code;
  /* the code to send */

  var extra;
  /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree);
        /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree);
        /* send the length code */

        extra = extra_lbits[code];

        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);
          /* send the extra length bits */
        }

        dist--;
        /* dist is now the match distance - 1 */

        code = d_code(dist); //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);
        /* send the distance code */

        extra = extra_dbits[code];

        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);
          /* send the extra distance bits */
        }
      }
      /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}
/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */


function build_tree(s, desc) //    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree = desc.dyn_tree;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems = desc.stat_desc.elems;
  var n, m;
  /* iterate over heap elements */

  var max_code = -1;
  /* largest code with non zero frequency */

  var node;
  /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */

  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]
    /*.Freq*/
    !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1]
      /*.Len*/
      = 0;
    }
  }
  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */


  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2]
    /*.Freq*/
    = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]
      /*.Len*/
      ;
    }
    /* node is 0 or 1 so it does not have extra bits */

  }

  desc.max_code = max_code;
  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */

  for (n = s.heap_len >> 1
  /*int /2*/
  ; n >= 1; n--) {
    pqdownheap(s, tree, n);
  }
  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */


  node = elems;
  /* next internal node of the tree */

  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */

    /*** pqremove ***/
    n = s.heap[1
    /*SMALLEST*/
    ];
    s.heap[1
    /*SMALLEST*/
    ] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1
    /*SMALLEST*/
    );
    /***/

    m = s.heap[1
    /*SMALLEST*/
    ];
    /* m = node of next least frequency */

    s.heap[--s.heap_max] = n;
    /* keep the nodes sorted by frequency */

    s.heap[--s.heap_max] = m;
    /* Create a new node father of n and m */

    tree[node * 2]
    /*.Freq*/
    = tree[n * 2]
    /*.Freq*/
    + tree[m * 2]
    /*.Freq*/
    ;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]
    /*.Dad*/
    = tree[m * 2 + 1]
    /*.Dad*/
    = node;
    /* and insert the new node in the heap */

    s.heap[1
    /*SMALLEST*/
    ] = node++;
    pqdownheap(s, tree, 1
    /*SMALLEST*/
    );
  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1
  /*SMALLEST*/
  ];
  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */

  gen_bitlen(s, desc);
  /* The field len is now set, we can generate the bit codes */

  gen_codes(tree, max_code, s.bl_count);
}
/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */


function scan_tree(s, tree, max_code) //    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;
  /* iterates over all tree elements */

  var prevlen = -1;
  /* last emitted length */

  var curlen;
  /* length of current code */

  var nextlen = tree[0 * 2 + 1]
  /*.Len*/
  ;
  /* length of next code */

  var count = 0;
  /* repeat count of the current code */

  var max_count = 7;
  /* max repeat count */

  var min_count = 4;
  /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  tree[(max_code + 1) * 2 + 1]
  /*.Len*/
  = 0xffff;
  /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]
    /*.Len*/
    ;

    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2]
      /*.Freq*/
      += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2] /*.Freq*/++;
      }

      s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
    } else {
      s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}
/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */


function send_tree(s, tree, max_code) //    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;
  /* iterates over all tree elements */

  var prevlen = -1;
  /* last emitted length */

  var curlen;
  /* length of current code */

  var nextlen = tree[0 * 2 + 1]
  /*.Len*/
  ;
  /* length of next code */

  var count = 0;
  /* repeat count of the current code */

  var max_count = 7;
  /* max repeat count */

  var min_count = 4;
  /* min repeat count */

  /* tree[max_code+1].Len = -1; */

  /* guard already set */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]
    /*.Len*/
    ;

    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      } //Assert(count >= 3 && count <= 6, " 3_6?");


      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}
/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */


function build_bl_tree(s) {
  var max_blindex;
  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */

  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
  /* Build the bit length tree: */

  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */

  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]
    /*.Len*/
    !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */


  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4; //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}
/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */


function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;
  /* index in bl_order */
  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));

  send_bits(s, lcodes - 257, 5);
  /* not +255 as stated in appnote.txt */

  send_bits(s, dcodes - 1, 5);
  send_bits(s, blcodes - 4, 4);
  /* not -3 as stated in appnote.txt */

  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]
    /*.Len*/
    , 3);
  } //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));


  send_tree(s, s.dyn_ltree, lcodes - 1);
  /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1);
  /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}
/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */


function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;
  /* Check for non-textual ("black-listed") bytes. */

  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if (black_mask & 1 && s.dyn_ltree[n * 2]
    /*.Freq*/
    !== 0) {
      return Z_BINARY;
    }
  }
  /* Check for textual ("white-listed") bytes. */


  if (s.dyn_ltree[9 * 2]
  /*.Freq*/
  !== 0 || s.dyn_ltree[10 * 2]
  /*.Freq*/
  !== 0 || s.dyn_ltree[13 * 2]
  /*.Freq*/
  !== 0) {
    return Z_TEXT;
  }

  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]
    /*.Freq*/
    !== 0) {
      return Z_TEXT;
    }
  }
  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */


  return Z_BINARY;
}

var static_init_done = false;
/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */

function _tr_init(s) {
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;
  /* Initialize the first block of the first file: */

  init_block(s);
}
/* ===========================================================================
 * Send a stored block
 */


function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
  /* send block type */

  copy_block(s, buf, stored_len, true);
  /* with header */
}
/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */


function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}
/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */


function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;
  /* opt_len and static_len in bytes */

  var max_blindex = 0;
  /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */

  if (s.level > 0) {
    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }
    /* Construct the literal and distance trees */


    build_tree(s, s.l_desc); // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc); // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */

    max_blindex = build_bl_tree(s);
    /* Determine the best encoding. Compute the block lengths in bytes. */

    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3; // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5;
    /* force a stored block */
  }

  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  } // Assert (s->compressed_len == s->bits_sent, "bad compressed size");

  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */


  init_block(s);

  if (last) {
    bi_windup(s);
  } // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));

}
/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */


function _tr_tally(s, dist, lc) //    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;
  s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2] /*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */

    dist--;
    /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
  } // (!) This block is disabled in zlib defaults,
  // don't enable it for binary compatibility
  //#ifdef TRUNCATE_BLOCK
  //  /* Try to guess if it is profitable to stop the current block here */
  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
  //    /* Compute an upper bound for the compressed length */
  //    out_length = s.last_lit*8;
  //    in_length = s.strstart - s.block_start;
  //
  //    for (dcode = 0; dcode < D_CODES; dcode++) {
  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
  //    }
  //    out_length >>>= 3;
  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
  //    //       s->last_lit, in_length, out_length,
  //    //       100L - out_length*100L/in_length));
  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
  //      return true;
  //    }
  //  }
  //#endif


  return s.last_lit === s.lit_bufsize - 1;
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

/***/ }),

/***/ "../node_modules/pako/lib/zlib/zstream.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers

  this.next_in = 0;
  /* number of bytes available at input */

  this.avail_in = 0;
  /* total number of input bytes read so far */

  this.total_in = 0;
  /* next output byte should be put there */

  this.output = null; // JS specific, because we have no pointers

  this.next_out = 0;
  /* remaining free space at output */

  this.avail_out = 0;
  /* total number of bytes output so far */

  this.total_out = 0;
  /* last error message, NULL if no error */

  this.msg = ''
  /*Z_NULL*/
  ;
  /* not visible by applications */

  this.state = null;
  /* best guess about the data type: binary or text */

  this.data_type = 2
  /*Z_UNKNOWN*/
  ;
  /* adler32 value of the uncompressed data */

  this.adler = 0;
}

module.exports = ZStream;

/***/ }),

/***/ "../node_modules/process-nextick-args/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = {
    nextTick: nextTick
  };
} else {
  module.exports = process;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }

  var len = arguments.length;
  var args, i;

  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);

    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });

    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });

    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });

    default:
      args = new Array(len - 1);
      i = 0;

      while (i < args.length) {
        args[i++] = arguments[i];
      }

      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/process/browser.js":
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "../node_modules/querystring-es3/decode.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
 // If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

/***/ }),

/***/ "../node_modules/querystring-es3/encode.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }

  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }

  return res;
};

/***/ }),

/***/ "../node_modules/querystring-es3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__("../node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__("../node_modules/querystring-es3/encode.js");

/***/ }),

/***/ "../node_modules/readable-stream/duplex.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("../node_modules/readable-stream/readable.js").Duplex;

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_duplex.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var pna = __webpack_require__("../node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/


var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;
/*<replacement>*/

var util = __webpack_require__("../node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__("../node_modules/inherits/inherits.js");
/*</replacement>*/

var Readable = __webpack_require__("../node_modules/readable-stream/lib/_stream_readable.js");

var Writable = __webpack_require__("../node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);
{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  if (options && options.readable === false) this.readable = false;
  if (options && options.writable === false) this.writable = false;
  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
}); // the no-half-open enforcer

function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();
  pna.nextTick(cb, err);
};

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_passthrough.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__("../node_modules/readable-stream/lib/_stream_transform.js");
/*<replacement>*/


var util = __webpack_require__("../node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__("../node_modules/inherits/inherits.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_readable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var pna = __webpack_require__("../node_modules/process-nextick-args/index.js");
/*</replacement>*/


module.exports = Readable;
/*<replacement>*/

var isArray = __webpack_require__("../node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/


var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__("../node_modules/events/events.js").EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__("../node_modules/readable-stream/lib/internal/streams/stream.js");
/*</replacement>*/

/*<replacement>*/


var Buffer = __webpack_require__("../node_modules/safe-buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/


var util = __webpack_require__("../node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__("../node_modules/inherits/inherits.js");
/*</replacement>*/

/*<replacement>*/

var debugUtil = __webpack_require__("../node_modules/node-libs-browser/node_modules/util/util.js");

var debug = void 0;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


var BufferList = __webpack_require__("../node_modules/readable-stream/lib/internal/streams/BufferList.js");

var destroyImpl = __webpack_require__("../node_modules/readable-stream/lib/internal/streams/destroy.js");

var StringDecoder;
util.inherits(Readable, Stream);
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__("../node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__("../node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__("../node_modules/readable-stream/lib/_stream_duplex.js");
  if (!(this instanceof Readable)) return new Readable(options);
  this._readableState = new ReadableState(options, this); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  return er;
} // if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.


function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__("../node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true; // emit 'readable' now to make sure it gets picked up.

  emitReadable(stream);
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;

  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;else len = state.length;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  } // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.


  var increasedAwaitDrain = false;
  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);

    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;

    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;

      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }

  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {}
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }
  return ret;
} // Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function fromListPartial(n, list, hasStrings) {
  var ret;

  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }

  return ret;
} // Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;

  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;

    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
} // Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;

  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;

    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.

  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js"), __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_transform.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var Duplex = __webpack_require__("../node_modules/readable-stream/lib/_stream_duplex.js");
/*<replacement>*/


var util = __webpack_require__("../node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__("../node_modules/inherits/inherits.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);

    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
  return stream.push(null);
}

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_writable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

/*<replacement>*/

var pna = __webpack_require__("../node_modules/process-nextick-args/index.js");
/*</replacement>*/


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/

var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var util = __webpack_require__("../node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__("../node_modules/inherits/inherits.js");
/*</replacement>*/

/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__("../node_modules/util-deprecate/node.js")
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__("../node_modules/readable-stream/lib/internal/streams/stream.js");
/*</replacement>*/

/*<replacement>*/


var Buffer = __webpack_require__("../node_modules/safe-buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/


var destroyImpl = __webpack_require__("../node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__("../node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__("../node_modules/readable-stream/lib/_stream_duplex.js"); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  pna.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }

  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js"), __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/BufferList.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = __webpack_require__("../node_modules/safe-buffer/index.js").Buffer;

var util = __webpack_require__("../node_modules/node-libs-browser/node_modules/util/util.js");

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({
      length: this.length
    });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/destroy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*<replacement>*/

var pna = __webpack_require__("../node_modules/process-nextick-args/index.js");
/*</replacement>*/
// undocumented cb() API, needed for core, not for public API


function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);

      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/stream.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("../node_modules/stream-browserify/index.js");

/***/ }),

/***/ "../node_modules/readable-stream/passthrough.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("../node_modules/readable-stream/readable.js").PassThrough;

/***/ }),

/***/ "../node_modules/readable-stream/readable.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var Stream = __webpack_require__("../node_modules/stream-browserify/index.js");

if (process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream;
  exports = module.exports = Stream.Readable;
  exports.Readable = Stream.Readable;
  exports.Writable = Stream.Writable;
  exports.Duplex = Stream.Duplex;
  exports.Transform = Stream.Transform;
  exports.PassThrough = Stream.PassThrough;
  exports.Stream = Stream;
} else {
  exports = module.exports = __webpack_require__("../node_modules/readable-stream/lib/_stream_readable.js");
  exports.Stream = Stream || exports;
  exports.Readable = exports;
  exports.Writable = __webpack_require__("../node_modules/readable-stream/lib/_stream_writable.js");
  exports.Duplex = __webpack_require__("../node_modules/readable-stream/lib/_stream_duplex.js");
  exports.Transform = __webpack_require__("../node_modules/readable-stream/lib/_stream_transform.js");
  exports.PassThrough = __webpack_require__("../node_modules/readable-stream/lib/_stream_passthrough.js");
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/readable-stream/transform.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("../node_modules/readable-stream/readable.js").Transform;

/***/ }),

/***/ "../node_modules/readable-stream/writable.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var Stream = __webpack_require__("../node_modules/stream-browserify/index.js");

var Writable = __webpack_require__("../node_modules/readable-stream/lib/_stream_writable.js");

if (process.env.READABLE_STREAM === 'disable') {
  module.exports = Stream && Stream.Writable || Writable;
} else {
  module.exports = Writable;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/safe-buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("../node_modules/buffer/index.js");

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
} // Copy static methods from Buffer


copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),

/***/ "../node_modules/stream-browserify/index.js":
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;

var EE = __webpack_require__("../node_modules/events/events.js").EventEmitter;

var inherits = __webpack_require__("../node_modules/inherits/inherits.js");

inherits(Stream, EE);
Stream.Readable = __webpack_require__("../node_modules/readable-stream/readable.js");
Stream.Writable = __webpack_require__("../node_modules/readable-stream/writable.js");
Stream.Duplex = __webpack_require__("../node_modules/readable-stream/duplex.js");
Stream.Transform = __webpack_require__("../node_modules/readable-stream/transform.js");
Stream.PassThrough = __webpack_require__("../node_modules/readable-stream/passthrough.js"); // Backwards-compat with node 0.4.x

Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.

  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;

  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;
    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;
    if (typeof dest.destroy === 'function') dest.destroy();
  } // don't leave dangling pipes when there are errors.


  function onerror(er) {
    cleanup();

    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror); // remove all the event listeners that were added.

  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);
    source.removeListener('end', onend);
    source.removeListener('close', onclose);
    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);
    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);
  dest.on('close', cleanup);
  dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

  return dest;
};

/***/ }),

/***/ "../node_modules/string_decoder/lib/string_decoder.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var Buffer = __webpack_require__("../node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/


var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;

  switch (encoding && encoding.toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;

  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';

      case 'latin1':
      case 'binary':
        return 'latin1';

      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;

      default:
        if (retried) return; // undefined

        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}

; // Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings

function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);

  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
} // StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.


exports.StringDecoder = StringDecoder;

function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;

  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;

    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;

    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;

    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }

  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;

  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }

  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.


function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
} // Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.


function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }

    return nb;
  }

  return 0;
} // Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.


function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }

  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }

    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;

  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.


function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
} // For UTF-8, a replacement character is added when ending on a partial
// character.


function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
} // UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.


function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);

    if (r) {
      var c = r.charCodeAt(r.length - 1);

      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }

    return r;
  }

  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
} // For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.


function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';

  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }

  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;

  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }

  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "../node_modules/supports-color/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

const os = __webpack_require__("../node_modules/os-browserify/browser.js");

const hasFlag = __webpack_require__("../node_modules/has-flag/index.js");

const env = process.env;
let forceColor;

if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
  forceColor = false;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
  forceColor = true;
}

if ('FORCE_COLOR' in env) {
  forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
}

function translateLevel(level) {
  if (level === 0) {
    return false;
  }

  return {
    level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
}

function supportsColor(stream) {
  if (forceColor === false) {
    return 0;
  }

  if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
    return 3;
  }

  if (hasFlag('color=256')) {
    return 2;
  }

  if (stream && !stream.isTTY && forceColor !== true) {
    return 0;
  }

  const min = forceColor ? 1 : 0;

  if (process.platform === 'win32') {
    // Node.js 7.5.0 is the first version of Node.js to include a patch to
    // libuv that enables 256 color output on Windows. Anything earlier and it
    // won't work. However, here we target Node.js 8 at minimum as it is an LTS
    // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
    // release that supports 256 colors. Windows 10 build 14931 is the first release
    // that supports 16m/TrueColor.
    const osRelease = os.release().split('.');

    if (Number(process.versions.node.split('.')[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }

    return 1;
  }

  if ('CI' in env) {
    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
      return 1;
    }

    return min;
  }

  if ('TEAMCITY_VERSION' in env) {
    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  }

  if (env.COLORTERM === 'truecolor') {
    return 3;
  }

  if ('TERM_PROGRAM' in env) {
    const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    switch (env.TERM_PROGRAM) {
      case 'iTerm.app':
        return version >= 3 ? 3 : 2;

      case 'Apple_Terminal':
        return 2;
      // No default
    }
  }

  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }

  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }

  if ('COLORTERM' in env) {
    return 1;
  }

  if (env.TERM === 'dumb') {
    return min;
  }

  return min;
}

function getSupportLevel(stream) {
  const level = supportsColor(stream);
  return translateLevel(level);
}

module.exports = {
  supportsColor: getSupportLevel,
  stdout: getSupportLevel(process.stdout),
  stderr: getSupportLevel(process.stderr)
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/application/application-common.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__("../node_modules/tns-core-modules/globals/globals.js");

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

exports.Observable = observable_1.Observable;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var events = new observable_1.Observable();
var launched = false;

function setLaunched() {
  launched = true;
  events.off("launch", setLaunched);
}

events.on("launch", setLaunched);

if (profiling_1.level() > 0) {
  events.on("displayed", function () {
    var duration = profiling_1.uptime();
    var end = profiling_1.time();
    var start = end - duration;
    profiling_1.trace("Displayed in " + duration.toFixed(2) + "ms", start, end);
  });
}

function hasLaunched() {
  return launched;
}

exports.hasLaunched = hasLaunched;
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.displayedEvent = "displayed";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.discardedErrorEvent = "discardedError";
exports.orientationChangedEvent = "orientationChanged";
var cssFile = "./app.css";
var resources = {};

function getResources() {
  return resources;
}

exports.getResources = getResources;

function setResources(res) {
  resources = res;
}

exports.setResources = setResources;
exports.android = undefined;
exports.ios = undefined;
exports.on = events.on.bind(events);
exports.off = events.off.bind(events);
exports.notify = events.notify.bind(events);
exports.hasListeners = events.hasListeners.bind(events);
var app;

function setApplication(instance) {
  app = instance;
}

exports.setApplication = setApplication;

function livesync(rootView, context) {
  events.notify({
    eventName: "livesync",
    object: app
  });
  var liveSyncCore = global.__onLiveSyncCore;
  var reapplyAppCss = false;

  if (context) {
    var fullFileName = getCssFileName();
    var fileName_1 = fullFileName.substring(0, fullFileName.lastIndexOf(".") + 1);
    var extensions = ["css", "scss"];
    reapplyAppCss = extensions.some(function (ext) {
      return context.path === fileName_1.concat(ext);
    });
  }

  if (reapplyAppCss && rootView) {
    rootView._onCssStateChange();
  } else if (liveSyncCore) {
    liveSyncCore();
  }
}

exports.livesync = livesync;

function setCssFileName(cssFileName) {
  cssFile = cssFileName;
  events.notify({
    eventName: "cssChanged",
    object: app,
    cssFile: cssFileName
  });
}

exports.setCssFileName = setCssFileName;

function getCssFileName() {
  return cssFile;
}

exports.getCssFileName = getCssFileName;

function loadAppCss() {
  try {
    events.notify({
      eventName: "loadAppCss",
      object: app,
      cssFile: getCssFileName()
    });
  } catch (e) {
    throw new Error("The file " + getCssFileName() + " couldn't be loaded! " + "You may need to register it inside ./app/vendor.ts.");
  }
}

exports.loadAppCss = loadAppCss;

function addCss(cssText) {
  events.notify({
    eventName: "cssChanged",
    object: app,
    cssText: cssText
  });
}

exports.addCss = addCss;

global.__onUncaughtError = function (error) {
  events.notify({
    eventName: exports.uncaughtErrorEvent,
    object: app,
    android: error,
    ios: error,
    error: error
  });
};

global.__onDiscardedError = function (error) {
  events.notify({
    eventName: exports.discardedErrorEvent,
    object: app,
    error: error
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/application/application.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var application_common_1 = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/application/application-common.js"));

var ActivityCreated = "activityCreated";
var ActivityDestroyed = "activityDestroyed";
var ActivityStarted = "activityStarted";
var ActivityPaused = "activityPaused";
var ActivityResumed = "activityResumed";
var ActivityStopped = "activityStopped";
var SaveActivityState = "saveActivityState";
var ActivityResult = "activityResult";
var ActivityBackPressed = "activityBackPressed";
var ActivityRequestPermissions = "activityRequestPermissions";

var AndroidApplication = function (_super) {
  __extends(AndroidApplication, _super);

  function AndroidApplication() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.callbacks = {};
    _this._registeredReceivers = {};
    _this._pendingReceiverRegistrations = new Array();
    return _this;
  }

  Object.defineProperty(AndroidApplication.prototype, "currentContext", {
    get: function () {
      return this.foregroundActivity;
    },
    enumerable: true,
    configurable: true
  });

  AndroidApplication.prototype.init = function (nativeApp) {
    if (this.nativeApp === nativeApp) {
      return;
    }

    if (this.nativeApp) {
      throw new Error("application.android already initialized.");
    }

    this.nativeApp = nativeApp;
    this.packageName = nativeApp.getPackageName();
    this.context = nativeApp.getApplicationContext();
    this.callbacks.lifecycleCallbacks = initLifecycleCallbacks();
    this.callbacks.componentCallbacks = initComponentCallbacks();
    this.nativeApp.registerActivityLifecycleCallbacks(this.callbacks.lifecycleCallbacks);
    this.nativeApp.registerComponentCallbacks(this.callbacks.componentCallbacks);

    this._registerPendingReceivers();
  };

  AndroidApplication.prototype._registerPendingReceivers = function () {
    var _this = this;

    this._pendingReceiverRegistrations.forEach(function (func) {
      return func(_this.context);
    });

    this._pendingReceiverRegistrations.length = 0;
  };

  AndroidApplication.prototype.registerBroadcastReceiver = function (intentFilter, onReceiveCallback) {
    ensureBroadCastReceiverClass();
    var that = this;

    var registerFunc = function (context) {
      var receiver = new BroadcastReceiverClass(onReceiveCallback);
      context.registerReceiver(receiver, new android.content.IntentFilter(intentFilter));
      that._registeredReceivers[intentFilter] = receiver;
    };

    if (this.context) {
      registerFunc(this.context);
    } else {
      this._pendingReceiverRegistrations.push(registerFunc);
    }
  };

  AndroidApplication.prototype.unregisterBroadcastReceiver = function (intentFilter) {
    var receiver = this._registeredReceivers[intentFilter];

    if (receiver) {
      this.context.unregisterReceiver(receiver);
      this._registeredReceivers[intentFilter] = undefined;
      delete this._registeredReceivers[intentFilter];
    }
  };

  AndroidApplication.activityCreatedEvent = ActivityCreated;
  AndroidApplication.activityDestroyedEvent = ActivityDestroyed;
  AndroidApplication.activityStartedEvent = ActivityStarted;
  AndroidApplication.activityPausedEvent = ActivityPaused;
  AndroidApplication.activityResumedEvent = ActivityResumed;
  AndroidApplication.activityStoppedEvent = ActivityStopped;
  AndroidApplication.saveActivityStateEvent = SaveActivityState;
  AndroidApplication.activityResultEvent = ActivityResult;
  AndroidApplication.activityBackPressedEvent = ActivityBackPressed;
  AndroidApplication.activityRequestPermissionsEvent = ActivityRequestPermissions;
  return AndroidApplication;
}(application_common_1.Observable);

exports.AndroidApplication = AndroidApplication;
var androidApp = new AndroidApplication();
exports.android = androidApp;
application_common_1.setApplication(androidApp);
var mainEntry;
var started = false;
var createRootFrame = {
  value: true
};

function start(entry) {
  if (started) {
    throw new Error("Application is already started.");
  }

  started = true;
  mainEntry = typeof entry === "string" ? {
    moduleName: entry
  } : entry;

  if (!androidApp.nativeApp) {
    var nativeApp = getNativeApplication();
    androidApp.init(nativeApp);
  }
}

exports.start = start;

function shouldCreateRootFrame() {
  return createRootFrame.value;
}

exports.shouldCreateRootFrame = shouldCreateRootFrame;

function run(entry) {
  createRootFrame.value = false;
  start(entry);
}

exports.run = run;
var CALLBACKS = "_callbacks";

function _resetRootView(entry) {
  var activity = androidApp.foregroundActivity;

  if (!activity) {
    throw new Error("Cannot find android activity.");
  }

  createRootFrame.value = false;
  mainEntry = typeof entry === "string" ? {
    moduleName: entry
  } : entry;
  var callbacks = activity[CALLBACKS];
  callbacks.resetActivityContent(activity);
}

exports._resetRootView = _resetRootView;

function getMainEntry() {
  return mainEntry;
}

exports.getMainEntry = getMainEntry;

function getRootView() {
  var activity = androidApp.foregroundActivity || androidApp.startActivity;

  if (!activity) {
    return undefined;
  }

  var callbacks = activity[CALLBACKS];
  return callbacks ? callbacks.getRootView() : undefined;
}

exports.getRootView = getRootView;

function getNativeApplication() {
  var nativeApp = androidApp.nativeApp;

  if (!nativeApp) {
    if (!nativeApp && com.tns.NativeScriptApplication) {
      nativeApp = com.tns.NativeScriptApplication.getInstance();
    }

    if (!nativeApp) {
      var clazz = java.lang.Class.forName("android.app.ActivityThread");

      if (clazz) {
        var method = clazz.getMethod("currentApplication", null);

        if (method) {
          nativeApp = method.invoke(null, null);
        }
      }
    }

    if (!nativeApp) {
      throw new Error("Failed to retrieve native Android Application object. If you have a custom android.app.Application type implemented make sure that you've called the '<application-module>.android.init' method.");
    }
  }

  return nativeApp;
}

exports.getNativeApplication = getNativeApplication;

global.__onLiveSync = function __onLiveSync(context) {
  if (androidApp && androidApp.paused) {
    return;
  }

  var rootView = getRootView();
  application_common_1.livesync(rootView, context);
};

function initLifecycleCallbacks() {
  var setThemeOnLaunch = profiling_1.profile("setThemeOnLaunch", function (activity) {
    var activityInfo = activity.getPackageManager().getActivityInfo(activity.getComponentName(), android.content.pm.PackageManager.GET_META_DATA);

    if (activityInfo.metaData) {
      var setThemeOnLaunch_1 = activityInfo.metaData.getInt("SET_THEME_ON_LAUNCH", -1);

      if (setThemeOnLaunch_1 !== -1) {
        activity.setTheme(setThemeOnLaunch_1);
      }
    }
  });
  var notifyActivityCreated = profiling_1.profile("notifyActivityCreated", function (activity, savedInstanceState) {
    androidApp.notify({
      eventName: ActivityCreated,
      object: androidApp,
      activity: activity,
      bundle: savedInstanceState
    });
  });
  var subscribeForGlobalLayout = profiling_1.profile("subscribeForGlobalLayout", function (activity) {
    var rootView = activity.getWindow().getDecorView().getRootView();
    this.onGlobalLayoutListener = new android.view.ViewTreeObserver.OnGlobalLayoutListener({
      onGlobalLayout: function () {
        application_common_1.notify({
          eventName: application_common_1.displayedEvent,
          object: androidApp,
          activity: activity
        });
        var viewTreeObserver = rootView.getViewTreeObserver();
        viewTreeObserver.removeOnGlobalLayoutListener(this.onGlobalLayoutListener);
      }
    });
    rootView.getViewTreeObserver().addOnGlobalLayoutListener(this.onGlobalLayoutListener);
  });
  var lifecycleCallbacks = new android.app.Application.ActivityLifecycleCallbacks({
    onActivityCreated: profiling_1.profile("onActivityCreated", function (activity, savedInstanceState) {
      setThemeOnLaunch(activity);

      if (!androidApp.startActivity) {
        androidApp.startActivity = activity;
      }

      notifyActivityCreated(activity, savedInstanceState);

      if (application_common_1.hasListeners(application_common_1.displayedEvent)) {
        subscribeForGlobalLayout(activity);
      }
    }),
    onActivityDestroyed: profiling_1.profile("onActivityDestroyed", function (activity) {
      if (activity === androidApp.foregroundActivity) {
        androidApp.foregroundActivity = undefined;
      }

      if (activity === androidApp.startActivity) {
        androidApp.startActivity = undefined;
      }

      androidApp.notify({
        eventName: ActivityDestroyed,
        object: androidApp,
        activity: activity
      });
      gc();
    }),
    onActivityPaused: profiling_1.profile("onActivityPaused", function (activity) {
      if (activity.isNativeScriptActivity) {
        androidApp.paused = true;
        application_common_1.notify({
          eventName: application_common_1.suspendEvent,
          object: androidApp,
          android: activity
        });
      }

      androidApp.notify({
        eventName: ActivityPaused,
        object: androidApp,
        activity: activity
      });
    }),
    onActivityResumed: profiling_1.profile("onActivityResumed", function (activity) {
      androidApp.foregroundActivity = activity;
      androidApp.notify({
        eventName: ActivityResumed,
        object: androidApp,
        activity: activity
      });
    }),
    onActivitySaveInstanceState: profiling_1.profile("onActivitySaveInstanceState", function (activity, outState) {
      androidApp.notify({
        eventName: SaveActivityState,
        object: androidApp,
        activity: activity,
        bundle: outState
      });
    }),
    onActivityStarted: profiling_1.profile("onActivityStarted", function (activity) {
      androidApp.notify({
        eventName: ActivityStarted,
        object: androidApp,
        activity: activity
      });
    }),
    onActivityStopped: profiling_1.profile("onActivityStopped", function (activity) {
      androidApp.notify({
        eventName: ActivityStopped,
        object: androidApp,
        activity: activity
      });
    })
  });
  return lifecycleCallbacks;
}

var currentOrientation;

function initComponentCallbacks() {
  var componentCallbacks = new android.content.ComponentCallbacks2({
    onLowMemory: profiling_1.profile("onLowMemory", function () {
      gc();
      java.lang.System.gc();
      application_common_1.notify({
        eventName: application_common_1.lowMemoryEvent,
        object: this,
        android: this
      });
    }),
    onTrimMemory: profiling_1.profile("onTrimMemory", function (level) {}),
    onConfigurationChanged: profiling_1.profile("onConfigurationChanged", function (newConfig) {
      var newOrientation = newConfig.orientation;

      if (newOrientation === currentOrientation) {
        return;
      }

      currentOrientation = newOrientation;
      var newValue;

      switch (newOrientation) {
        case android.content.res.Configuration.ORIENTATION_LANDSCAPE:
          newValue = "landscape";
          break;

        case android.content.res.Configuration.ORIENTATION_PORTRAIT:
          newValue = "portrait";
          break;

        default:
          newValue = "unknown";
          break;
      }

      application_common_1.notify({
        eventName: application_common_1.orientationChangedEvent,
        android: androidApp.nativeApp,
        newValue: newValue,
        object: androidApp
      });
    })
  });
  return componentCallbacks;
}

var BroadcastReceiverClass;

function ensureBroadCastReceiverClass() {
  if (BroadcastReceiverClass) {
    return;
  }

  var BroadcastReceiver = function (_super) {
    __extends(BroadcastReceiver, _super);

    function BroadcastReceiver(onReceiveCallback) {
      var _this = _super.call(this) || this;

      _this._onReceiveCallback = onReceiveCallback;
      return global.__native(_this);
    }

    BroadcastReceiver.prototype.onReceive = function (context, intent) {
      if (this._onReceiveCallback) {
        this._onReceiveCallback(context, intent);
      }
    };

    return BroadcastReceiver;
  }(android.content.BroadcastReceiver);

  BroadcastReceiverClass = BroadcastReceiver;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/color/color-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var knownColors = __webpack_require__("../node_modules/tns-core-modules/color/known-colors.js");

var SHARP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;

var Color = function () {
  function Color() {
    if (arguments.length === 1) {
      var arg = arguments[0];

      if (types.isString(arg)) {
        if (isRgbOrRgba(arg)) {
          this._argb = argbFromRgbOrRgba(arg);
        } else if (knownColors.isKnownName(arg)) {
          var hex = knownColors.getKnownColor(arg);
          this._name = arg;
          this._argb = this._argbFromString(hex);
        } else if (HEX_REGEX.test(arg)) {
          var hex = this._normalizeHex(arg);

          this._argb = this._argbFromString(hex);
        } else {
          throw new Error("Invalid color: " + arg);
        }
      } else if (types.isNumber(arg)) {
        this._argb = arg >>> 0;
      } else {
        throw new Error("Expected 1 or 4 constructor parameters.");
      }
    } else if (arguments.length === 4) {
      this._argb = (arguments[0] & 0xFF) * 0x01000000 + (arguments[1] & 0xFF) * 0x00010000 + (arguments[2] & 0xFF) * 0x00000100 + (arguments[3] & 0xFF) * 0x00000001;
    } else {
      throw new Error("Expected 1 or 4 constructor parameters.");
    }
  }

  Object.defineProperty(Color.prototype, "a", {
    get: function () {
      return this._argb / 0x01000000 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "r", {
    get: function () {
      return this._argb / 0x00010000 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "g", {
    get: function () {
      return this._argb / 0x00000100 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "b", {
    get: function () {
      return this._argb / 0x00000001 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "argb", {
    get: function () {
      return this._argb;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "hex", {
    get: function () {
      if (this.a === 0xFF) {
        return ("#" + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
      } else {
        return ("#" + this._componentToHex(this.a) + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "name", {
    get: function () {
      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "ios", {
    get: function () {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "android", {
    get: function () {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });

  Color.prototype._argbFromString = function (hex) {
    if (hex.charAt(0) === "#") {
      hex = hex.substr(1);
    }

    if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    } else if (hex.length === 4) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
    }

    var intVal = parseInt(hex, 16);

    if (hex.length === 6) {
      intVal = (intVal & 0x00FFFFFF) + 0xFF000000;
    }

    return intVal;
  };

  Color.prototype.equals = function (value) {
    return value && this.argb === value.argb;
  };

  Color.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    return value1.equals(value2);
  };

  Color.isValid = function (value) {
    if (types.isNullOrUndefined(value) || value instanceof Color) {
      return true;
    }

    if (!types.isString(value)) {
      return false;
    }

    if (knownColors.isKnownName(value)) {
      return true;
    }

    return HEX_REGEX.test(value) || isRgbOrRgba(value);
  };

  Color.prototype._componentToHex = function (component) {
    var hex = component.toString(16);

    if (hex.length === 1) {
      hex = "0" + hex;
    }

    return hex;
  };

  Color.prototype._normalizeHex = function (hexStr) {
    if (hexStr.charAt(0) === SHARP && hexStr.length === 4) {
      hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
    }

    return hexStr;
  };

  Color.prototype.toString = function () {
    return this.hex;
  };

  return Color;
}();

exports.Color = Color;

function isRgbOrRgba(value) {
  var toLower = value.toLowerCase();
  return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}

function argbFromRgbOrRgba(value) {
  var toLower = value.toLowerCase();
  var parts = toLower.replace("rgba(", "").replace("rgb(", "").replace(")", "").trim().split(",");
  var r = 255;
  var g = 255;
  var b = 255;
  var a = 255;

  if (parts[0]) {
    r = parseInt(parts[0].trim());
  }

  if (parts[1]) {
    g = parseInt(parts[1].trim());
  }

  if (parts[2]) {
    b = parseInt(parts[2].trim());
  }

  if (parts[3]) {
    a = Math.round(parseFloat(parts[3].trim()) * 255);
  }

  return (a & 0xFF) * 0x01000000 + (r & 0xFF) * 0x00010000 + (g & 0xFF) * 0x00000100 + (b & 0xFF) * 0x00000001;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/color/color.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var common = __webpack_require__("../node_modules/tns-core-modules/color/color-common.js");

var Color = function (_super) {
  __extends(Color, _super);

  function Color() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Color.prototype, "android", {
    get: function () {
      return this.argb >> 0;
    },
    enumerable: true,
    configurable: true
  });
  return Color;
}(common.Color);

exports.Color = Color;

/***/ }),

/***/ "../node_modules/tns-core-modules/color/known-colors.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.RebeccaPurple = "#663399";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};

(function () {
  var name;
  var underscore = "_";

  for (var p in exports) {
    name = p;

    if (name.charAt(0) !== underscore) {
      _allColors[name.toLowerCase()] = exports[p];
    }
  }
})();

function isKnownName(name) {
  if (!name) {
    return undefined;
  }

  return name.toLowerCase() in _allColors;
}

exports.isKnownName = isKnownName;

function getKnownColor(name) {
  if (!name) {
    return undefined;
  }

  return _allColors[name.toLowerCase()];
}

exports.getKnownColor = getKnownColor;

/***/ }),

/***/ "../node_modules/tns-core-modules/console/console.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Console = function () {
  function Console() {}

  Console.prototype.time = function (reportName) {};

  Console.prototype.timeEnd = function (reportName) {};

  Console.prototype.assert = function (test, message) {};

  Console.prototype.info = function (message) {};

  Console.prototype.warn = function (message) {};

  Console.prototype.error = function (message) {};

  Console.prototype.log = function (message) {};

  Console.prototype.trace = function () {};

  Console.prototype.dir = function (obj) {};

  return Console;
}();

exports.Console = Console;

/***/ }),

/***/ "../node_modules/tns-core-modules/css-value/index.js":
/***/ (function(module, exports) {

exports.parse = parse;

function parse(str) {
  return new Parser(str).parse();
}

function Parser(str) {
  this.str = str;
}

Parser.prototype.skip = function (m) {
  this.str = this.str.slice(m[0].length);
};

Parser.prototype.comma = function () {
  var m = /^, */.exec(this.str);
  if (!m) return;
  this.skip(m);
  return {
    type: 'comma',
    string: ','
  };
};

Parser.prototype.ident = function () {
  var m = /^([\w-]+) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  return {
    type: 'ident',
    string: m[1]
  };
};

Parser.prototype.int = function () {
  var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  var n = ~~m[2];
  var u = m[3];
  return {
    type: 'number',
    string: m[1],
    unit: u || '',
    value: n
  };
};

Parser.prototype.float = function () {
  var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  var n = parseFloat(m[2]);
  var u = m[3];
  return {
    type: 'number',
    string: m[1],
    unit: u || '',
    value: n
  };
};

Parser.prototype.number = function () {
  return this.float() || this.int();
};

Parser.prototype.double = function () {
  var m = /^"([^"]*)" */.exec(this.str);
  if (!m) return m;
  this.skip(m);
  return {
    type: 'string',
    quote: '"',
    string: '"' + m[1] + '"',
    value: m[1]
  };
};

Parser.prototype.single = function () {
  var m = /^'([^']*)' */.exec(this.str);
  if (!m) return m;
  this.skip(m);
  return {
    type: 'string',
    quote: "'",
    string: "'" + m[1] + "'",
    value: m[1]
  };
};

Parser.prototype.string = function () {
  return this.single() || this.double();
};

Parser.prototype.value = function () {
  return this.number() || this.ident() || this.string() || this.comma();
};

Parser.prototype.parse = function () {
  var vals = [];

  while (this.str.length) {
    var obj = this.value();
    if (!obj) throw new Error('failed to parse near `' + this.str.slice(0, 10) + '...`');
    vals.push(obj);
  }

  return vals;
};

/***/ }),

/***/ "../node_modules/tns-core-modules/css/index.js":
/***/ (function(module, exports, __webpack_require__) {

exports.parse = __webpack_require__("../node_modules/tns-core-modules/css/lib/parse/index.js");

/***/ }),

/***/ "../node_modules/tns-core-modules/css/lib/parse/index.js":
/***/ (function(module, exports) {

// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

module.exports = function (css, options) {
  options = options || {};
  /**
   * Positional.
   */

  var lineno = 1;
  var column = 1;
  /**
   * Update lineno and column based on `str`.
   */

  function updatePosition(str) {
    var lines = str.match(/\n/g);
    if (lines) lineno += lines.length;
    var i = str.lastIndexOf('\n');
    column = ~i ? str.length - i : column + str.length;
  }
  /**
   * Mark position and patch `node.position`.
   */


  function position() {
    var start = {
      line: lineno,
      column: column
    };
    return function (node) {
      node.position = new Position(start);
      whitespace();
      return node;
    };
  }
  /**
   * Store position information for a node
   */


  function Position(start) {
    this.start = start;
    this.end = {
      line: lineno,
      column: column
    };
    this.source = options.source;
  }
  /**
   * Non-enumerable source string
   */


  Position.prototype.content = css;
  /**
   * Error `msg`.
   */

  var errorsList = [];

  function error(msg) {
    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
    err.reason = msg;
    err.filename = options.source;
    err.line = lineno;
    err.column = column;
    err.source = css;

    if (options.silent) {
      errorsList.push(err);
    } else {
      throw err;
    }
  }
  /**
   * Parse stylesheet.
   */


  function stylesheet() {
    var rulesList = rules();
    return {
      type: 'stylesheet',
      stylesheet: {
        rules: rulesList,
        parsingErrors: errorsList
      }
    };
  }
  /**
   * Opening brace.
   */


  function open() {
    return match(/^{\s*/);
  }
  /**
   * Closing brace.
   */


  function close() {
    return match(/^}/);
  }
  /**
   * Parse ruleset.
   */


  function rules() {
    var node;
    var rules = [];
    whitespace();
    comments(rules);

    while (css.length && css.charAt(0) != '}' && (node = atrule() || rule())) {
      if (node !== false) {
        rules.push(node);
        comments(rules);
      }
    }

    return rules;
  }
  /**
   * Match `re` and return captures.
   */


  function match(re) {
    var m = re.exec(css);
    if (!m) return;
    var str = m[0];
    updatePosition(str);
    css = css.slice(str.length);
    return m;
  }
  /**
   * Parse whitespace.
   */


  function whitespace() {
    match(/^\s*/);
  }
  /**
   * Parse comments;
   */


  function comments(rules) {
    var c;
    rules = rules || [];

    while (c = comment()) {
      if (c !== false) {
        rules.push(c);
      }
    }

    return rules;
  }
  /**
   * Parse comment.
   */


  function comment() {
    var pos = position();
    if ('/' != css.charAt(0) || '*' != css.charAt(1)) return;
    var i = 2;

    while ("" != css.charAt(i) && ('*' != css.charAt(i) || '/' != css.charAt(i + 1))) ++i;

    i += 2;

    if ("" === css.charAt(i - 1)) {
      return error('End of comment missing');
    }

    var str = css.slice(2, i - 2);
    column += 2;
    updatePosition(str);
    css = css.slice(i);
    column += 2;
    return pos({
      type: 'comment',
      comment: str
    });
  }
  /**
   * Parse selector.
   */


  function selector() {
    var m = match(/^([^{]+)/);
    if (!m) return;
    /* @fix Remove all comments from selectors
     * http://ostermiller.org/findcomment.html */

    return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, '').replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function (m) {
      return m.replace(/,/g, '\u200C');
    }).split(/\s*(?![^(]*\)),\s*/).map(function (s) {
      return s.replace(/\u200C/g, ',');
    });
  }
  /**
   * Parse declaration.
   */


  function declaration() {
    var pos = position(); // prop

    var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
    if (!prop) return;
    prop = trim(prop[0]); // :

    if (!match(/^:\s*/)) return error("property missing ':'"); // val

    var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
    var ret = pos({
      type: 'declaration',
      property: prop.replace(commentre, ''),
      value: val ? trim(val[0]).replace(commentre, '') : ''
    }); // ;

    match(/^[;\s]*/);
    return ret;
  }
  /**
   * Parse declarations.
   */


  function declarations() {
    var decls = [];
    if (!open()) return error("missing '{'");
    comments(decls); // declarations

    var decl;

    while (decl = declaration()) {
      if (decl !== false) {
        decls.push(decl);
        comments(decls);
      }
    }

    if (!close()) return error("missing '}'");
    return decls;
  }
  /**
   * Parse keyframe.
   */


  function keyframe() {
    var m;
    var vals = [];
    var pos = position();

    while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
      vals.push(m[1]);
      match(/^,\s*/);
    }

    if (!vals.length) return;
    return pos({
      type: 'keyframe',
      values: vals,
      declarations: declarations()
    });
  }
  /**
   * Parse keyframes.
   */


  function atkeyframes() {
    var pos = position();
    var m = match(/^@([-\w]+)?keyframes\s*/);
    if (!m) return;
    var vendor = m[1]; // identifier

    var m = match(/^([-\w]+)\s*/);
    if (!m) return error("@keyframes missing name");
    var name = m[1];
    if (!open()) return error("@keyframes missing '{'");
    var frame;
    var frames = comments();

    while (frame = keyframe()) {
      frames.push(frame);
      frames = frames.concat(comments());
    }

    if (!close()) return error("@keyframes missing '}'");
    return pos({
      type: 'keyframes',
      name: name,
      vendor: vendor,
      keyframes: frames
    });
  }
  /**
   * Parse supports.
   */


  function atsupports() {
    var pos = position();
    var m = match(/^@supports *([^{]+)/);
    if (!m) return;
    var supports = trim(m[1]);
    if (!open()) return error("@supports missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@supports missing '}'");
    return pos({
      type: 'supports',
      supports: supports,
      rules: style
    });
  }
  /**
   * Parse host.
   */


  function athost() {
    var pos = position();
    var m = match(/^@host\s*/);
    if (!m) return;
    if (!open()) return error("@host missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@host missing '}'");
    return pos({
      type: 'host',
      rules: style
    });
  }
  /**
   * Parse media.
   */


  function atmedia() {
    var pos = position();
    var m = match(/^@media *([^{]+)/);
    if (!m) return;
    var media = trim(m[1]);
    if (!open()) return error("@media missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@media missing '}'");
    return pos({
      type: 'media',
      media: media,
      rules: style
    });
  }
  /**
   * Parse custom-media.
   */


  function atcustommedia() {
    var pos = position();
    var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
    if (!m) return;
    return pos({
      type: 'custom-media',
      name: trim(m[1]),
      media: trim(m[2])
    });
  }
  /**
   * Parse paged media.
   */


  function atpage() {
    var pos = position();
    var m = match(/^@page */);
    if (!m) return;
    var sel = selector() || [];
    if (!open()) return error("@page missing '{'");
    var decls = comments(); // declarations

    var decl;

    while (decl = declaration()) {
      decls.push(decl);
      decls = decls.concat(comments());
    }

    if (!close()) return error("@page missing '}'");
    return pos({
      type: 'page',
      selectors: sel,
      declarations: decls
    });
  }
  /**
   * Parse document.
   */


  function atdocument() {
    var pos = position();
    var m = match(/^@([-\w]+)?document *([^{]+)/);
    if (!m) return;
    var vendor = trim(m[1]);
    var doc = trim(m[2]);
    if (!open()) return error("@document missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@document missing '}'");
    return pos({
      type: 'document',
      document: doc,
      vendor: vendor,
      rules: style
    });
  }
  /**
   * Parse font-face.
   */


  function atfontface() {
    var pos = position();
    var m = match(/^@font-face\s*/);
    if (!m) return;
    if (!open()) return error("@font-face missing '{'");
    var decls = comments(); // declarations

    var decl;

    while (decl = declaration()) {
      decls.push(decl);
      decls = decls.concat(comments());
    }

    if (!close()) return error("@font-face missing '}'");
    return pos({
      type: 'font-face',
      declarations: decls
    });
  }
  /**
   * Parse import
   */


  var atimport = _compileAtrule('import');
  /**
   * Parse charset
   */


  var atcharset = _compileAtrule('charset');
  /**
   * Parse namespace
   */


  var atnamespace = _compileAtrule('namespace');
  /**
   * Parse non-block at-rules
   */


  function _compileAtrule(name) {
    var re = new RegExp('^@' + name + '\\s*([^;]+);');
    return function () {
      var pos = position();
      var m = match(re);
      if (!m) return;
      var ret = {
        type: name
      };
      ret[name] = m[1].trim();
      return pos(ret);
    };
  }
  /**
   * Parse at rule.
   */


  function atrule() {
    if (css[0] != '@') return;
    return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
  }
  /**
   * Parse rule.
   */


  function rule() {
    var pos = position();
    var sel = selector();
    if (!sel) return error('selector missing');
    comments();
    return pos({
      type: 'rule',
      selectors: sel,
      declarations: declarations()
    });
  }

  return addParent(stylesheet());
};
/**
 * Trim `str`.
 */


function trim(str) {
  return str ? str.replace(/^\s+|\s+$/g, '') : '';
}
/**
 * Adds non-enumerable parent node reference to each node.
 */


function addParent(obj, parent) {
  var isNode = obj && typeof obj.type === 'string';
  var childParent = isNode ? obj : parent;

  for (var k in obj) {
    var value = obj[k];

    if (Array.isArray(value)) {
      value.forEach(function (v) {
        addParent(v, childParent);
      });
    } else if (value && typeof value === 'object') {
      addParent(value, childParent);
    }
  }

  if (isNode) {
    Object.defineProperty(obj, 'parent', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: parent || null
    });
  }

  return obj;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/css/parser.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var urlRegEx = /\s*url\((?:('|")([^\1]*)\1|([^\)]*))\)\s*/gy;

function parseURL(text, start) {
  if (start === void 0) {
    start = 0;
  }

  urlRegEx.lastIndex = start;
  var result = urlRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = urlRegEx.lastIndex;
  var value = result[2] || result[3];
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseURL = parseURL;
var hexColorRegEx = /\s*#((?:[0-9A-F]{8})|(?:[0-9A-F]{6})|(?:[0-9A-F]{3}))\s*/giy;

function parseHexColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  hexColorRegEx.lastIndex = start;
  var result = hexColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = hexColorRegEx.lastIndex;
  var hex = result[1];
  var argb;

  if (hex.length === 8) {
    argb = parseInt("0x" + hex);
  } else if (hex.length === 6) {
    argb = parseInt("0xFF" + hex);
  } else if (hex.length === 3) {
    argb = parseInt("0xFF" + hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]);
  }

  return {
    start: start,
    end: end,
    value: argb
  };
}

exports.parseHexColor = parseHexColor;

function rgbaToArgbNumber(r, g, b, a) {
  if (a === void 0) {
    a = 1;
  }

  if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255 && a >= 0 && a <= 1) {
    return Math.round(a * 0xFF) * 0x01000000 + r * 0x010000 + g * 0x000100 + b * 0x000001;
  } else {
    return null;
  }
}

var rgbColorRegEx = /\s*(rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\))/gy;

function parseRGBColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  rgbColorRegEx.lastIndex = start;
  var result = rgbColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = rgbColorRegEx.lastIndex;
  var value = result[1] && rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseRGBColor = parseRGBColor;
var rgbaColorRegEx = /\s*(rgba\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*,\s*([01]?\.?\d*)\s*\))/gy;

function parseRGBAColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  rgbaColorRegEx.lastIndex = start;
  var result = rgbaColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = rgbaColorRegEx.lastIndex;
  var value = rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]), parseFloat(result[5]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseRGBAColor = parseRGBAColor;
var colors;

(function (colors) {
  colors[colors["transparent"] = 0] = "transparent";
  colors[colors["aliceblue"] = 4293982463] = "aliceblue";
  colors[colors["antiquewhite"] = 4294634455] = "antiquewhite";
  colors[colors["aqua"] = 4278255615] = "aqua";
  colors[colors["aquamarine"] = 4286578644] = "aquamarine";
  colors[colors["azure"] = 4293984255] = "azure";
  colors[colors["beige"] = 4294309340] = "beige";
  colors[colors["bisque"] = 4294960324] = "bisque";
  colors[colors["black"] = 4278190080] = "black";
  colors[colors["blanchedalmond"] = 4294962125] = "blanchedalmond";
  colors[colors["blue"] = 4278190335] = "blue";
  colors[colors["blueviolet"] = 4287245282] = "blueviolet";
  colors[colors["brown"] = 4289014314] = "brown";
  colors[colors["burlywood"] = 4292786311] = "burlywood";
  colors[colors["cadetblue"] = 4284456608] = "cadetblue";
  colors[colors["chartreuse"] = 4286578432] = "chartreuse";
  colors[colors["chocolate"] = 4291979550] = "chocolate";
  colors[colors["coral"] = 4294934352] = "coral";
  colors[colors["cornflowerblue"] = 4284782061] = "cornflowerblue";
  colors[colors["cornsilk"] = 4294965468] = "cornsilk";
  colors[colors["crimson"] = 4292613180] = "crimson";
  colors[colors["cyan"] = 4278255615] = "cyan";
  colors[colors["darkblue"] = 4278190219] = "darkblue";
  colors[colors["darkcyan"] = 4278225803] = "darkcyan";
  colors[colors["darkgoldenrod"] = 4290283019] = "darkgoldenrod";
  colors[colors["darkgray"] = 4289309097] = "darkgray";
  colors[colors["darkgreen"] = 4278215680] = "darkgreen";
  colors[colors["darkgrey"] = 4289309097] = "darkgrey";
  colors[colors["darkkhaki"] = 4290623339] = "darkkhaki";
  colors[colors["darkmagenta"] = 4287299723] = "darkmagenta";
  colors[colors["darkolivegreen"] = 4283788079] = "darkolivegreen";
  colors[colors["darkorange"] = 4294937600] = "darkorange";
  colors[colors["darkorchid"] = 4288230092] = "darkorchid";
  colors[colors["darkred"] = 4287299584] = "darkred";
  colors[colors["darksalmon"] = 4293498490] = "darksalmon";
  colors[colors["darkseagreen"] = 4287609999] = "darkseagreen";
  colors[colors["darkslateblue"] = 4282924427] = "darkslateblue";
  colors[colors["darkslategray"] = 4281290575] = "darkslategray";
  colors[colors["darkslategrey"] = 4281290575] = "darkslategrey";
  colors[colors["darkturquoise"] = 4278243025] = "darkturquoise";
  colors[colors["darkviolet"] = 4287889619] = "darkviolet";
  colors[colors["deeppink"] = 4294907027] = "deeppink";
  colors[colors["deepskyblue"] = 4278239231] = "deepskyblue";
  colors[colors["dimgray"] = 4285098345] = "dimgray";
  colors[colors["dimgrey"] = 4285098345] = "dimgrey";
  colors[colors["dodgerblue"] = 4280193279] = "dodgerblue";
  colors[colors["firebrick"] = 4289864226] = "firebrick";
  colors[colors["floralwhite"] = 4294966000] = "floralwhite";
  colors[colors["forestgreen"] = 4280453922] = "forestgreen";
  colors[colors["fuchsia"] = 4294902015] = "fuchsia";
  colors[colors["gainsboro"] = 4292664540] = "gainsboro";
  colors[colors["ghostwhite"] = 4294506751] = "ghostwhite";
  colors[colors["gold"] = 4294956800] = "gold";
  colors[colors["goldenrod"] = 4292519200] = "goldenrod";
  colors[colors["gray"] = 4286611584] = "gray";
  colors[colors["green"] = 4278222848] = "green";
  colors[colors["greenyellow"] = 4289593135] = "greenyellow";
  colors[colors["grey"] = 4286611584] = "grey";
  colors[colors["honeydew"] = 4293984240] = "honeydew";
  colors[colors["hotpink"] = 4294928820] = "hotpink";
  colors[colors["indianred"] = 4291648604] = "indianred";
  colors[colors["indigo"] = 4283105410] = "indigo";
  colors[colors["ivory"] = 4294967280] = "ivory";
  colors[colors["khaki"] = 4293977740] = "khaki";
  colors[colors["lavender"] = 4293322490] = "lavender";
  colors[colors["lavenderblush"] = 4294963445] = "lavenderblush";
  colors[colors["lawngreen"] = 4286381056] = "lawngreen";
  colors[colors["lemonchiffon"] = 4294965965] = "lemonchiffon";
  colors[colors["lightblue"] = 4289583334] = "lightblue";
  colors[colors["lightcoral"] = 4293951616] = "lightcoral";
  colors[colors["lightcyan"] = 4292935679] = "lightcyan";
  colors[colors["lightgoldenrodyellow"] = 4294638290] = "lightgoldenrodyellow";
  colors[colors["lightgray"] = 4292072403] = "lightgray";
  colors[colors["lightgreen"] = 4287688336] = "lightgreen";
  colors[colors["lightgrey"] = 4292072403] = "lightgrey";
  colors[colors["lightpink"] = 4294948545] = "lightpink";
  colors[colors["lightsalmon"] = 4294942842] = "lightsalmon";
  colors[colors["lightseagreen"] = 4280332970] = "lightseagreen";
  colors[colors["lightskyblue"] = 4287090426] = "lightskyblue";
  colors[colors["lightslategray"] = 4286023833] = "lightslategray";
  colors[colors["lightslategrey"] = 4286023833] = "lightslategrey";
  colors[colors["lightsteelblue"] = 4289774814] = "lightsteelblue";
  colors[colors["lightyellow"] = 4294967264] = "lightyellow";
  colors[colors["lime"] = 4278255360] = "lime";
  colors[colors["limegreen"] = 4281519410] = "limegreen";
  colors[colors["linen"] = 4294635750] = "linen";
  colors[colors["magenta"] = 4294902015] = "magenta";
  colors[colors["maroon"] = 4286578688] = "maroon";
  colors[colors["mediumaquamarine"] = 4284927402] = "mediumaquamarine";
  colors[colors["mediumblue"] = 4278190285] = "mediumblue";
  colors[colors["mediumorchid"] = 4290401747] = "mediumorchid";
  colors[colors["mediumpurple"] = 4287852763] = "mediumpurple";
  colors[colors["mediumseagreen"] = 4282168177] = "mediumseagreen";
  colors[colors["mediumslateblue"] = 4286277870] = "mediumslateblue";
  colors[colors["mediumspringgreen"] = 4278254234] = "mediumspringgreen";
  colors[colors["mediumturquoise"] = 4282962380] = "mediumturquoise";
  colors[colors["mediumvioletred"] = 4291237253] = "mediumvioletred";
  colors[colors["midnightblue"] = 4279834992] = "midnightblue";
  colors[colors["mintcream"] = 4294311930] = "mintcream";
  colors[colors["mistyrose"] = 4294960353] = "mistyrose";
  colors[colors["moccasin"] = 4294960309] = "moccasin";
  colors[colors["navajowhite"] = 4294958765] = "navajowhite";
  colors[colors["navy"] = 4278190208] = "navy";
  colors[colors["oldlace"] = 4294833638] = "oldlace";
  colors[colors["olive"] = 4286611456] = "olive";
  colors[colors["olivedrab"] = 4285238819] = "olivedrab";
  colors[colors["orange"] = 4294944000] = "orange";
  colors[colors["orangered"] = 4294919424] = "orangered";
  colors[colors["orchid"] = 4292505814] = "orchid";
  colors[colors["palegoldenrod"] = 4293847210] = "palegoldenrod";
  colors[colors["palegreen"] = 4288215960] = "palegreen";
  colors[colors["paleturquoise"] = 4289720046] = "paleturquoise";
  colors[colors["palevioletred"] = 4292571283] = "palevioletred";
  colors[colors["papayawhip"] = 4294963157] = "papayawhip";
  colors[colors["peachpuff"] = 4294957753] = "peachpuff";
  colors[colors["peru"] = 4291659071] = "peru";
  colors[colors["pink"] = 4294951115] = "pink";
  colors[colors["plum"] = 4292714717] = "plum";
  colors[colors["powderblue"] = 4289781990] = "powderblue";
  colors[colors["purple"] = 4286578816] = "purple";
  colors[colors["rebeccapurple"] = 4284887961] = "rebeccapurple";
  colors[colors["red"] = 4294901760] = "red";
  colors[colors["rosybrown"] = 4290547599] = "rosybrown";
  colors[colors["royalblue"] = 4282477025] = "royalblue";
  colors[colors["saddlebrown"] = 4287317267] = "saddlebrown";
  colors[colors["salmon"] = 4294606962] = "salmon";
  colors[colors["sandybrown"] = 4294222944] = "sandybrown";
  colors[colors["seagreen"] = 4281240407] = "seagreen";
  colors[colors["seashell"] = 4294964718] = "seashell";
  colors[colors["sienna"] = 4288696877] = "sienna";
  colors[colors["silver"] = 4290822336] = "silver";
  colors[colors["skyblue"] = 4287090411] = "skyblue";
  colors[colors["slateblue"] = 4285160141] = "slateblue";
  colors[colors["slategray"] = 4285563024] = "slategray";
  colors[colors["slategrey"] = 4285563024] = "slategrey";
  colors[colors["snow"] = 4294966010] = "snow";
  colors[colors["springgreen"] = 4278255487] = "springgreen";
  colors[colors["steelblue"] = 4282811060] = "steelblue";
  colors[colors["tan"] = 4291998860] = "tan";
  colors[colors["teal"] = 4278222976] = "teal";
  colors[colors["thistle"] = 4292394968] = "thistle";
  colors[colors["tomato"] = 4294927175] = "tomato";
  colors[colors["turquoise"] = 4282441936] = "turquoise";
  colors[colors["violet"] = 4293821166] = "violet";
  colors[colors["wheat"] = 4294303411] = "wheat";
  colors[colors["white"] = 4294967295] = "white";
  colors[colors["whitesmoke"] = 4294309365] = "whitesmoke";
  colors[colors["yellow"] = 4294967040] = "yellow";
  colors[colors["yellowgreen"] = 4288335154] = "yellowgreen";
})(colors = exports.colors || (exports.colors = {}));

;

function parseColorKeyword(value, start, keyword) {
  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  if (keyword && keyword.value in colors) {
    var end = keyword.end;
    var value_1 = colors[keyword.value];
    return {
      start: start,
      end: end,
      value: value_1
    };
  }

  return null;
}

exports.parseColorKeyword = parseColorKeyword;

function parseColor(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  return parseHexColor(value, start) || parseColorKeyword(value, start, keyword) || parseRGBColor(value, start) || parseRGBAColor(value, start);
}

exports.parseColor = parseColor;
var keywordRegEx = /\s*([a-z][\w\-]*)\s*/giy;

function parseKeyword(text, start) {
  if (start === void 0) {
    start = 0;
  }

  keywordRegEx.lastIndex = start;
  var result = keywordRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = keywordRegEx.lastIndex;
  var value = result[1];
  return {
    start: start,
    end: end,
    value: value
  };
}

var backgroundRepeatKeywords = new Set(["repeat", "repeat-x", "repeat-y", "no-repeat"]);

function parseRepeat(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  if (keyword && backgroundRepeatKeywords.has(keyword.value)) {
    var end = keyword.end;
    var value_2 = keyword.value;
    return {
      start: start,
      end: end,
      value: value_2
    };
  }

  return null;
}

exports.parseRepeat = parseRepeat;
var unitRegEx = /\s*([\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?)([a-zA-Z]+|%)?\s*/gy;

function parseUnit(text, start) {
  if (start === void 0) {
    start = 0;
  }

  unitRegEx.lastIndex = start;
  var result = unitRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = unitRegEx.lastIndex;
  var value = parseFloat(result[1]);
  var unit = result[2] || "dip";
  return {
    start: start,
    end: end,
    value: {
      value: value,
      unit: unit
    }
  };
}

exports.parseUnit = parseUnit;

function parsePercentageOrLength(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var unitResult = parseUnit(text, start);

  if (unitResult) {
    var start_1 = unitResult.start,
        end = unitResult.end;
    var value = unitResult.value;

    if (value.unit === "%") {
      value.value /= 100;
    } else if (!value.unit) {
      value.unit = "dip";
    } else if (value.unit === "px" || value.unit === "dip") {} else {
      return null;
    }

    return {
      start: start_1,
      end: end,
      value: value
    };
  }

  return null;
}

exports.parsePercentageOrLength = parsePercentageOrLength;
var angleUnitsToRadMap = {
  "deg": function (start, end, deg) {
    return {
      start: start,
      end: end,
      value: deg / 180 * Math.PI
    };
  },
  "rad": function (start, end, rad) {
    return {
      start: start,
      end: end,
      value: rad
    };
  },
  "grad": function (start, end, grad) {
    return {
      start: start,
      end: end,
      value: grad / 200 * Math.PI
    };
  },
  "turn": function (start, end, turn) {
    return {
      start: start,
      end: end,
      value: turn * Math.PI * 2
    };
  }
};

function parseAngle(value, start) {
  if (start === void 0) {
    start = 0;
  }

  var angleResult = parseUnit(value, start);

  if (angleResult) {
    var start_2 = angleResult.start,
        end = angleResult.end,
        value_3 = angleResult.value;
    return (angleUnitsToRadMap[value_3.unit] || function (_, __, ___) {
      return null;
    })(start_2, end, value_3.value);
  }

  return null;
}

exports.parseAngle = parseAngle;
var backgroundSizeKeywords = new Set(["auto", "contain", "cover"]);

function parseBackgroundSize(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  var end = start;

  if (keyword && backgroundSizeKeywords.has(keyword.value)) {
    end = keyword.end;
    var value_4 = keyword.value;
    return {
      start: start,
      end: end,
      value: value_4
    };
  }

  var firstLength = parsePercentageOrLength(value, end);

  if (firstLength) {
    end = firstLength.end;
    var secondLength = parsePercentageOrLength(value, firstLength.end);

    if (secondLength) {
      end = secondLength.end;
      return {
        start: start,
        end: end,
        value: {
          x: firstLength.value,
          y: secondLength.value
        }
      };
    } else {
      return {
        start: start,
        end: end,
        value: {
          x: firstLength.value,
          y: "auto"
        }
      };
    }
  }

  return null;
}

exports.parseBackgroundSize = parseBackgroundSize;
var backgroundPositionKeywords = Object.freeze(new Set(["left", "right", "top", "bottom", "center"]));
var backgroundPositionKeywordsDirection = {
  "left": "x",
  "right": "x",
  "center": "center",
  "top": "y",
  "bottom": "y"
};

function parseBackgroundPosition(text, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(text, start);
  }

  function formatH(align, offset) {
    if (align.value === "center") {
      return "center";
    }

    if (offset && offset.value.value !== 0) {
      return {
        align: align.value,
        offset: offset.value
      };
    }

    return align.value;
  }

  function formatV(align, offset) {
    if (align.value === "center") {
      return "center";
    }

    if (offset && offset.value.value !== 0) {
      return {
        align: align.value,
        offset: offset.value
      };
    }

    return align.value;
  }

  var end = start;

  if (keyword && backgroundPositionKeywords.has(keyword.value)) {
    end = keyword.end;
    var firstDirection = backgroundPositionKeywordsDirection[keyword.value];
    var firstLength = firstDirection !== "center" && parsePercentageOrLength(text, end);

    if (firstLength) {
      end = firstLength.end;
    }

    var secondKeyword = parseKeyword(text, end);

    if (secondKeyword && backgroundPositionKeywords.has(secondKeyword.value)) {
      end = secondKeyword.end;
      var secondDirection = backgroundPositionKeywordsDirection[secondKeyword.end];

      if (firstDirection === secondDirection && firstDirection !== "center") {
        return null;
      }

      var secondLength = secondDirection !== "center" && parsePercentageOrLength(text, end);

      if (secondLength) {
        end = secondLength.end;
      }

      if (firstDirection === secondDirection && secondDirection === "center" || firstDirection === "x" || secondDirection === "y") {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(keyword, firstLength),
            y: formatV(secondKeyword, secondLength)
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(secondKeyword, secondLength),
            y: formatV(keyword, firstLength)
          }
        };
      }
    } else {
      if (firstDirection === "center") {
        return {
          start: start,
          end: end,
          value: {
            x: "center",
            y: "center"
          }
        };
      } else if (firstDirection === "x") {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(keyword, firstLength),
            y: "center"
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: "center",
            y: formatV(keyword, firstLength)
          }
        };
      }
    }
  } else {
    var firstLength = parsePercentageOrLength(text, end);

    if (firstLength) {
      end = firstLength.end;
      var secondLength = parsePercentageOrLength(text, end);

      if (secondLength) {
        end = secondLength.end;
        return {
          start: start,
          end: end,
          value: {
            x: {
              align: "left",
              offset: firstLength.value
            },
            y: {
              align: "top",
              offset: secondLength.value
            }
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: {
              align: "left",
              offset: firstLength.value
            },
            y: "center"
          }
        };
      }
    } else {
      return null;
    }
  }
}

exports.parseBackgroundPosition = parseBackgroundPosition;
var directionRegEx = /\s*to\s*(left|right|top|bottom)\s*(left|right|top|bottom)?\s*/gy;
var sideDirections = {
  top: Math.PI * 0 / 2,
  right: Math.PI * 1 / 2,
  bottom: Math.PI * 2 / 2,
  left: Math.PI * 3 / 2
};
var cornerDirections = {
  top: {
    right: Math.PI * 1 / 4,
    left: Math.PI * 7 / 4
  },
  right: {
    top: Math.PI * 1 / 4,
    bottom: Math.PI * 3 / 4
  },
  bottom: {
    right: Math.PI * 3 / 4,
    left: Math.PI * 5 / 4
  },
  left: {
    top: Math.PI * 7 / 4,
    bottom: Math.PI * 5 / 4
  }
};

function parseDirection(text, start) {
  if (start === void 0) {
    start = 0;
  }

  directionRegEx.lastIndex = start;
  var result = directionRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = directionRegEx.lastIndex;
  var firstDirection = result[1];

  if (result[2]) {
    var secondDirection = result[2];
    var value = cornerDirections[firstDirection][secondDirection];
    return value === undefined ? null : {
      start: start,
      end: end,
      value: value
    };
  } else {
    return {
      start: start,
      end: end,
      value: sideDirections[firstDirection]
    };
  }
}

var openingBracketRegEx = /\s*\(\s*/gy;
var closingBracketRegEx = /\s*\)\s*/gy;
var closingBracketOrCommaRegEx = /\s*(\)|,)\s*/gy;

function parseArgumentsList(text, start, argument) {
  openingBracketRegEx.lastIndex = start;
  var openingBracket = openingBracketRegEx.exec(text);

  if (!openingBracket) {
    return null;
  }

  var end = openingBracketRegEx.lastIndex;
  var value = [];
  closingBracketRegEx.lastIndex = end;
  var closingBracket = closingBracketRegEx.exec(text);

  if (closingBracket) {
    return {
      start: start,
      end: end,
      value: value
    };
  }

  for (var index = 0; true; index++) {
    var arg = argument(text, end, index);

    if (!arg) {
      return null;
    }

    end = arg.end;
    value.push(arg);
    closingBracketOrCommaRegEx.lastIndex = end;
    var closingBracketOrComma = closingBracketOrCommaRegEx.exec(text);

    if (closingBracketOrComma) {
      end = closingBracketOrCommaRegEx.lastIndex;

      if (closingBracketOrComma[1] === ",") {
        continue;
      } else if (closingBracketOrComma[1] === ")") {
        return {
          start: start,
          end: end,
          value: value
        };
      }
    } else {
      return null;
    }
  }
}

function parseColorStop(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var color = parseColor(text, start);

  if (!color) {
    return null;
  }

  var end = color.end;
  var offset = parsePercentageOrLength(text, end);

  if (offset) {
    end = offset.end;
    return {
      start: start,
      end: end,
      value: {
        argb: color.value,
        offset: offset.value
      }
    };
  }

  return {
    start: start,
    end: end,
    value: {
      argb: color.value
    }
  };
}

exports.parseColorStop = parseColorStop;
var linearGradientStartRegEx = /\s*linear-gradient\s*/gy;

function parseLinearGradient(text, start) {
  if (start === void 0) {
    start = 0;
  }

  linearGradientStartRegEx.lastIndex = start;
  var lgs = linearGradientStartRegEx.exec(text);

  if (!lgs) {
    return null;
  }

  var end = linearGradientStartRegEx.lastIndex;
  var angle = Math.PI;
  var colors = [];
  var parsedArgs = parseArgumentsList(text, end, function (text, start, index) {
    if (index === 0) {
      var angleArg = parseAngle(text, start) || parseDirection(text, start);

      if (angleArg) {
        angle = angleArg.value;
        return angleArg;
      }
    }

    var colorStop = parseColorStop(text, start);

    if (colorStop) {
      colors.push(colorStop.value);
      return colorStop;
    }

    return null;
  });

  if (!parsedArgs) {
    return null;
  }

  end = parsedArgs.end;
  return {
    start: start,
    end: end,
    value: {
      angle: angle,
      colors: colors
    }
  };
}

exports.parseLinearGradient = parseLinearGradient;
var slashRegEx = /\s*(\/)\s*/gy;

function parseSlash(text, start) {
  slashRegEx.lastIndex = start;
  var slash = slashRegEx.exec(text);

  if (!slash) {
    return null;
  }

  var end = slashRegEx.lastIndex;
  return {
    start: start,
    end: end,
    value: "/"
  };
}

function parseBackground(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var value = {};
  var end = start;

  while (end < text.length) {
    var keyword = parseKeyword(text, end);
    var color = parseColor(text, end, keyword);

    if (color) {
      value.color = color.value;
      end = color.end;
      continue;
    }

    var repeat = parseRepeat(text, end, keyword);

    if (repeat) {
      value.repeat = repeat.value;
      end = repeat.end;
      continue;
    }

    var position = parseBackgroundPosition(text, end, keyword);

    if (position) {
      position.value.text = text.substring(position.start, position.end);
      value.position = position.value;
      end = position.end;
      var slash = parseSlash(text, end);

      if (slash) {
        end = slash.end;
        var size = parseBackgroundSize(text, end);

        if (!size) {
          return null;
        }

        value.size = size.value;
        end = size.end;
      }

      continue;
    }

    var url = parseURL(text, end);

    if (url) {
      value.image = url.value;
      end = url.end;
      continue;
    }

    var gradient = parseLinearGradient(text, end);

    if (gradient) {
      value.image = gradient.value;
      end = gradient.end;
      continue;
    }

    return null;
  }

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseBackground = parseBackground;
var universalSelectorRegEx = /\*/gy;

function parseUniversalSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  universalSelectorRegEx.lastIndex = start;
  var result = universalSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = universalSelectorRegEx.lastIndex;
  return {
    start: start,
    end: end,
    value: {
      type: "*"
    }
  };
}

exports.parseUniversalSelector = parseUniversalSelector;
var simpleIdentifierSelectorRegEx = /(#|\.|:|\b)([_-\w][_-\w\d]*)/gy;

function parseSimpleIdentifierSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  simpleIdentifierSelectorRegEx.lastIndex = start;
  var result = simpleIdentifierSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = simpleIdentifierSelectorRegEx.lastIndex;
  var type = result[1];
  var identifier = result[2];
  var value = {
    type: type,
    identifier: identifier
  };
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSimpleIdentifierSelector = parseSimpleIdentifierSelector;
var attributeSelectorRegEx = /\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\]/gy;

function parseAttributeSelector(text, start) {
  attributeSelectorRegEx.lastIndex = start;
  var result = attributeSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = attributeSelectorRegEx.lastIndex;
  var property = result[1];

  if (result[2]) {
    var test_1 = result[2];
    var value = result[3] || result[4] || result[5];
    return {
      start: start,
      end: end,
      value: {
        type: "[]",
        property: property,
        test: test_1,
        value: value
      }
    };
  }

  return {
    start: start,
    end: end,
    value: {
      type: "[]",
      property: property
    }
  };
}

exports.parseAttributeSelector = parseAttributeSelector;

function parseSimpleSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  return parseUniversalSelector(text, start) || parseSimpleIdentifierSelector(text, start) || parseAttributeSelector(text, start);
}

exports.parseSimpleSelector = parseSimpleSelector;

function parseSimpleSelectorSequence(text, start) {
  var simpleSelector = parseSimpleSelector(text, start);

  if (!simpleSelector) {
    return null;
  }

  var end = simpleSelector.end;
  var value = [];

  while (simpleSelector) {
    value.push(simpleSelector.value);
    end = simpleSelector.end;
    simpleSelector = parseSimpleSelector(text, end);
  }

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSimpleSelectorSequence = parseSimpleSelectorSequence;
var combinatorRegEx = /\s*(\+|~|>)?\s*/gy;

function parseCombinator(text, start) {
  if (start === void 0) {
    start = 0;
  }

  combinatorRegEx.lastIndex = start;
  var result = combinatorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = combinatorRegEx.lastIndex;
  var value = result[1] || " ";
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseCombinator = parseCombinator;
var whiteSpaceRegEx = /\s*/gy;

function parseSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var end = start;
  whiteSpaceRegEx.lastIndex = end;
  var leadingWhiteSpace = whiteSpaceRegEx.exec(text);

  if (leadingWhiteSpace) {
    end = whiteSpaceRegEx.lastIndex;
  }

  var value = [];
  var combinator;
  var expectSimpleSelector = true;
  var pair;

  do {
    var simpleSelectorSequence = parseSimpleSelectorSequence(text, end);

    if (!simpleSelectorSequence) {
      if (expectSimpleSelector) {
        return null;
      } else {
        break;
      }
    }

    end = simpleSelectorSequence.end;

    if (combinator) {
      pair[1] = combinator.value;
    }

    pair = [simpleSelectorSequence.value, undefined];
    value.push(pair);
    combinator = parseCombinator(text, end);

    if (combinator) {
      end = combinator.end;
    }

    expectSimpleSelector = combinator && combinator.value !== " ";
  } while (combinator);

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSelector = parseSelector;
var whitespaceRegEx = /[\s\t\n\r\f]*/gym;
var singleQuoteStringRegEx = /'((?:[^\n\r\f\']|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?'|$)/gym;
var doubleQuoteStringRegEx = /"((?:[^\n\r\f\"]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?"|$)/gym;
var commentRegEx = /(\/\*(?:[^\*]|\*[^\/])*\*\/)/gym;
var numberRegEx = /[\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?/gym;
var nameRegEx = /-?(?:(?:[a-zA-Z_]|[^\x00-\x7F]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))(?:[a-zA-Z_0-9\-]*|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)/gym;

var CSS3Parser = function () {
  function CSS3Parser(text) {
    this.text = text;
    this.nextInputCodePointIndex = 0;
  }

  CSS3Parser.prototype.tokenize = function () {
    var tokens = [];
    var inputToken;

    do {
      inputToken = this.consumeAToken();
      tokens.push(inputToken);
    } while (inputToken);

    return tokens;
  };

  CSS3Parser.prototype.consumeAToken = function () {
    if (this.reconsumedInputToken) {
      var result = this.reconsumedInputToken;
      this.reconsumedInputToken = null;
      return result;
    }

    var char = this.text[this.nextInputCodePointIndex];

    switch (char) {
      case "\"":
        return this.consumeAStringToken();

      case "'":
        return this.consumeAStringToken();

      case "(":
      case ")":
      case ",":
      case ":":
      case ";":
      case "[":
      case "]":
      case "{":
      case "}":
        this.nextInputCodePointIndex++;
        return char;

      case "#":
        return this.consumeAHashToken() || this.consumeADelimToken();

      case " ":
      case "\t":
      case "\n":
      case "\r":
      case "\f":
        return this.consumeAWhitespace();

      case "@":
        return this.consumeAtKeyword() || this.consumeADelimToken();

      case "\\":
        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();

      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        return this.consumeANumericToken();

      case "u":
      case "U":
        if (this.text[this.nextInputCodePointIndex + 1] === "+") {
          var thirdChar = this.text[this.nextInputCodePointIndex + 2];

          if (thirdChar >= "0" && thirdChar <= "9" || thirdChar === "?") {
            throw new Error("Unicode tokens not supported!");
          }
        }

        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();

      case "$":
      case "*":
      case "^":
      case "|":
      case "~":
        return this.consumeAMatchToken() || this.consumeADelimToken();

      case "-":
        return this.consumeANumericToken() || this.consumeAnIdentLikeToken() || this.consumeCDC() || this.consumeADelimToken();

      case "+":
      case ".":
        return this.consumeANumericToken() || this.consumeADelimToken();

      case "/":
        return this.consumeAComment() || this.consumeADelimToken();

      case "<":
        return this.consumeCDO() || this.consumeADelimToken();

      case undefined:
        return undefined;

      default:
        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();
    }
  };

  CSS3Parser.prototype.consumeADelimToken = function () {
    return {
      type: 2,
      text: this.text[this.nextInputCodePointIndex++]
    };
  };

  CSS3Parser.prototype.consumeAWhitespace = function () {
    whitespaceRegEx.lastIndex = this.nextInputCodePointIndex;
    whitespaceRegEx.exec(this.text);
    this.nextInputCodePointIndex = whitespaceRegEx.lastIndex;
    return " ";
  };

  CSS3Parser.prototype.consumeAHashToken = function () {
    this.nextInputCodePointIndex++;
    var hashName = this.consumeAName();

    if (hashName) {
      return {
        type: 12,
        text: "#" + hashName.text
      };
    }

    this.nextInputCodePointIndex--;
    return null;
  };

  CSS3Parser.prototype.consumeCDO = function () {
    if (this.text.substr(this.nextInputCodePointIndex, 4) === "<!--") {
      this.nextInputCodePointIndex += 4;
      return "<!--";
    }

    return null;
  };

  CSS3Parser.prototype.consumeCDC = function () {
    if (this.text.substr(this.nextInputCodePointIndex, 3) === "-->") {
      this.nextInputCodePointIndex += 3;
      return "-->";
    }

    return null;
  };

  CSS3Parser.prototype.consumeAMatchToken = function () {
    if (this.text[this.nextInputCodePointIndex + 1] === "=") {
      var token = this.text.substr(this.nextInputCodePointIndex, 2);
      this.nextInputCodePointIndex += 2;
      return token;
    }

    return null;
  };

  CSS3Parser.prototype.consumeANumericToken = function () {
    numberRegEx.lastIndex = this.nextInputCodePointIndex;
    var result = numberRegEx.exec(this.text);

    if (!result) {
      return null;
    }

    this.nextInputCodePointIndex = numberRegEx.lastIndex;

    if (this.text[this.nextInputCodePointIndex] === "%") {
      return {
        type: 4,
        text: result[0]
      };
    }

    var name = this.consumeAName();

    if (name) {
      return {
        type: 5,
        text: result[0] + name.text
      };
    }

    return {
      type: 3,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAnIdentLikeToken = function () {
    var name = this.consumeAName();

    if (!name) {
      return null;
    }

    if (this.text[this.nextInputCodePointIndex] === "(") {
      this.nextInputCodePointIndex++;

      if (name.text.toLowerCase() === "url") {
        return this.consumeAURLToken();
      }

      return {
        type: 8,
        name: name.text,
        text: name.text + "("
      };
    }

    return name;
  };

  CSS3Parser.prototype.consumeAStringToken = function () {
    var char = this.text[this.nextInputCodePointIndex];
    var result;

    if (char === "'") {
      singleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
      result = singleQuoteStringRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = singleQuoteStringRegEx.lastIndex;
    } else if (char === "\"") {
      doubleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
      result = doubleQuoteStringRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = doubleQuoteStringRegEx.lastIndex;
    }

    return {
      type: 1,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAURLToken = function () {
    var start = this.nextInputCodePointIndex - 3 - 1;
    var urlToken = {
      type: 7,
      text: undefined
    };
    this.consumeAWhitespace();

    if (this.nextInputCodePointIndex >= this.text.length) {
      return urlToken;
    }

    var nextInputCodePoint = this.text[this.nextInputCodePointIndex];

    if (nextInputCodePoint === "\"" || nextInputCodePoint === "'") {
      var stringToken = this.consumeAStringToken();
      urlToken.text = stringToken.text;
      this.consumeAWhitespace();

      if (this.text[this.nextInputCodePointIndex] === ")" || this.nextInputCodePointIndex >= this.text.length) {
        this.nextInputCodePointIndex++;
        var end = this.nextInputCodePointIndex;
        urlToken.text = this.text.substring(start, end);
        return urlToken;
      } else {
        return null;
      }
    }

    while (this.nextInputCodePointIndex < this.text.length) {
      var char = this.text[this.nextInputCodePointIndex++];

      switch (char) {
        case ")":
          return urlToken;

        case " ":
        case "\t":
        case "\n":
        case "\r":
        case "\f":
          this.consumeAWhitespace();

          if (this.text[this.nextInputCodePointIndex] === ")") {
            this.nextInputCodePointIndex++;
            return urlToken;
          } else {
            return null;
          }

        case "\"":
        case "\'":
          return null;

        case "\\":
          throw new Error("Escaping not yet supported!");

        default:
          urlToken.text += char;
      }
    }

    return urlToken;
  };

  CSS3Parser.prototype.consumeAName = function () {
    nameRegEx.lastIndex = this.nextInputCodePointIndex;
    var result = nameRegEx.exec(this.text);

    if (!result) {
      return null;
    }

    this.nextInputCodePointIndex = nameRegEx.lastIndex;
    return {
      type: 6,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAtKeyword = function () {
    this.nextInputCodePointIndex++;
    var name = this.consumeAName();

    if (name) {
      return {
        type: 11,
        text: name.text
      };
    }

    this.nextInputCodePointIndex--;
    return null;
  };

  CSS3Parser.prototype.consumeAComment = function () {
    if (this.text[this.nextInputCodePointIndex + 1] === "*") {
      commentRegEx.lastIndex = this.nextInputCodePointIndex;
      var result = commentRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = commentRegEx.lastIndex;
      return this.consumeAToken();
    }

    return null;
  };

  CSS3Parser.prototype.reconsumeTheCurrentInputToken = function (currentInputToken) {
    this.reconsumedInputToken = currentInputToken;
  };

  CSS3Parser.prototype.parseAStylesheet = function () {
    this.topLevelFlag = true;
    var stylesheet = {
      rules: this.consumeAListOfRules()
    };
    return stylesheet;
  };

  CSS3Parser.prototype.consumeAListOfRules = function () {
    var rules = [];
    var inputToken;

    while (inputToken = this.consumeAToken()) {
      switch (inputToken) {
        case " ":
          continue;

        case "<!--":
        case "-->":
          if (this.topLevelFlag) {
            continue;
          }

          this.reconsumeTheCurrentInputToken(inputToken);
          var atRule = this.consumeAnAtRule();

          if (atRule) {
            rules.push(atRule);
          }

          continue;
      }

      if (inputToken.type === 11) {
        this.reconsumeTheCurrentInputToken(inputToken);
        var atRule = this.consumeAnAtRule();

        if (atRule) {
          rules.push(atRule);
        }

        continue;
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var qualifiedRule = this.consumeAQualifiedRule();

      if (qualifiedRule) {
        rules.push(qualifiedRule);
      }
    }

    return rules;
  };

  CSS3Parser.prototype.consumeAnAtRule = function () {
    var inputToken = this.consumeAToken();
    var atRule = {
      type: "at-rule",
      name: inputToken.text,
      prelude: [],
      block: undefined
    };

    while (inputToken = this.consumeAToken()) {
      if (inputToken === ";") {
        return atRule;
      } else if (inputToken === "{") {
        atRule.block = this.consumeASimpleBlock(inputToken);
        return atRule;
      } else if (inputToken.type === 9 && inputToken.associatedToken === "{") {
        atRule.block = inputToken;
        return atRule;
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var component = this.consumeAComponentValue();

      if (component) {
        atRule.prelude.push(component);
      }
    }

    return atRule;
  };

  CSS3Parser.prototype.consumeAQualifiedRule = function () {
    var qualifiedRule = {
      type: "qualified-rule",
      prelude: [],
      block: undefined
    };
    var inputToken;

    while (inputToken = this.consumeAToken()) {
      if (inputToken === "{") {
        var block = this.consumeASimpleBlock(inputToken);
        qualifiedRule.block = block;
        return qualifiedRule;
      } else if (inputToken.type === 9) {
        var simpleBlock = inputToken;

        if (simpleBlock.associatedToken === "{") {
          qualifiedRule.block = simpleBlock;
          return qualifiedRule;
        }
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var componentValue = this.consumeAComponentValue();

      if (componentValue) {
        qualifiedRule.prelude.push(componentValue);
      }
    }

    return null;
  };

  CSS3Parser.prototype.consumeAComponentValue = function () {
    var inputToken = this.consumeAToken();

    switch (inputToken) {
      case "{":
      case "[":
      case "(":
        this.nextInputCodePointIndex++;
        return this.consumeASimpleBlock(inputToken);
    }

    if (typeof inputToken === "object" && inputToken.type === 8) {
      return this.consumeAFunction(inputToken.name);
    }

    return inputToken;
  };

  CSS3Parser.prototype.consumeASimpleBlock = function (associatedToken) {
    var endianToken = {
      "[": "]",
      "{": "}",
      "(": ")"
    }[associatedToken];
    var start = this.nextInputCodePointIndex - 1;
    var block = {
      type: 9,
      text: undefined,
      associatedToken: associatedToken,
      values: []
    };
    var nextInputToken;

    while (nextInputToken = this.text[this.nextInputCodePointIndex]) {
      if (nextInputToken === endianToken) {
        this.nextInputCodePointIndex++;
        var end = this.nextInputCodePointIndex;
        block.text = this.text.substring(start, end);
        return block;
      }

      var value = this.consumeAComponentValue();

      if (value) {
        block.values.push(value);
      }
    }

    block.text = this.text.substring(start);
    return block;
  };

  CSS3Parser.prototype.consumeAFunction = function (name) {
    var start = this.nextInputCodePointIndex;
    var funcToken = {
      type: 14,
      name: name,
      text: undefined,
      components: []
    };

    do {
      if (this.nextInputCodePointIndex >= this.text.length) {
        funcToken.text = name + "(" + this.text.substring(start);
        return funcToken;
      }

      var nextInputToken = this.text[this.nextInputCodePointIndex];

      switch (nextInputToken) {
        case ")":
          this.nextInputCodePointIndex++;
          var end = this.nextInputCodePointIndex;
          funcToken.text = name + "(" + this.text.substring(start, end);
          return funcToken;

        default:
          var component = this.consumeAComponentValue();

          if (component) {
            funcToken.components.push(component);
          }

      }
    } while (true);
  };

  return CSS3Parser;
}();

exports.CSS3Parser = CSS3Parser;

var CSSNativeScript = function () {
  function CSSNativeScript() {}

  CSSNativeScript.prototype.parseStylesheet = function (stylesheet) {
    return {
      type: "stylesheet",
      stylesheet: {
        rules: this.parseRules(stylesheet.rules)
      }
    };
  };

  CSSNativeScript.prototype.parseRules = function (rules) {
    var _this = this;

    return rules.map(function (rule) {
      return _this.parseRule(rule);
    });
  };

  CSSNativeScript.prototype.parseRule = function (rule) {
    if (rule.type === "at-rule") {
      return this.parseAtRule(rule);
    } else if (rule.type === "qualified-rule") {
      return this.parseQualifiedRule(rule);
    }
  };

  CSSNativeScript.prototype.parseAtRule = function (rule) {
    if (rule.name === "import") {
      return {
        import: rule.prelude.map(function (m) {
          return typeof m === "string" ? m : m.text;
        }).join("").trim(),
        type: "import"
      };
    }

    return;
  };

  CSSNativeScript.prototype.parseQualifiedRule = function (rule) {
    return {
      type: "rule",
      selectors: this.preludeToSelectorsStringArray(rule.prelude),
      declarations: this.ruleBlockToDeclarations(rule.block.values)
    };
  };

  CSSNativeScript.prototype.ruleBlockToDeclarations = function (declarationsInputTokens) {
    var declarations = [];
    var property = "";
    var value = "";
    var reading = "property";

    for (var i = 0; i < declarationsInputTokens.length; i++) {
      var inputToken = declarationsInputTokens[i];

      if (reading === "property") {
        if (inputToken === ":") {
          reading = "value";
        } else if (typeof inputToken === "string") {
          property += inputToken;
        } else {
          property += inputToken.text;
        }
      } else {
        if (inputToken === ";") {
          property = property.trim();
          value = value.trim();
          declarations.push({
            type: "declaration",
            property: property,
            value: value
          });
          property = "";
          value = "";
          reading = "property";
        } else if (typeof inputToken === "string") {
          value += inputToken;
        } else {
          value += inputToken.text;
        }
      }
    }

    property = property.trim();
    value = value.trim();

    if (property || value) {
      declarations.push({
        type: "declaration",
        property: property,
        value: value
      });
    }

    return declarations;
  };

  CSSNativeScript.prototype.preludeToSelectorsStringArray = function (prelude) {
    var selectors = [];
    var selector = "";
    prelude.forEach(function (inputToken) {
      if (typeof inputToken === "string") {
        if (inputToken === ",") {
          if (selector) {
            selectors.push(selector.trim());
          }

          selector = "";
        } else {
          selector += inputToken;
        }
      } else if (typeof inputToken === "object") {
        selector += inputToken.text;
      }
    });

    if (selector) {
      selectors.push(selector.trim());
    }

    return selectors;
  };

  return CSSNativeScript;
}();

exports.CSSNativeScript = CSSNativeScript;

/***/ }),

/***/ "../node_modules/tns-core-modules/data/observable-array/observable-array.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var ChangeType = function () {
  function ChangeType() {}

  ChangeType.Add = "add";
  ChangeType.Delete = "delete";
  ChangeType.Update = "update";
  ChangeType.Splice = "splice";
  return ChangeType;
}();

exports.ChangeType = ChangeType;
var CHANGE = "change";

var ObservableArray = function (_super) {
  __extends(ObservableArray, _super);

  function ObservableArray() {
    var _this = _super.call(this) || this;

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      _this._array = arguments[0].slice();
    } else {
      _this._array = Array.apply(null, arguments);
    }

    _this._addArgs = {
      eventName: CHANGE,
      object: _this,
      action: ChangeType.Add,
      index: null,
      removed: new Array(),
      addedCount: 1
    };
    _this._deleteArgs = {
      eventName: CHANGE,
      object: _this,
      action: ChangeType.Delete,
      index: null,
      removed: null,
      addedCount: 0
    };
    return _this;
  }

  ObservableArray.prototype.getItem = function (index) {
    return this._array[index];
  };

  ObservableArray.prototype.setItem = function (index, value) {
    var oldValue = this._array[index];
    this._array[index] = value;
    this.notify({
      eventName: CHANGE,
      object: this,
      action: ChangeType.Update,
      index: index,
      removed: [oldValue],
      addedCount: 1
    });
  };

  Object.defineProperty(ObservableArray.prototype, "length", {
    get: function () {
      return this._array.length;
    },
    set: function (value) {
      if (types.isNumber(value) && this._array && this._array.length !== value) {
        this.splice(value, this._array.length - value);
      }
    },
    enumerable: true,
    configurable: true
  });

  ObservableArray.prototype.toString = function () {
    return this._array.toString();
  };

  ObservableArray.prototype.toLocaleString = function () {
    return this._array.toLocaleString();
  };

  ObservableArray.prototype.concat = function () {
    this._addArgs.index = this._array.length;

    var result = this._array.concat.apply(this._array, arguments);

    return result;
  };

  ObservableArray.prototype.join = function (separator) {
    return this._array.join(separator);
  };

  ObservableArray.prototype.pop = function () {
    this._deleteArgs.index = this._array.length - 1;

    var result = this._array.pop();

    this._deleteArgs.removed = [result];
    this.notify(this._deleteArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.push = function () {
    this._addArgs.index = this._array.length;

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      var source = arguments[0];

      for (var i = 0, l = source.length; i < l; i++) {
        this._array.push(source[i]);
      }
    } else {
      this._array.push.apply(this._array, arguments);
    }

    this._addArgs.addedCount = this._array.length - this._addArgs.index;
    this.notify(this._addArgs);

    this._notifyLengthChange();

    return this._array.length;
  };

  ObservableArray.prototype._notifyLengthChange = function () {
    var lengthChangedData = this._createPropertyChangeData("length", this._array.length);

    this.notify(lengthChangedData);
  };

  ObservableArray.prototype.reverse = function () {
    return this._array.reverse();
  };

  ObservableArray.prototype.shift = function () {
    var result = this._array.shift();

    this._deleteArgs.index = 0;
    this._deleteArgs.removed = [result];
    this.notify(this._deleteArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.slice = function (start, end) {
    return this._array.slice(start, end);
  };

  ObservableArray.prototype.sort = function (compareFn) {
    return this._array.sort(compareFn);
  };

  ObservableArray.prototype.splice = function (start, deleteCount) {
    var length = this._array.length;

    var result = this._array.splice.apply(this._array, arguments);

    this.notify({
      eventName: CHANGE,
      object: this,
      action: ChangeType.Splice,
      index: start,
      removed: result,
      addedCount: this._array.length > length ? this._array.length - length : 0
    });

    if (this._array.length !== length) {
      this._notifyLengthChange();
    }

    return result;
  };

  ObservableArray.prototype.unshift = function () {
    var length = this._array.length;

    var result = this._array.unshift.apply(this._array, arguments);

    this._addArgs.index = 0;
    this._addArgs.addedCount = result - length;
    this.notify(this._addArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.indexOf = function (searchElement, fromIndex) {
    var index = fromIndex ? fromIndex : 0;

    for (var i = index, l = this._array.length; i < l; i++) {
      if (this._array[i] === searchElement) {
        return i;
      }
    }

    return -1;
  };

  ObservableArray.prototype.lastIndexOf = function (searchElement, fromIndex) {
    var index = fromIndex ? fromIndex : this._array.length - 1;

    for (var i = index; i >= 0; i--) {
      if (this._array[i] === searchElement) {
        return i;
      }
    }

    return -1;
  };

  ObservableArray.prototype.every = function (callbackfn, thisArg) {
    return this._array.every(callbackfn, thisArg);
  };

  ObservableArray.prototype.some = function (callbackfn, thisArg) {
    return this._array.some(callbackfn, thisArg);
  };

  ObservableArray.prototype.forEach = function (callbackfn, thisArg) {
    this._array.forEach(callbackfn, thisArg);
  };

  ObservableArray.prototype.map = function (callbackfn, thisArg) {
    return this._array.map(callbackfn, thisArg);
  };

  ObservableArray.prototype.filter = function (callbackfn, thisArg) {
    return this._array.filter(callbackfn, thisArg);
  };

  ObservableArray.prototype.reduce = function (callbackfn, initialValue) {
    return initialValue !== undefined ? this._array.reduce(callbackfn, initialValue) : this._array.reduce(callbackfn);
  };

  ObservableArray.prototype.reduceRight = function (callbackfn, initialValue) {
    return initialValue !== undefined ? this._array.reduceRight(callbackfn, initialValue) : this._array.reduceRight(callbackfn);
  };

  ObservableArray.changeEvent = CHANGE;
  return ObservableArray;
}(observable.Observable);

exports.ObservableArray = ObservableArray;

/***/ }),

/***/ "../node_modules/tns-core-modules/data/observable/observable.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _wrappedIndex = 0;

var WrappedValue = function () {
  function WrappedValue(wrapped) {
    this.wrapped = wrapped;
  }

  WrappedValue.unwrap = function (value) {
    return value && value.wrapped ? value.wrapped : value;
  };

  WrappedValue.wrap = function (value) {
    var w = _wrappedValues[_wrappedIndex++ % 5];
    w.wrapped = value;
    return w;
  };

  return WrappedValue;
}();

exports.WrappedValue = WrappedValue;
var _wrappedValues = [new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null)];

var Observable = function () {
  function Observable() {
    this._observers = {};
  }

  Observable.prototype.get = function (name) {
    return this[name];
  };

  Observable.prototype.set = function (name, value) {
    var oldValue = this[name];

    if (this[name] === value) {
      return;
    }

    var newValue = WrappedValue.unwrap(value);
    this[name] = newValue;
    this.notifyPropertyChange(name, newValue, oldValue);
  };

  Observable.prototype.on = function (eventNames, callback, thisArg) {
    this.addEventListener(eventNames, callback, thisArg);
  };

  Observable.prototype.once = function (event, callback, thisArg) {
    var list = this._getEventList(event, true);

    list.push({
      callback: callback,
      thisArg: thisArg,
      once: true
    });
  };

  Observable.prototype.off = function (eventNames, callback, thisArg) {
    this.removeEventListener(eventNames, callback, thisArg);
  };

  Observable.prototype.addEventListener = function (eventNames, callback, thisArg) {
    if (typeof eventNames !== "string") {
      throw new TypeError("Events name(s) must be string.");
    }

    if (typeof callback !== "function") {
      throw new TypeError("callback must be function.");
    }

    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_1 = events[i].trim();

      var list = this._getEventList(event_1, true);

      list.push({
        callback: callback,
        thisArg: thisArg
      });
    }
  };

  Observable.prototype.removeEventListener = function (eventNames, callback, thisArg) {
    if (typeof eventNames !== "string") {
      throw new TypeError("Events name(s) must be string.");
    }

    if (callback && typeof callback !== "function") {
      throw new TypeError("callback must be function.");
    }

    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_2 = events[i].trim();

      if (callback) {
        var list = this._getEventList(event_2, false);

        if (list) {
          var index_1 = this._indexOfListener(list, callback, thisArg);

          if (index_1 >= 0) {
            list.splice(index_1, 1);
          }

          if (list.length === 0) {
            delete this._observers[event_2];
          }
        }
      } else {
        this._observers[event_2] = undefined;
        delete this._observers[event_2];
      }
    }
  };

  Observable.prototype.notify = function (data) {
    var observers = this._observers[data.eventName];

    if (!observers) {
      return;
    }

    for (var i = observers.length - 1; i >= 0; i--) {
      var entry = observers[i];

      if (entry.once) {
        observers.splice(i, 1);
      }

      if (entry.thisArg) {
        entry.callback.apply(entry.thisArg, [data]);
      } else {
        entry.callback(data);
      }
    }
  };

  Observable.prototype.notifyPropertyChange = function (name, value, oldValue) {
    this.notify(this._createPropertyChangeData(name, value, oldValue));
  };

  Observable.prototype.hasListeners = function (eventName) {
    return eventName in this._observers;
  };

  Observable.prototype._createPropertyChangeData = function (propertyName, value, oldValue) {
    return {
      eventName: Observable.propertyChangeEvent,
      object: this,
      propertyName: propertyName,
      value: value,
      oldValue: oldValue
    };
  };

  Observable.prototype._emit = function (eventNames) {
    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_3 = events[i].trim();
      this.notify({
        eventName: event_3,
        object: this
      });
    }
  };

  Observable.prototype._getEventList = function (eventName, createIfNeeded) {
    if (!eventName) {
      throw new TypeError("EventName must be valid string.");
    }

    var list = this._observers[eventName];

    if (!list && createIfNeeded) {
      list = [];
      this._observers[eventName] = list;
    }

    return list;
  };

  Observable.prototype._indexOfListener = function (list, callback, thisArg) {
    for (var i = 0; i < list.length; i++) {
      var entry = list[i];

      if (thisArg) {
        if (entry.callback === callback && entry.thisArg === thisArg) {
          return i;
        }
      } else {
        if (entry.callback === callback) {
          return i;
        }
      }
    }

    return -1;
  };

  Observable.propertyChangeEvent = "propertyChange";
  return Observable;
}();

exports.Observable = Observable;

var ObservableFromObject = function (_super) {
  __extends(ObservableFromObject, _super);

  function ObservableFromObject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._map = {};
    return _this;
  }

  ObservableFromObject.prototype.get = function (name) {
    return this._map[name];
  };

  ObservableFromObject.prototype.set = function (name, value) {
    var currentValue = this._map[name];

    if (currentValue === value) {
      return;
    }

    var newValue = WrappedValue.unwrap(value);
    this._map[name] = newValue;
    this.notifyPropertyChange(name, newValue, currentValue);
  };

  return ObservableFromObject;
}(Observable);

function defineNewProperty(target, propertyName) {
  Object.defineProperty(target, propertyName, {
    get: function () {
      return target._map[propertyName];
    },
    set: function (value) {
      target.set(propertyName, value);
    },
    enumerable: true,
    configurable: true
  });
}

function addPropertiesFromObject(observable, source, recursive) {
  if (recursive === void 0) {
    recursive = false;
  }

  Object.keys(source).forEach(function (prop) {
    var value = source[prop];

    if (recursive && !Array.isArray(value) && value && typeof value === "object" && !(value instanceof Observable)) {
      value = fromObjectRecursive(value);
    }

    defineNewProperty(observable, prop);
    observable.set(prop, value);
  });
}

function fromObject(source) {
  var observable = new ObservableFromObject();
  addPropertiesFromObject(observable, source, false);
  return observable;
}

exports.fromObject = fromObject;

function fromObjectRecursive(source) {
  var observable = new ObservableFromObject();
  addPropertiesFromObject(observable, source, true);
  return observable;
}

exports.fromObjectRecursive = fromObjectRecursive;

/***/ }),

/***/ "../node_modules/tns-core-modules/debugger/debugger.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var network;

function getNetwork() {
  return network;
}

exports.getNetwork = getNetwork;

function setNetwork(newNetwork) {
  network = newNetwork;
}

exports.setNetwork = setNetwork;
var dom;

function getDOM() {
  return dom;
}

exports.getDOM = getDOM;

function setDOM(newDOM) {
  dom = newDOM;
}

exports.setDOM = setDOM;
var css;

function getCSS() {
  return css;
}

exports.getCSS = getCSS;

function setCSS(newCSS) {
  css = newCSS;
}

exports.setCSS = setCSS;
var NetworkAgent;

(function (NetworkAgent) {
  function responseReceived(requestId, result, headers) {
    var requestIdStr = requestId.toString();
    var mimeType = headers["Content-Type"] || headers["content-type"] || "application/octet-stream";
    var contentLengthHeader = headers["Content-Length"] || headers["content-length"];
    var contentLength = parseInt(contentLengthHeader, 10);

    if (isNaN(contentLength)) {
      contentLength = 0;
    }

    var response = {
      url: result.url || "",
      status: result.statusCode,
      statusText: result.statusText || "",
      headers: headers,
      mimeType: mimeType,
      fromDiskCache: false,
      connectionReused: true,
      connectionId: 0,
      encodedDataLength: contentLength,
      securityState: "info"
    };
    var responseData = {
      requestId: requestIdStr,
      type: mimeTypeToType(response.mimeType),
      response: response,
      timestamp: getTimeStamp()
    };

    global.__inspector.responseReceived(responseData);

    global.__inspector.loadingFinished({
      requestId: requestIdStr,
      timestamp: getTimeStamp(),
      encodedDataLength: contentLength
    });

    var hasTextContent = responseData.type === "Document" || responseData.type === "Script";
    var data;

    if (!hasTextContent) {
      if (responseData.type === "Image") {
        var bitmap = result.responseAsImage;

        if (bitmap) {
          var outputStream = new java.io.ByteArrayOutputStream();
          bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, outputStream);
          var base64Image = android.util.Base64.encodeToString(outputStream.toByteArray(), android.util.Base64.DEFAULT);
          data = base64Image;
        }
      }
    } else {
      data = result.responseAsString;
    }

    var successfulRequestData = {
      requestId: requestIdStr,
      data: data,
      hasTextContent: hasTextContent
    };

    global.__inspector.dataForRequestId(successfulRequestData);
  }

  NetworkAgent.responseReceived = responseReceived;

  function requestWillBeSent(requestId, options) {
    var request = {
      url: options.url,
      method: options.method,
      headers: options.headers || {},
      postData: options.content ? options.content.toString() : "",
      initialPriority: "Medium",
      referrerPolicy: "no-referrer-when-downgrade"
    };
    var requestData = {
      requestId: requestId.toString(),
      url: request.url,
      request: request,
      timestamp: getTimeStamp(),
      type: "Document",
      wallTime: 0
    };

    global.__inspector.requestWillBeSent(requestData);
  }

  NetworkAgent.requestWillBeSent = requestWillBeSent;

  function getTimeStamp() {
    var d = new Date();
    return Math.round(d.getTime() / 1000);
  }

  function mimeTypeToType(mimeType) {
    var type = "Document";

    if (mimeType) {
      if (mimeType.indexOf("image") === 0) {
        type = "Image";
      } else if (mimeType.indexOf("javascript") !== -1 || mimeType.indexOf("json") !== -1) {
        type = "Script";
      }
    }

    return type;
  }
})(NetworkAgent = exports.NetworkAgent || (exports.NetworkAgent = {}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/debugger/dom-node.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var registeredDomNodes = {};
var ELEMENT_NODE_TYPE = 1;
var ROOT_NODE_TYPE = 9;
var propertyBlacklist = ["effectivePaddingLeft", "effectivePaddingBottom", "effectivePaddingRight", "effectivePaddingTop", "effectiveBorderTopWidth", "effectiveBorderRightWidth", "effectiveBorderBottomWidth", "effectiveBorderLeftWidth", "effectiveMinWidth", "effectiveMinHeight", "effectiveWidth", "effectiveHeight", "effectiveMarginLeft", "effectiveMarginTop", "effectiveMarginRight", "effectiveMarginBottom", "nodeName", "nodeType", "decodeWidth", "decodeHeight", "ng-reflect-items", "domNode", "touchListenerIsSet", "bindingContext", "nativeView"];

function lazy(action) {
  var _value;

  return function () {
    return _value || (_value = action());
  };
}

var percentLengthToStringLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js").PercentLength.convertToString;
});
var getSetPropertiesLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js").getSetProperties;
});
var getComputedCssValuesLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js").getComputedCssValues;
});

function registerInspectorEvents(inspector) {
  inspectorFrontendInstance = inspector;
}

exports.registerInspectorEvents = registerInspectorEvents;
var inspectorFrontendInstance;

function notifyInspector(callback) {
  if (inspectorFrontendInstance) {
    callback(inspectorFrontendInstance);
  }
}

function valueToString(value) {
  if (typeof value === "undefined" || value === null) {
    return "";
  } else if (typeof value === "object" && value.unit) {
    return percentLengthToStringLazy()(value);
  } else {
    return value + "";
  }
}

function propertyFilter(_a) {
  var name = _a[0],
      value = _a[1];

  if (name[0] === "_") {
    return false;
  }

  if (value !== null && typeof value === "object") {
    return false;
  }

  if (propertyBlacklist.indexOf(name) >= 0) {
    return false;
  }

  return true;
}

function registerNode(domNode) {
  registeredDomNodes[domNode.nodeId] = domNode;
}

function unregisterNode(domNode) {
  delete registeredDomNodes[domNode.nodeId];
}

function getNodeById(id) {
  return registeredDomNodes[id];
}

exports.getNodeById = getNodeById;

var DOMNode = function () {
  function DOMNode(view) {
    this.nodeValue = "";
    this.attributes = [];
    this.viewRef = new WeakRef(view);
    this.nodeType = view.typeName === "Frame" ? ROOT_NODE_TYPE : ELEMENT_NODE_TYPE;
    this.nodeId = view._domId;
    this.nodeName = view.typeName;
    this.localName = this.nodeName;
    this.loadAttributes();
    registerNode(this);
  }

  DOMNode.prototype.loadAttributes = function () {
    var _this = this;

    this.attributes = [];
    getSetPropertiesLazy()(this.viewRef.get()).filter(propertyFilter).forEach(function (pair) {
      return _this.attributes.push(pair[0], pair[1] + "");
    });
  };

  Object.defineProperty(DOMNode.prototype, "children", {
    get: function () {
      var view = this.viewRef.get();

      if (!view) {
        return [];
      }

      var res = [];
      view.eachChild(function (child) {
        child.ensureDomNode();
        res.push(child.domNode);
        return true;
      });
      return res;
    },
    enumerable: true,
    configurable: true
  });

  DOMNode.prototype.onChildAdded = function (childView) {
    var _this = this;

    notifyInspector(function (ins) {
      var view = _this.viewRef.get();

      var previousChild;
      view.eachChild(function (child) {
        if (child === childView) {
          return false;
        }

        previousChild = child;
        return true;
      });
      var index = !!previousChild ? previousChild._domId : 0;
      childView.ensureDomNode();
      ins.childNodeInserted(_this.nodeId, index, childView.domNode);
    });
  };

  DOMNode.prototype.onChildRemoved = function (view) {
    var _this = this;

    notifyInspector(function (ins) {
      ins.childNodeRemoved(_this.nodeId, view._domId);
    });
  };

  DOMNode.prototype.attributeModified = function (name, value) {
    var _this = this;

    notifyInspector(function (ins) {
      if (propertyBlacklist.indexOf(name) < 0) {
        ins.attributeModified(_this.nodeId, name, valueToString(value));
      }
    });
  };

  DOMNode.prototype.attributeRemoved = function (name) {
    var _this = this;

    notifyInspector(function (ins) {
      ins.attributeRemoved(_this.nodeId, name);
    });
  };

  DOMNode.prototype.getComputedProperties = function () {
    var view = this.viewRef.get();

    if (!view) {
      return [];
    }

    var result = getComputedCssValuesLazy()(view).filter(function (pair) {
      return pair[0][0] !== "_";
    }).map(function (pair) {
      return {
        name: pair[0],
        value: valueToString(pair[1])
      };
    });
    return result;
  };

  DOMNode.prototype.dispose = function () {
    unregisterNode(this);
    this.viewRef.clear();
  };

  DOMNode.prototype.toObject = function () {
    return {
      nodeId: this.nodeId,
      nodeType: this.nodeType,
      nodeName: this.nodeName,
      localName: this.localName,
      nodeValue: this.nodeValue,
      children: this.children.map(function (c) {
        return c.toObject();
      }),
      attributes: this.attributes,
      backendNodeId: 0
    };
  };

  return DOMNode;
}();

exports.DOMNode = DOMNode;

/***/ }),

/***/ "../node_modules/tns-core-modules/fetch/fetch.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function () {
  'use strict';

  exports.XMLHttpRequest = global.XMLHttpRequest;
  exports.FormData = global.FormData;

  if (!exports.XMLHttpRequest) {
    var xhr = __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");

    exports.XMLHttpRequest = xhr.XMLHttpRequest;
    exports.FormData = xhr.FormData;
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = name.toString();
    }

    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }

    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = value.toString();
    }

    return value;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];

    if (!list) {
      list = [];
      this.map[name] = list;
    }

    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }

    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };

      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    reader.readAsArrayBuffer(blob);
    return fileReaderReady(reader);
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    reader.readAsText(blob);
    return fileReaderReady(reader);
  }

  var support = {
    blob: 'FileReader' in exports && 'Blob' in exports && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in exports
  };

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;

      if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (!body) {
        this._bodyText = '';
      } else {
        throw new Error('unsupported BodyInit type');
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        return this.blob().then(readBlobAsArrayBuffer);
      };

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };
    } else {
      this.text = function () {
        var rejected = consumed(this);
        return rejected ? rejected : Promise.resolve(this._bodyText);
      };
    }

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  } // HTTP methods whose capitalization should be normalized


  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(url, options) {
    options = options || {};
    this.url = url;
    this.credentials = options.credentials || 'omit';
    this.headers = new Headers(options.headers);
    this.method = normalizeMethod(options.method || 'GET');
    this.mode = options.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && options.body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }

    this._initBody(options.body);
  }

  function decode(body) {
    var form = new exports.FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function headers(xhr) {
    var head = new Headers();
    var pairs = xhr.getAllResponseHeaders().trim().split('\n');
    pairs.forEach(function (header) {
      var split = header.trim().split(':');
      var key = split.shift().trim();
      var value = split.join(':').trim();
      head.append(key, value);
    });
    return head;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this._initBody(bodyInit);

    this.type = 'default';
    this.url = null;
    this.status = options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText;
    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
    this.url = options.url || '';
  }

  Body.call(Response.prototype);
  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;

  exports.fetch = function (input, init) {
    // TODO: Request constructor should accept input, init
    var request;

    if (Request.prototype.isPrototypeOf(input) && !init) {
      request = input;
    } else {
      request = new Request(input, init);
    }

    return new Promise(function (resolve, reject) {
      var xhr = new exports.XMLHttpRequest();

      function responseURL() {
        if ('responseURL' in xhr) {
          return xhr.responseURL;
        } // Avoid security warnings on getResponseHeader when not allowed by CORS


        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
          return xhr.getResponseHeader('X-Request-URL');
        }

        return;
      }

      xhr.onload = function () {
        var status = xhr.status === 1223 ? 204 : xhr.status;

        if (status < 100 || status > 599) {
          reject(new TypeError('Network request failed'));
          return;
        }

        var options = {
          status: status,
          statusText: xhr.statusText,
          headers: headers(xhr),
          url: responseURL() //var body = 'response' in xhr ? xhr.response : xhr.responseText;

        };
        resolve(new Response(xhr.responseText, options));
      };

      xhr.onerror = function (error) {
        reject(new TypeError(['Network request failed:', error.message].join(' ')));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });
      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };

  exports.fetch.polyfill = true;
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var trace = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var appCommonModule = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 10000;
var minWidthHeightQualifier = {
  isMatch: function (value) {
    return value.indexOf(MIN_WH) === 0;
  },
  getMatchValue: function (value, context) {
    var numVal = parseInt(value.substr(MIN_WH.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualLength = Math.min(context.width, context.height);

    if (actualLength < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualLength - numVal);
  }
};
var minWidthQualifier = {
  isMatch: function (value) {
    return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
  },
  getMatchValue: function (value, context) {
    var numVal = parseInt(value.substr(MIN_W.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualWidth = context.width;

    if (actualWidth < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualWidth - numVal);
  }
};
var minHeightQualifier = {
  isMatch: function (value) {
    return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
  },
  getMatchValue: function (value, context) {
    var numVal = parseInt(value.substr(MIN_H.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualHeight = context.height;

    if (actualHeight < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualHeight - numVal);
  }
};
var platformQualifier = {
  isMatch: function (value) {
    return value === "android" || value === "ios";
  },
  getMatchValue: function (value, context) {
    return value === context.os.toLowerCase() ? 1 : -1;
  }
};
var orientationQualifier = {
  isMatch: function (value) {
    return value === "land" || value === "port";
  },
  getMatchValue: function (value, context) {
    var isLandscape = context.width > context.height ? 1 : -1;
    return value === "land" ? isLandscape : -isLandscape;
  }
};
var supportedQualifiers = [minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, platformQualifier];

var FileNameResolver = function () {
  function FileNameResolver(context) {
    this._cache = {};
    this._context = context;
  }

  FileNameResolver.prototype.resolveFileName = function (path, ext) {
    var key = path + ext;
    var result = this._cache[key];

    if (result === undefined) {
      result = this.resolveFileNameImpl(path, ext);
      this._cache[key] = result;
    }

    return result;
  };

  FileNameResolver.prototype.clearCache = function () {
    this._cache = {};
  };

  FileNameResolver.prototype.resolveFileNameImpl = function (path, ext) {
    var result = null;
    path = file_system_1.path.normalize(path);
    ext = "." + ext;
    var candidates = this.getFileCandidatesFromFolder(path, ext);
    result = _findFileMatch(path, ext, candidates, this._context);
    return result;
  };

  FileNameResolver.prototype.getFileCandidatesFromFolder = function (path, ext) {
    var candidates = new Array();
    var folderPath = path.substring(0, path.lastIndexOf(file_system_1.path.separator) + 1);

    if (file_system_1.Folder.exists(folderPath)) {
      var folder = file_system_1.Folder.fromPath(folderPath);
      folder.eachEntity(function (e) {
        if (e instanceof file_system_1.File) {
          var file = e;

          if (file.path.indexOf(path) === 0 && file.extension === ext) {
            candidates.push(file.path);
          }
        }

        return true;
      });
    } else {
      if (trace.isEnabled()) {
        trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
      }
    }

    return candidates;
  };

  return FileNameResolver;
}();

exports.FileNameResolver = FileNameResolver;

function _findFileMatch(path, ext, candidates, context) {
  var bestValue = -1;
  var result = null;

  for (var i = 0; i < candidates.length; i++) {
    var filePath = candidates[i];
    var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
    var qualifiers = qualifiersStr.split(".");
    var value = checkQualifiers(qualifiers, context);

    if (value >= 0 && value > bestValue) {
      bestValue = value;
      result = candidates[i];
    }
  }

  return result;
}

exports._findFileMatch = _findFileMatch;

function checkQualifiers(qualifiers, context) {
  var result = 0;

  for (var i = 0; i < qualifiers.length; i++) {
    if (qualifiers[i]) {
      var value = checkQualifier(qualifiers[i], context);

      if (value < 0) {
        return -1;
      }

      result += value;
    }
  }

  return result;
}

function checkQualifier(value, context) {
  for (var i = 0; i < supportedQualifiers.length; i++) {
    if (supportedQualifiers[i].isMatch(value)) {
      var result = supportedQualifiers[i].getMatchValue(value, context);

      if (result > 0) {
        result += (supportedQualifiers.length - i) * PRIORITY_STEP;
      }

      return result;
    }
  }

  return -1;
}

var resolverInstance;

function resolveFileName(path, ext) {
  if (!resolverInstance) {
    resolverInstance = new FileNameResolver({
      width: platform_1.screen.mainScreen.widthDIPs,
      height: platform_1.screen.mainScreen.heightDIPs,
      os: platform_1.device.os,
      deviceType: platform_1.device.deviceType
    });
  }

  return resolverInstance.resolveFileName(path, ext);
}

exports.resolveFileName = resolveFileName;
appCommonModule.on("cssChanged", function (args) {
  return resolverInstance = undefined;
});
appCommonModule.on("livesync", function (args) {
  return resolverInstance && resolverInstance.clearCache();
});

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-system-access.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var textModule = __webpack_require__("../node_modules/tns-core-modules/text/text.js");

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var applicationContext;

function getApplicationContext() {
  if (!applicationContext) {
    applicationContext = application_1.getNativeApplication().getApplicationContext();
  }

  return applicationContext;
}

var FileSystemAccess = function () {
  function FileSystemAccess() {
    this._pathSeparator = "/";
  }

  FileSystemAccess.prototype.getLastModified = function (path) {
    var javaFile = new java.io.File(path);
    return new Date(javaFile.lastModified());
  };

  FileSystemAccess.prototype.getFileSize = function (path) {
    var javaFile = new java.io.File(path);
    return javaFile.length();
  };

  FileSystemAccess.prototype.getParent = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);
      var parent = javaFile.getParentFile();
      return {
        path: parent.getAbsolutePath(),
        name: parent.getName()
      };
    } catch (exception) {
      if (onError) {
        onError(exception);
      }

      return undefined;
    }
  };

  FileSystemAccess.prototype.getFile = function (path, onError) {
    return this.ensureFile(new java.io.File(path), false, onError);
  };

  FileSystemAccess.prototype.getFolder = function (path, onError) {
    var javaFile = new java.io.File(path);
    var dirInfo = this.ensureFile(javaFile, true, onError);

    if (!dirInfo) {
      return undefined;
    }

    return {
      path: dirInfo.path,
      name: dirInfo.name
    };
  };

  FileSystemAccess.prototype.eachEntity = function (path, onEntity, onError) {
    if (!onEntity) {
      return;
    }

    this.enumEntities(path, onEntity, onError);
  };

  FileSystemAccess.prototype.getEntities = function (path, onError) {
    var fileInfos = new Array();

    var onEntity = function (entity) {
      fileInfos.push(entity);
      return true;
    };

    var errorOccurred;

    var localError = function (error) {
      if (onError) {
        onError(error);
      }

      errorOccurred = true;
    };

    this.enumEntities(path, onEntity, localError);

    if (!errorOccurred) {
      return fileInfos;
    }

    return null;
  };

  FileSystemAccess.prototype.fileExists = function (path) {
    var file = new java.io.File(path);
    return file.exists();
  };

  FileSystemAccess.prototype.folderExists = function (path) {
    var file = new java.io.File(path);
    return file.exists() && file.isDirectory();
  };

  FileSystemAccess.prototype.deleteFile = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);

      if (!javaFile.isFile()) {
        if (onError) {
          onError({
            message: "The specified parameter is not a File entity."
          });
        }

        return;
      }

      if (!javaFile.delete()) {
        if (onError) {
          onError({
            message: "File deletion failed"
          });
        }
      }
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.deleteFolder = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);

      if (!javaFile.getCanonicalFile().isDirectory()) {
        if (onError) {
          onError({
            message: "The specified parameter is not a Folder entity."
          });
        }

        return;
      }

      this.deleteFolderContent(javaFile);

      if (!javaFile.delete()) {
        if (onError) {
          onError({
            message: "Folder deletion failed."
          });
        }
      }
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.emptyFolder = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);

      if (!javaFile.getCanonicalFile().isDirectory()) {
        if (onError) {
          onError({
            message: "The specified parameter is not a Folder entity."
          });
        }

        return;
      }

      this.deleteFolderContent(javaFile);
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.rename = function (path, newPath, onError) {
    var javaFile = new java.io.File(path);

    if (!javaFile.exists()) {
      if (onError) {
        onError(new Error("The file to rename does not exist"));
      }

      return;
    }

    var newFile = new java.io.File(newPath);

    if (newFile.exists()) {
      if (onError) {
        onError(new Error("A file with the same name already exists."));
      }

      return;
    }

    if (!javaFile.renameTo(newFile)) {
      if (onError) {
        onError(new Error("Failed to rename file '" + path + "' to '" + newPath + "'"));
      }
    }
  };

  FileSystemAccess.prototype.getDocumentsFolderPath = function () {
    var dir = getApplicationContext().getFilesDir();
    return dir.getAbsolutePath();
  };

  FileSystemAccess.prototype.getLogicalRootPath = function () {
    var dir = getApplicationContext().getFilesDir();
    return dir.getCanonicalPath();
  };

  FileSystemAccess.prototype.getTempFolderPath = function () {
    var dir = getApplicationContext().getCacheDir();
    return dir.getAbsolutePath();
  };

  FileSystemAccess.prototype.getCurrentAppPath = function () {
    return this.getLogicalRootPath() + "/app";
  };

  FileSystemAccess.prototype.read = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);
      var stream = new java.io.FileInputStream(javaFile);
      var bytes = Array.create("byte", javaFile.length());
      var dataInputStream = new java.io.DataInputStream(stream);
      dataInputStream.readFully(bytes);
      return bytes;
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.write = function (path, bytes, onError) {
    try {
      var javaFile = new java.io.File(path);
      var stream = new java.io.FileOutputStream(javaFile);
      stream.write(bytes, 0, bytes.length);
      stream.close();
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.readText = function (path, onError, encoding) {
    try {
      var javaFile = new java.io.File(path);
      var stream = new java.io.FileInputStream(javaFile);
      var actualEncoding = encoding;

      if (!actualEncoding) {
        actualEncoding = textModule.encoding.UTF_8;
      }

      var reader = new java.io.InputStreamReader(stream, actualEncoding);
      var bufferedReader = new java.io.BufferedReader(reader);
      var line = undefined;
      var result = "";

      while (true) {
        line = bufferedReader.readLine();

        if (line === null) {
          break;
        }

        if (result.length > 0) {
          result += "\n";
        }

        result += line;
      }

      if (actualEncoding === textModule.encoding.UTF_8) {
        result = FileSystemAccess._removeUtf8Bom(result);
      }

      bufferedReader.close();
      return result;
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess._removeUtf8Bom = function (s) {
    if (s.charCodeAt(0) === 0xFEFF) {
      s = s.slice(1);
    }

    return s;
  };

  FileSystemAccess.prototype.writeText = function (path, content, onError, encoding) {
    try {
      var javaFile = new java.io.File(path);
      var stream = new java.io.FileOutputStream(javaFile);
      var actualEncoding = encoding;

      if (!actualEncoding) {
        actualEncoding = textModule.encoding.UTF_8;
      }

      var writer = new java.io.OutputStreamWriter(stream, actualEncoding);
      writer.write(content);
      writer.close();
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.deleteFolderContent = function (file) {
    var filesList = file.listFiles();

    if (filesList.length === 0) {
      return true;
    }

    var i,
        childFile,
        success = false;

    for (i = 0; i < filesList.length; i++) {
      childFile = filesList[i];

      if (childFile.getCanonicalFile().isDirectory()) {
        success = this.deleteFolderContent(childFile);

        if (!success) {
          break;
        }
      }

      success = childFile.delete();
    }

    return success;
  };

  FileSystemAccess.prototype.ensureFile = function (javaFile, isFolder, onError) {
    try {
      if (!javaFile.exists()) {
        var created;

        if (isFolder) {
          created = javaFile.mkdirs();
        } else {
          javaFile.getParentFile().mkdirs();
          created = javaFile.createNewFile();
        }

        if (!created) {
          if (onError) {
            onError("Failed to create new java File for path " + javaFile.getAbsolutePath());
          }

          return undefined;
        } else {
          javaFile.setReadable(true);
          javaFile.setWritable(true);
        }
      }

      var path = javaFile.getAbsolutePath();
      return {
        path: path,
        name: javaFile.getName(),
        extension: this.getFileExtension(path)
      };
    } catch (exception) {
      if (onError) {
        onError(exception);
      }

      return undefined;
    }
  };

  FileSystemAccess.prototype.getFileExtension = function (path) {
    var dotIndex = path.lastIndexOf(".");

    if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
      return path.substring(dotIndex);
    }

    return "";
  };

  FileSystemAccess.prototype.enumEntities = function (path, callback, onError) {
    try {
      var javaFile = new java.io.File(path);

      if (!javaFile.getCanonicalFile().isDirectory()) {
        if (onError) {
          onError("There is no folder existing at path " + path);
        }

        return;
      }

      var filesList = javaFile.listFiles();
      var length = filesList.length;
      var i;
      var info;
      var retVal;

      for (i = 0; i < length; i++) {
        javaFile = filesList[i];
        info = {
          path: javaFile.getAbsolutePath(),
          name: javaFile.getName()
        };

        if (javaFile.isFile()) {
          info.extension = this.getFileExtension(info.path);
        }

        retVal = callback(info);

        if (retVal === false) {
          break;
        }
      }
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.getPathSeparator = function () {
    return this._pathSeparator;
  };

  FileSystemAccess.prototype.normalizePath = function (path) {
    var file = new java.io.File(path);
    return file.getAbsolutePath();
  };

  FileSystemAccess.prototype.joinPath = function (left, right) {
    var file1 = new java.io.File(left);
    var file2 = new java.io.File(file1, right);
    return file2.getPath();
  };

  FileSystemAccess.prototype.joinPaths = function (paths) {
    if (!paths || paths.length === 0) {
      return "";
    }

    if (paths.length === 1) {
      return paths[0];
    }

    var i,
        result = paths[0];

    for (i = 1; i < paths.length; i++) {
      result = this.joinPath(result, paths[i]);
    }

    return result;
  };

  return FileSystemAccess;
}();

exports.FileSystemAccess = FileSystemAccess;

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-system.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_access_module = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system-access.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var fileAccess;

var getFileAccess = function () {
  if (!fileAccess) {
    fileAccess = new file_access_module.FileSystemAccess();
  }

  return fileAccess;
};

var platform;

function ensurePlatform() {
  if (!platform) {
    platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");
  }
}

var createFile = function (info) {
  var file = new File();
  file._path = info.path;
  file._name = info.name;
  file._extension = info.extension;
  return file;
};

var createFolder = function (info) {
  var documents = knownFolders.documents();

  if (info.path === documents.path) {
    return documents;
  }

  var temp = knownFolders.temp();

  if (info.path === temp.path) {
    return temp;
  }

  var folder = new Folder();
  folder._path = info.path;
  folder._name = info.name;
  return folder;
};

var FileSystemEntity = function () {
  function FileSystemEntity() {}

  Object.defineProperty(FileSystemEntity.prototype, "parent", {
    get: function () {
      var onError = function (error) {
        throw error;
      };

      var folderInfo = getFileAccess().getParent(this.path, onError);

      if (!folderInfo) {
        return undefined;
      }

      return createFolder(folderInfo);
    },
    enumerable: true,
    configurable: true
  });

  FileSystemEntity.prototype.remove = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      _this.removeSync(localError);

      if (!hasError) {
        resolve();
      }
    });
  };

  FileSystemEntity.prototype.removeSync = function (onError) {
    if (this._isKnown) {
      if (onError) {
        onError({
          message: "Cannot delete known folder."
        });
      }

      return;
    }

    var fileAccess = getFileAccess();

    if (this instanceof File) {
      fileAccess.deleteFile(this.path, onError);
    } else if (this instanceof Folder) {
      fileAccess.deleteFolder(this.path, onError);
    }
  };

  FileSystemEntity.prototype.rename = function (newName) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      _this.renameSync(newName, localError);

      if (!hasError) {
        resolve();
      }
    });
  };

  FileSystemEntity.prototype.renameSync = function (newName, onError) {
    if (this._isKnown) {
      if (onError) {
        onError(new Error("Cannot rename known folder."));
      }

      return;
    }

    var parentFolder = this.parent;

    if (!parentFolder) {
      if (onError) {
        onError(new Error("No parent folder."));
      }

      return;
    }

    var fileAccess = getFileAccess();
    var path = parentFolder.path;
    var newPath = fileAccess.joinPath(path, newName);

    var localError = function (error) {
      if (onError) {
        onError(error);
      }

      return null;
    };

    fileAccess.rename(this.path, newPath, localError);
    this._path = newPath;
    this._name = newName;

    if (this instanceof File) {
      this._extension = fileAccess.getFileExtension(newPath);
    }
  };

  Object.defineProperty(FileSystemEntity.prototype, "name", {
    get: function () {
      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FileSystemEntity.prototype, "path", {
    get: function () {
      return this._path;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
    get: function () {
      var value = this._lastModified;

      if (!this._lastModified) {
        value = this._lastModified = getFileAccess().getLastModified(this.path);
      }

      return value;
    },
    enumerable: true,
    configurable: true
  });
  return FileSystemEntity;
}();

exports.FileSystemEntity = FileSystemEntity;

var File = function (_super) {
  __extends(File, _super);

  function File() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  File.fromPath = function (path) {
    var onError = function (error) {
      throw error;
    };

    var fileInfo = getFileAccess().getFile(path, onError);

    if (!fileInfo) {
      return undefined;
    }

    return createFile(fileInfo);
  };

  File.exists = function (path) {
    return getFileAccess().fileExists(path);
  };

  Object.defineProperty(File.prototype, "extension", {
    get: function () {
      return this._extension;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(File.prototype, "isLocked", {
    get: function () {
      return !!this._locked;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(File.prototype, "size", {
    get: function () {
      return getFileAccess().getFileSize(this.path);
    },
    enumerable: true,
    configurable: true
  });

  File.prototype.readSync = function (onError) {
    this.checkAccess();
    this._locked = true;
    var that = this;

    var localError = function (error) {
      that._locked = false;

      if (onError) {
        onError(error);
      }
    };

    var content = getFileAccess().read(this.path, localError);
    this._locked = false;
    return content;
  };

  File.prototype.writeSync = function (content, onError) {
    this.checkAccess();

    try {
      this._locked = true;
      var that = this;

      var localError = function (error) {
        that._locked = false;

        if (onError) {
          onError(error);
        }
      };

      getFileAccess().write(this.path, content, localError);
    } finally {
      this._locked = false;
    }
  };

  File.prototype.readText = function (encoding) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      var content = _this.readTextSync(localError, encoding);

      if (!hasError) {
        resolve(content);
      }
    });
  };

  File.prototype.readTextSync = function (onError, encoding) {
    this.checkAccess();
    this._locked = true;
    var that = this;

    var localError = function (error) {
      that._locked = false;

      if (onError) {
        onError(error);
      }
    };

    var content = getFileAccess().readText(this.path, localError, encoding);
    this._locked = false;
    return content;
  };

  File.prototype.writeText = function (content, encoding) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      _this.writeTextSync(content, localError, encoding);

      if (!hasError) {
        resolve();
      }
    });
  };

  File.prototype.writeTextSync = function (content, onError, encoding) {
    this.checkAccess();

    try {
      this._locked = true;
      var that = this;

      var localError = function (error) {
        that._locked = false;

        if (onError) {
          onError(error);
        }
      };

      getFileAccess().writeText(this.path, content, localError, encoding);
    } finally {
      this._locked = false;
    }
  };

  File.prototype.checkAccess = function () {
    if (this.isLocked) {
      throw new Error("Cannot access a locked file.");
    }
  };

  __decorate([profiling_1.profile], File.prototype, "readTextSync", null);

  return File;
}(FileSystemEntity);

exports.File = File;

var Folder = function (_super) {
  __extends(Folder, _super);

  function Folder() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Folder.fromPath = function (path) {
    var onError = function (error) {
      throw error;
    };

    var folderInfo = getFileAccess().getFolder(path, onError);

    if (!folderInfo) {
      return undefined;
    }

    return createFolder(folderInfo);
  };

  Folder.exists = function (path) {
    return getFileAccess().folderExists(path);
  };

  Folder.prototype.contains = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    if (fileAccess.fileExists(path)) {
      return true;
    }

    return fileAccess.folderExists(path);
  };

  Folder.prototype.clear = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var onError = function (error) {
        hasError = true;
        reject(error);
      };

      _this.clearSync(onError);

      if (!hasError) {
        resolve();
      }
    });
  };

  Folder.prototype.clearSync = function (onError) {
    getFileAccess().emptyFolder(this.path, onError);
  };

  Object.defineProperty(Folder.prototype, "isKnown", {
    get: function () {
      return this._isKnown;
    },
    enumerable: true,
    configurable: true
  });

  Folder.prototype.getFile = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    var onError = function (error) {
      throw error;
    };

    var fileInfo = fileAccess.getFile(path, onError);

    if (!fileInfo) {
      return undefined;
    }

    return createFile(fileInfo);
  };

  Folder.prototype.getFolder = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    var onError = function (error) {
      throw error;
    };

    var folderInfo = fileAccess.getFolder(path, onError);

    if (!folderInfo) {
      return undefined;
    }

    return createFolder(folderInfo);
  };

  Folder.prototype.getEntities = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      var entities = _this.getEntitiesSync(localError);

      if (!hasError) {
        resolve(entities);
      }
    });
  };

  Folder.prototype.getEntitiesSync = function (onError) {
    var fileInfos = getFileAccess().getEntities(this.path, onError);

    if (!fileInfos) {
      return null;
    }

    var entities = new Array();
    var i;

    for (i = 0; i < fileInfos.length; i++) {
      if (fileInfos[i].extension) {
        entities.push(createFile(fileInfos[i]));
      } else {
        entities.push(createFolder(fileInfos[i]));
      }
    }

    return entities;
  };

  Folder.prototype.eachEntity = function (onEntity) {
    if (!onEntity) {
      return;
    }

    var onSuccess = function (fileInfo) {
      var entity;

      if (fileInfo.extension) {
        entity = createFile(fileInfo);
      } else {
        entity = createFolder(fileInfo);
      }

      return onEntity(entity);
    };

    var onError = function (error) {
      throw error;
    };

    getFileAccess().eachEntity(this.path, onSuccess, onError);
  };

  return Folder;
}(FileSystemEntity);

exports.Folder = Folder;
var knownFolders;

(function (knownFolders) {
  var _documents;

  var _temp;

  var _app;

  knownFolders.documents = function () {
    if (!_documents) {
      var path = getFileAccess().getDocumentsFolderPath();
      _documents = new Folder();
      _documents._path = path;
      _documents._isKnown = true;
    }

    return _documents;
  };

  knownFolders.temp = function () {
    if (!_temp) {
      var path = getFileAccess().getTempFolderPath();
      _temp = new Folder();
      _temp._path = path;
      _temp._isKnown = true;
    }

    return _temp;
  };

  knownFolders.currentApp = function () {
    if (!_app) {
      var path = getFileAccess().getCurrentAppPath();
      _app = new Folder();
      _app._path = path;
      _app._isKnown = true;
    }

    return _app;
  };

  var ios;

  (function (ios) {
    function _checkPlatform(knownFolderName) {
      ensurePlatform();

      if (!platform.isIOS) {
        throw new Error("The \"" + knownFolderName + "\" known folder is available on iOS only!");
      }
    }

    var _library;

    ios.library = function () {
      _checkPlatform("library");

      if (!_library) {
        var existingFolderInfo = getExistingFolderInfo(5);

        if (existingFolderInfo) {
          _library = existingFolderInfo.folder;
          _library._path = existingFolderInfo.path;
          _library._isKnown = true;
        }
      }

      return _library;
    };

    var _developer;

    ios.developer = function () {
      _checkPlatform("developer");

      if (!_developer) {
        var existingFolderInfo = getExistingFolderInfo(6);

        if (existingFolderInfo) {
          _developer = existingFolderInfo.folder;
          _developer._path = existingFolderInfo.path;
          _developer._isKnown = true;
        }
      }

      return _developer;
    };

    var _desktop;

    ios.desktop = function () {
      _checkPlatform("desktop");

      if (!_desktop) {
        var existingFolderInfo = getExistingFolderInfo(12);

        if (existingFolderInfo) {
          _desktop = existingFolderInfo.folder;
          _desktop._path = existingFolderInfo.path;
          _desktop._isKnown = true;
        }
      }

      return _desktop;
    };

    var _downloads;

    ios.downloads = function () {
      _checkPlatform("downloads");

      if (!_downloads) {
        var existingFolderInfo = getExistingFolderInfo(15);

        if (existingFolderInfo) {
          _downloads = existingFolderInfo.folder;
          _downloads._path = existingFolderInfo.path;
          _downloads._isKnown = true;
        }
      }

      return _downloads;
    };

    var _movies;

    ios.movies = function () {
      _checkPlatform("movies");

      if (!_movies) {
        var existingFolderInfo = getExistingFolderInfo(17);

        if (existingFolderInfo) {
          _movies = existingFolderInfo.folder;
          _movies._path = existingFolderInfo.path;
          _movies._isKnown = true;
        }
      }

      return _movies;
    };

    var _music;

    ios.music = function () {
      _checkPlatform("music");

      if (!_music) {
        var existingFolderInfo = getExistingFolderInfo(18);

        if (existingFolderInfo) {
          _music = existingFolderInfo.folder;
          _music._path = existingFolderInfo.path;
          _music._isKnown = true;
        }
      }

      return _music;
    };

    var _pictures;

    ios.pictures = function () {
      _checkPlatform("pictures");

      if (!_pictures) {
        var existingFolderInfo = getExistingFolderInfo(19);

        if (existingFolderInfo) {
          _pictures = existingFolderInfo.folder;
          _pictures._path = existingFolderInfo.path;
          _pictures._isKnown = true;
        }
      }

      return _pictures;
    };

    var _sharedPublic;

    ios.sharedPublic = function () {
      _checkPlatform("sharedPublic");

      if (!_sharedPublic) {
        var existingFolderInfo = getExistingFolderInfo(21);

        if (existingFolderInfo) {
          _sharedPublic = existingFolderInfo.folder;
          _sharedPublic._path = existingFolderInfo.path;
          _sharedPublic._isKnown = true;
        }
      }

      return _sharedPublic;
    };

    function getExistingFolderInfo(pathDirectory) {
      var fileAccess = getFileAccess();
      var folderPath = fileAccess.getKnownPath(pathDirectory);
      var folderInfo = fileAccess.getExistingFolder(folderPath);

      if (folderInfo) {
        return {
          folder: createFolder(folderInfo),
          path: folderPath
        };
      }

      return undefined;
    }
  })(ios = knownFolders.ios || (knownFolders.ios = {}));
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));

var path;

(function (path_1) {
  function normalize(path) {
    return getFileAccess().normalizePath(path);
  }

  path_1.normalize = normalize;

  function join() {
    var paths = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      paths[_i] = arguments[_i];
    }

    var fileAccess = getFileAccess();
    return fileAccess.joinPaths(paths);
  }

  path_1.join = join;
  path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/globals/globals.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__("../node_modules/tns-core-modules/globals/ts-helpers.js");

global.moduleMerge = function (sourceExports, destExports) {
  for (var key in sourceExports) {
    destExports[key] = sourceExports[key];
  }
};

var modules = new Map();
global.moduleResolvers = [global.require];

global.registerModule = function (name, loader) {
  modules.set(name, loader);
};

var defaultExtensionMap = {
  ".js": ".js",
  ".ts": ".js",
  ".css": ".css",
  ".scss": ".css",
  ".xml": ".xml",
  ".less": ".css",
  ".sass": ".css"
};

global.registerWebpackModules = function registerWebpackModules(context, extensionMap) {
  if (extensionMap === void 0) {
    extensionMap = {};
  }

  context.keys().forEach(function (key) {
    var extDotIndex = key.lastIndexOf(".");
    var base = key.substr(0, extDotIndex);
    var originalExt = key.substr(extDotIndex);
    var registerExt = extensionMap[originalExt] || defaultExtensionMap[originalExt] || originalExt;
    var isSourceFile = originalExt !== registerExt;
    var registerName = base + registerExt;

    if (registerName.startsWith("./") && registerName.endsWith(".js")) {
      var jsNickNames = [registerName.substr(2, registerName.length - 5), registerName.substr(0, registerName.length - 3), registerName.substr(2)];
      jsNickNames.forEach(function (jsNickName) {
        if (isSourceFile || !global.moduleExists(jsNickName)) {
          global.registerModule(jsNickName, function () {
            return context(key);
          });
        }
      });
    }

    if (isSourceFile || !global.moduleExists(registerName)) {
      global.registerModule(registerName, function () {
        return context(key);
      });
    }
  });
};

global.moduleExists = function (name) {
  return modules.has(name);
};

global.loadModule = function (name) {
  var loader = modules.get(name);

  if (loader) {
    return loader();
  }

  var _loop_1 = function (resolver) {
    var result = resolver(name);

    if (result) {
      modules.set(name, function () {
        return result;
      });
      return {
        value: result
      };
    }
  };

  for (var _i = 0, _a = global.moduleResolvers; _i < _a.length; _i++) {
    var resolver = _a[_i];

    var state_1 = _loop_1(resolver);

    if (typeof state_1 === "object") return state_1.value;
  }
};

global.zonedCallback = function (callback) {
  if (global.zone) {
    return global.zone.bind(callback);
  }

  if (global.Zone) {
    return global.Zone.current.wrap(callback);
  } else {
    return callback;
  }
};

global.registerModule("timer", function () {
  return __webpack_require__("../node_modules/tns-core-modules/timer/timer.js");
});
global.registerModule("ui/dialogs", function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs.js");
});
global.registerModule("xhr", function () {
  return __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");
});
global.registerModule("fetch", function () {
  return __webpack_require__("../node_modules/tns-core-modules/fetch/fetch.js");
});
global.System = {
  import: function (path) {
    return new Promise(function (resolve, reject) {
      try {
        resolve(global.require(path));
      } catch (e) {
        reject(e);
      }
    });
  }
};

function registerOnGlobalContext(name, module) {
  Object.defineProperty(global, name, {
    get: function () {
      var m = global.loadModule(module);
      var resolvedValue = m[name];
      Object.defineProperty(this, name, {
        value: resolvedValue,
        configurable: true,
        writable: true
      });
      return resolvedValue;
    },
    configurable: true
  });
}

var snapshotGlobals;

function install() {
  if (global.__snapshot || global.__snapshotEnabled) {
    if (!snapshotGlobals) {
      var timer = __webpack_require__("../node_modules/tns-core-modules/timer/timer.js");

      var dialogs = __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs.js");

      var xhr = __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");

      var fetch = __webpack_require__("../node_modules/tns-core-modules/fetch/fetch.js");

      snapshotGlobals = snapshotGlobals || {
        setTimeout: timer.setTimeout,
        clearTimeout: timer.clearTimeout,
        setInterval: timer.setInterval,
        clearInterval: timer.clearInterval,
        alert: dialogs.alert,
        confirm: dialogs.confirm,
        prompt: dialogs.prompt,
        login: dialogs.login,
        action: dialogs.action,
        XMLHttpRequest: xhr.XMLHttpRequest,
        FormData: xhr.FormData,
        fetch: fetch.fetch,
        Headers: fetch.Headers,
        Request: fetch.Request,
        Response: fetch.Response
      };
    }

    var consoleModule = __webpack_require__("../node_modules/tns-core-modules/console/console.js").Console;

    global.console = global.console || new consoleModule();
    Object.assign(global, snapshotGlobals);
  } else {
    registerOnGlobalContext("setTimeout", "timer");
    registerOnGlobalContext("clearTimeout", "timer");
    registerOnGlobalContext("setInterval", "timer");
    registerOnGlobalContext("clearInterval", "timer");
    registerOnGlobalContext("alert", "ui/dialogs");
    registerOnGlobalContext("confirm", "ui/dialogs");
    registerOnGlobalContext("prompt", "ui/dialogs");
    registerOnGlobalContext("login", "ui/dialogs");
    registerOnGlobalContext("action", "ui/dialogs");
    registerOnGlobalContext("XMLHttpRequest", "xhr");
    registerOnGlobalContext("FormData", "xhr");
    registerOnGlobalContext("fetch", "fetch");
    registerOnGlobalContext("Headers", "fetch");
    registerOnGlobalContext("Request", "fetch");
    registerOnGlobalContext("Response", "fetch");
  }
}

exports.install = install;
install();

function Deprecated(target, key, descriptor) {
  if (descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      console.log(key.toString() + " is deprecated");
      return originalMethod.apply(this, args);
    };

    return descriptor;
  } else {
    console.log((target && target.name || target) + " is deprecated");
    return target;
  }
}

exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;

function Experimental(target, key, descriptor) {
  if (descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      console.log(key.toString() + " is experimental");
      return originalMethod.apply(this, args);
    };

    return descriptor;
  } else {
    console.log((target && target.name || target) + " is experimental");
    return target;
  }
}

exports.Experimental = Experimental;
global.Experimental = Experimental;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/globals/ts-helpers.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

if (!global.__extends) {
  global.__extends = function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) {
        d[p] = b[p];
      }
    }

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}

var tslib = __webpack_require__("../node_modules/tslib/tslib.es6.js");

for (var _i = 0, _a = Object.keys(tslib); _i < _a.length; _i++) {
  var fnName = _a[_i];

  if (typeof tslib[fnName] !== "function") {
    continue;
  }

  if (fnName in global) {
    continue;
  }

  global[fnName] = tslib[fnName];
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http-request/http-request-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function getFilenameFromUrl(url) {
  var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

  var slashPos = url.lastIndexOf("/") + 1;
  var questionMarkPos = url.lastIndexOf("?");
  var actualFileName;

  if (questionMarkPos !== -1) {
    actualFileName = url.substring(slashPos, questionMarkPos);
  } else {
    actualFileName = url.substring(slashPos);
  }

  var result = fs.path.join(fs.knownFolders.documents().path, actualFileName);
  return result;
}

exports.getFilenameFromUrl = getFilenameFromUrl;

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http-request/http-request.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var http_request_common_1 = __webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request-common.js");

var debugger_1 = __webpack_require__("../node_modules/tns-core-modules/debugger/debugger.js");

var HttpResponseEncoding;

(function (HttpResponseEncoding) {
  HttpResponseEncoding[HttpResponseEncoding["UTF8"] = 0] = "UTF8";
  HttpResponseEncoding[HttpResponseEncoding["GBK"] = 1] = "GBK";
})(HttpResponseEncoding = exports.HttpResponseEncoding || (exports.HttpResponseEncoding = {}));

function parseJSON(source) {
  var src = source.trim();

  if (src.lastIndexOf(")") === src.length - 1) {
    return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
  }

  return JSON.parse(src);
}

var requestIdCounter = 0;
var pendingRequests = {};
var imageSource;

function ensureImageSource() {
  if (!imageSource) {
    imageSource = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");
  }
}

var platform;

function ensurePlatform() {
  if (!platform) {
    platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");
  }
}

var completeCallback;

function ensureCompleteCallback() {
  if (completeCallback) {
    return;
  }

  completeCallback = new org.nativescript.widgets.Async.CompleteCallback({
    onComplete: function (result, context) {
      onRequestComplete(context, result);
    },
    onError: function (error, context) {
      onRequestError(error, context);
    }
  });
}

function onRequestComplete(requestId, result) {
  var callbacks = pendingRequests[requestId];
  delete pendingRequests[requestId];

  if (result.error) {
    callbacks.rejectCallback(new Error(result.error.toString()));
    return;
  }

  var headers = {};

  if (result.headers) {
    var jHeaders = result.headers;
    var length = jHeaders.size();
    var i;
    var pair;

    for (i = 0; i < length; i++) {
      pair = jHeaders.get(i);
      addHeader(headers, pair.key, pair.value);
    }
  }

  if (global.__inspector && global.__inspector.isConnected) {
    debugger_1.NetworkAgent.responseReceived(requestId, result, headers);
  }

  callbacks.resolveCallback({
    content: {
      raw: result.raw,
      toString: function (encoding) {
        var str;

        if (encoding) {
          str = decodeResponse(result.raw, encoding);
        } else {
          str = result.responseAsString;
        }

        if (typeof str === "string") {
          return str;
        } else {
          throw new Error("Response content may not be converted to string");
        }
      },
      toJSON: function (encoding) {
        var str;

        if (encoding) {
          str = decodeResponse(result.raw, encoding);
        } else {
          str = result.responseAsString;
        }

        return parseJSON(str);
      },
      toImage: function () {
        ensureImageSource();
        return new Promise(function (resolveImage, rejectImage) {
          if (result.responseAsImage != null) {
            resolveImage(imageSource.fromNativeSource(result.responseAsImage));
          } else {
            rejectImage(new Error("Response content may not be converted to an Image"));
          }
        });
      },
      toFile: function (destinationFilePath) {
        var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

        if (!destinationFilePath) {
          destinationFilePath = http_request_common_1.getFilenameFromUrl(callbacks.url);
        }

        var stream;

        try {
          var javaFile = new java.io.File(destinationFilePath);
          stream = new java.io.FileOutputStream(javaFile);
          stream.write(result.raw.toByteArray());
          return fs.File.fromPath(destinationFilePath);
        } catch (exception) {
          throw new Error("Cannot save file with path: " + destinationFilePath + ".");
        } finally {
          if (stream) {
            stream.close();
          }
        }
      }
    },
    statusCode: result.statusCode,
    headers: headers
  });
}

function onRequestError(error, requestId) {
  var callbacks = pendingRequests[requestId];
  delete pendingRequests[requestId];

  if (callbacks) {
    callbacks.rejectCallback(new Error(error));
  }
}

function buildJavaOptions(options) {
  if (typeof options.url !== "string") {
    throw new Error("Http request must provide a valid url.");
  }

  var javaOptions = new org.nativescript.widgets.Async.Http.RequestOptions();
  javaOptions.url = options.url;

  if (typeof options.method === "string") {
    javaOptions.method = options.method;
  }

  if (typeof options.content === "string" || options.content instanceof FormData) {
    javaOptions.content = options.content.toString();
  }

  if (typeof options.timeout === "number") {
    javaOptions.timeout = options.timeout;
  }

  if (typeof options.dontFollowRedirects === "boolean") {
    javaOptions.dontFollowRedirects = options.dontFollowRedirects;
  }

  if (options.headers) {
    var arrayList = new java.util.ArrayList();
    var pair = org.nativescript.widgets.Async.Http.KeyValuePair;

    for (var key in options.headers) {
      arrayList.add(new pair(key, options.headers[key] + ""));
    }

    javaOptions.headers = arrayList;
  }

  ensurePlatform();
  var screen = platform.screen.mainScreen;
  javaOptions.screenWidth = screen.widthPixels;
  javaOptions.screenHeight = screen.heightPixels;
  return javaOptions;
}

function request(options) {
  if (options === undefined || options === null) {
    return;
  }

  return new Promise(function (resolve, reject) {
    try {
      var javaOptions = buildJavaOptions(options);

      if (global.__inspector && global.__inspector.isConnected) {
        debugger_1.NetworkAgent.requestWillBeSent(requestIdCounter, options);
      }

      var callbacks = {
        url: options.url,
        resolveCallback: resolve,
        rejectCallback: reject
      };
      pendingRequests[requestIdCounter] = callbacks;
      ensureCompleteCallback();
      org.nativescript.widgets.Async.Http.MakeRequest(javaOptions, completeCallback, new java.lang.Integer(requestIdCounter));
      requestIdCounter++;
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.request = request;

function decodeResponse(raw, encoding) {
  var charsetName = "UTF-8";

  if (encoding === HttpResponseEncoding.GBK) {
    charsetName = "GBK";
  }

  return raw.toString(charsetName);
}

function addHeader(headers, key, value) {
  if (!headers[key]) {
    headers[key] = value;
  } else if (Array.isArray(headers[key])) {
    headers[key].push(value);
  } else {
    var values = [headers[key]];
    values.push(value);
    headers[key] = values;
  }
}

exports.addHeader = addHeader;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var httpRequest = __webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request.js");

__export(__webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request.js"));

function getString(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var str = r.content.toString();
        resolve(str);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getString = getString;

function getJSON(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var json = r.content.toJSON();
        resolve(json);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getJSON = getJSON;

function getImage(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        resolve(r.content.toImage());
      } catch (err) {
        reject(err);
      }
    }, function (err) {
      reject(err);
    });
  });
}

exports.getImage = getImage;

function getFile(arg, destinationFilePath) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var file = r.content.toFile(destinationFilePath);
        resolve(file);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getFile = getFile;

/***/ }),

/***/ "../node_modules/tns-core-modules/image-source/image-source.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var http;

function ensureHttp() {
  if (!http) {
    http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");
  }
}

var application;
var resources;

function getApplication() {
  if (!application) {
    application = application_1.getNativeApplication();
  }

  return application;
}

function getResources() {
  if (!resources) {
    resources = getApplication().getResources();
  }

  return resources;
}

var ImageSource = function () {
  function ImageSource() {}

  ImageSource.prototype.fromAsset = function (asset) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      asset.getImageAsync(function (image, err) {
        if (image) {
          _this.setNativeSource(image);

          resolve(_this);
        } else {
          reject(err);
        }
      });
    });
  };

  ImageSource.prototype.loadFromResource = function (name) {
    this.android = null;
    var res = getResources();

    if (res) {
      var identifier = res.getIdentifier(name, "drawable", getApplication().getPackageName());

      if (0 < identifier) {
        var bitmapDrawable = res.getDrawable(identifier);

        if (bitmapDrawable && bitmapDrawable.getBitmap) {
          this.android = bitmapDrawable.getBitmap();
        }
      }
    }

    return this.android != null;
  };

  ImageSource.prototype.fromResource = function (name) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      resolve(_this.loadFromResource(name));
    });
  };

  ImageSource.prototype.setRotationAngleFromFile = function (filename) {
    this.rotationAngle = 0;
    var ei = new android.media.ExifInterface(filename);
    var orientation = ei.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);

    switch (orientation) {
      case android.media.ExifInterface.ORIENTATION_ROTATE_90:
        this.rotationAngle = 90;
        break;

      case android.media.ExifInterface.ORIENTATION_ROTATE_180:
        this.rotationAngle = 180;
        break;

      case android.media.ExifInterface.ORIENTATION_ROTATE_270:
        this.rotationAngle = 270;
        break;
    }
  };

  ImageSource.prototype.loadFromFile = function (path) {
    var fileName = typeof path === "string" ? path.trim() : "";

    if (fileName.indexOf("~/") === 0) {
      fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
    }

    this.setRotationAngleFromFile(fileName);
    this.android = android.graphics.BitmapFactory.decodeFile(fileName, null);
    return this.android != null;
  };

  ImageSource.prototype.fromFile = function (path) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      resolve(_this.loadFromFile(path));
    });
  };

  ImageSource.prototype.loadFromData = function (data) {
    this.android = android.graphics.BitmapFactory.decodeStream(data);
    return this.android != null;
  };

  ImageSource.prototype.fromData = function (data) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      resolve(_this.loadFromData(data));
    });
  };

  ImageSource.prototype.loadFromBase64 = function (source) {
    if (typeof source === "string") {
      var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
      this.android = android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
    }

    return this.android != null;
  };

  ImageSource.prototype.fromBase64 = function (data) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      resolve(_this.loadFromBase64(data));
    });
  };

  ImageSource.prototype.setNativeSource = function (source) {
    if (source && !(source instanceof android.graphics.Bitmap)) {
      throw new Error("The method setNativeSource() expects android.graphics.Bitmap instance.");
    }

    this.android = source;
  };

  ImageSource.prototype.saveToFile = function (path, format, quality) {
    if (quality === void 0) {
      quality = 100;
    }

    if (!this.android) {
      return false;
    }

    var targetFormat = getTargetFormat(format);
    var outputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));
    var res = this.android.compress(targetFormat, quality, outputStream);
    outputStream.close();
    return res;
  };

  ImageSource.prototype.toBase64String = function (format, quality) {
    if (quality === void 0) {
      quality = 100;
    }

    if (!this.android) {
      return null;
    }

    var targetFormat = getTargetFormat(format);
    var outputStream = new java.io.ByteArrayOutputStream();
    var base64Stream = new android.util.Base64OutputStream(outputStream, android.util.Base64.NO_WRAP);
    this.android.compress(targetFormat, quality, base64Stream);
    base64Stream.close();
    outputStream.close();
    return outputStream.toString();
  };

  Object.defineProperty(ImageSource.prototype, "height", {
    get: function () {
      if (this.android) {
        return this.android.getHeight();
      }

      return NaN;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ImageSource.prototype, "width", {
    get: function () {
      if (this.android) {
        return this.android.getWidth();
      }

      return NaN;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ImageSource.prototype, "rotationAngle", {
    get: function () {
      return this._rotationAngle;
    },
    set: function (value) {
      this._rotationAngle = value;
    },
    enumerable: true,
    configurable: true
  });
  return ImageSource;
}();

exports.ImageSource = ImageSource;

function getTargetFormat(format) {
  switch (format) {
    case "jpeg":
    case "jpg":
      return android.graphics.Bitmap.CompressFormat.JPEG;

    default:
      return android.graphics.Bitmap.CompressFormat.PNG;
  }
}

function fromAsset(asset) {
  var image = new ImageSource();
  return image.fromAsset(asset);
}

exports.fromAsset = fromAsset;

function fromResource(name) {
  var image = new ImageSource();
  return image.loadFromResource(name) ? image : null;
}

exports.fromResource = fromResource;

function fromFile(path) {
  var image = new ImageSource();
  return image.loadFromFile(path) ? image : null;
}

exports.fromFile = fromFile;

function fromData(data) {
  var image = new ImageSource();
  return image.loadFromData(data) ? image : null;
}

exports.fromData = fromData;

function fromBase64(source) {
  var image = new ImageSource();
  return image.loadFromBase64(source) ? image : null;
}

exports.fromBase64 = fromBase64;

function fromNativeSource(source) {
  var imageSource = new ImageSource();
  imageSource.setNativeSource(source);
  return imageSource;
}

exports.fromNativeSource = fromNativeSource;

function fromUrl(url) {
  ensureHttp();
  return http.getImage(url);
}

exports.fromUrl = fromUrl;

function fromFileOrResource(path) {
  if (!utils_1.isFileOrResourcePath(path)) {
    throw new Error(path + " is not a valid file or resource.");
  }

  if (path.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
    return fromResource(path.substr(utils_1.RESOURCE_PREFIX.length));
  }

  return fromFile(path);
}

exports.fromFileOrResource = fromFileOrResource;

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/easysax/easysax.js":
/***/ (function(module, exports, __webpack_require__) {

/*
new function() {
	var parser = new EasySAXParser();
		parser.ns('rss', { // or false
		rss: 'http://purl.org/rss/1.0/',
		atom: 'http://www.w3.org/2005/Atom',
		xhtml: 'http://www.w3.org/1999/xhtml',
		media: 'http://search.yahoo.com/mrss/'
	});

	parser.on('error', function(msg) {
		//console.log(msg)
	});
		parser.on('startNode', function(elem, attr, uq, tagend, getStrNode) {
		attr();
		return;
		if (tagend) {
			console.log('   '+str)
		} else {
			console.log('+  '+str)
		};
	});
		parser.on('endNode', function(elem, uq, tagstart, str) {
		return;
		if (!tagstart) console.log('-  ' + str)
	});
		parser.on('textNode', function(s, uq) {
		uq(s);
		return
		console.log('   '+s)
	});
		parser.on('cdata', function(data) {
	});

	parser.on('comment', function(text) {
		//console.log('--'+text+'--')
	});
		//parser.on('question', function() {}); // <? ... ?>
	//parser.on('attention', function() {}); // <!XXXXX zzzz="eeee">
		console.time('easysax');
	for(var z=1000;z--;) {
		parser.parse(xml)
	};
	console.timeEnd('easysax');
};

*/
// << ------------------------------------------------------------------------ >> //
if (true
/*&& this == exports*/
) {
    module.exports.EasySAXParser = EasySAXParser;
  }

;

function EasySAXParser() {
  'use strict';

  if (!this) return null;
  this.angularSyntax = false;

  function nullFunc() {}

  ;
  this.onTextNode = nullFunc;
  this.onStartNode = nullFunc;
  this.onEndNode = nullFunc;
  this.onCDATA = nullFunc;
  this.onError = nullFunc;
  this.onComment = null;
  this.onQuestion = null;
  this.onAttention = null;
  this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
  this.isNamespace = false;
  this.useNS = null;
  this.default_xmlns = null;
  this.xmlns = null;
  this.nsmatrix = {
    xmlns: this.xmlns
  };
  this.hasSurmiseNS = false;
  ;
  this.attr_string = ''; // строка атрибутов

  this.attr_posstart = 0; //

  this.attr_res; // закешированный результат разбора атрибутов , null - разбор не проводился, object - хеш атрибутов, true - нет атрибутов, false - невалидный xml
}

EasySAXParser.prototype.on = function (name, cb) {
  if (typeof cb !== 'function') {
    if (cb !== null) return;
  }

  ;

  switch (name) {
    case 'error':
      this.onError = cb || nullFunc;
      break;

    case 'startNode':
      this.onStartNode = cb || nullFunc;
      break;

    case 'endNode':
      this.onEndNode = cb || nullFunc;
      break;

    case 'textNode':
      this.onTextNode = cb || nullFunc;
      break;

    case 'cdata':
      this.onCDATA = cb || nullFunc;
      break;

    case 'comment':
      this.onComment = cb;
      this.is_onComment = !!cb;
      break;

    case 'question':
      this.onQuestion = cb;
      this.is_onQuestion = !!cb;
      break;
    // <? ....  ?>

    case 'attention':
      this.onAttention = cb;
      this.is_onAttention = !!cb;
      break;
    // <!XXXXX zzzz="eeee">
  }

  ;
};

EasySAXParser.prototype.ns = function (root, ns) {
  if (!root || typeof root !== 'string' || !ns) {
    return;
  }

  ;
  var u,
      x = {},
      ok,
      v,
      i;

  for (i in ns) {
    v = ns[i];

    if (typeof v === 'string') {
      if (root === v) ok = true;
      x[i] = v;
    }

    ;
  }

  ;

  if (ok) {
    this.isNamespace = true;
    this.default_xmlns = root;
    this.useNS = x;
  }

  ;
};

EasySAXParser.prototype.parse = function (xml) {
  if (typeof xml !== 'string') {
    return;
  }

  ;

  if (this.isNamespace) {
    this.nsmatrix = {
      xmlns: this.default_xmlns
    };
    parse(xml);
    this.nsmatrix = false;
  } else {
    parse(xml);
  }

  ;
  this.attr_res = true;
}; // -----------------------------------------------------


var xharsQuot = {
  constructor: false,
  hasOwnProperty: false,
  isPrototypeOf: false,
  propertyIsEnumerable: false,
  toLocaleString: false,
  toString: false,
  valueOf: false,
  quot: '"',
  QUOT: '"',
  amp: '&',
  AMP: '&',
  nbsp: '\u00A0',
  apos: '\'',
  lt: '<',
  LT: '<',
  gt: '>',
  GT: '>',
  copy: '\u00A9',
  laquo: '\u00AB',
  raquo: '\u00BB',
  reg: '\u00AE',
  deg: '\u00B0',
  plusmn: '\u00B1',
  sup2: '\u00B2',
  sup3: '\u00B3',
  micro: '\u00B5',
  para: '\u00B6'
};

function rpEntities(s, d, x, z) {
  if (z) {
    return xharsQuot[z] || '\x01';
  }

  ;

  if (d) {
    return String.fromCharCode(d);
  }

  ;
  return String.fromCharCode(parseInt(x, 16));
}

;

function unEntities(s, i) {
  s = String(s);

  if (s.length > 3 && s.indexOf('&') !== -1) {
    if (s.indexOf('&gt;') !== -1) s = s.replace(/&gt;/g, '>');
    if (s.indexOf('&lt;') !== -1) s = s.replace(/&lt;/g, '<');
    if (s.indexOf('&quot;') !== -1) s = s.replace(/&quot;/g, '"');

    if (s.indexOf('&') !== -1) {
      s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/ig, rpEntities);
    }

    ;
  }

  ;
  return s;
}

;

EasySAXParser.prototype.allowedAngularAttributeChars = function (w) {
  if (!this.angularSyntax) {
    return false;
  } else {
    return w === 40 || // (
    w === 41 || // )
    w === 91 || // [
    w === 93 || // ]
    w === 94 || // ^
    w === 35 // #
    ;
  }
};
/*
	парсит атрибуты по требованию. Важно! - функция не генерирует исключения.
		если была ошибка разбора возврашается false
	если атрибутов нет и разбор удачен то возврашается true
	если есть атрибуты то возврашается обьект(хеш)
*/


EasySAXParser.prototype.getAttrs = function () {
  if (this.attr_res !== null) {
    return this.attr_res;
  }

  ;
  /*
  if (xxtest !== u && attr_string.indexOf(xxtest) === -1) {
      / *
          // для ускорения
          if (getAttrs('html').type == 'html') {
              ...
          };
      * /
      return true;
  };
  */

  var u,
      res = {},
      s = this.attr_string,
      i = this.attr_posstart,
      l = s.length,
      attr_list = this.hasSurmiseNS ? [] : false,
      name,
      value = '',
      ok = false,
      noValueAttribute = false,
      j,
      w,
      nn,
      n,
      hasNewMatrix,
      alias,
      newalias;

  aa: for (; i < l; i++) {
    w = s.charCodeAt(i);

    if (w === 32 || w < 14 && w > 8) {
      // \f\n\r\t\v
      continue;
    }

    ; // Check for valid attribute start char

    if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
      // ожидаем символ
      return this.attr_res = false; // error. invalid char
    }

    ;

    for (j = i + 1; j < l; j++) {
      // проверяем все символы имени атрибута
      w = s.charCodeAt(j);

      if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46
      /* https://github.com/telerik/xPlatCore/issues/179 */
      ) {
          if (noValueAttribute) {
            j--; //Started next attribute. Get back and break out of the loop.

            break;
          } else {
            continue;
          }
        }

      ;

      if (this.allowedAngularAttributeChars(w)) {
        continue;
      }

      if (w === 32 || w > 8 && w < 14) {
        // \f\n\r\t\v пробел
        noValueAttribute = true;
        continue;
      } else if (w === 61) {
        // "=" == 61
        noValueAttribute = false;
        break;
      } else {
        //console.log('error 2');
        if (!noValueAttribute) return this.attr_res = false; // error. invalid char
      }

      ;
      break;
    }

    ;
    name = s.substring(i, j).trim();
    ok = true;

    if (name === 'xmlns:xmlns') {
      //console.log('error 6')
      return this.attr_res = false; // error. invalid name
    }

    ;
    w = s.charCodeAt(j + 1);

    while (w = s.charCodeAt(j + 1)) {
      if (w === 32 || w > 8 && w < 14) {
        // \f\n\r\t\v пробел
        j++;
      } else {
        break;
      }
    }

    if (!noValueAttribute) {
      if (w === 34) {
        // '"'
        j = s.indexOf('"', i = j + 2);
      } else {
        if (w === 39) {
          j = s.indexOf('\'', i = j + 2);
        } else {
          // "'"
          return this.attr_res = false; // error. invalid char
        }

        ;
      }

      ;
    }

    if (j === -1) {
      //console.log('error 4')
      return this.attr_res = false; // error. invalid char
    }

    ;

    if (j + 1 < l && !noValueAttribute) {
      w = s.charCodeAt(j + 1);

      if (w > 32 || w < 9 || w < 32 && w > 13) {
        // error. invalid char
        //console.log('error 5')
        return this.attr_res = false;
      }

      ;
    }

    ;

    if (noValueAttribute) {
      value = '';
    } else {
      value = s.substring(i, j);
    } //i = j + 1; // след. семвол уже проверен потому проверять нужно следуюший


    i = j; // след. семвол уже проверен потому проверять нужно следуюший

    if (this.isNamespace) {
      //
      if (this.hasSurmiseNS) {
        // есть подозрение что в атрибутах присутствует xmlns
        if (newalias = name === 'xmlns' ? 'xmlns' : name.charCodeAt(0) === 120 && name.substr(0, 6) === 'xmlns:' && name.substr(6)) {
          alias = this.useNS[unEntities(value)];

          if (alias) {
            if (this.nsmatrix[newalias] !== alias) {
              if (!hasNewMatrix) {
                hasNewMatrix = true;
                nn = {};

                for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];

                this.nsmatrix = nn;
              }

              ;
              this.nsmatrix[newalias] = alias;
            }

            ;
          } else {
            if (this.nsmatrix[newalias]) {
              if (!hasNewMatrix) {
                hasNewMatrix = true;
                nn = {};

                for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];

                this.nsmatrix = nn;
              }

              ;
              this.nsmatrix[newalias] = false;
            }

            ;
          }

          ;
          res[name] = value;
          continue;
        }

        ;
        attr_list.push(name, value);
        continue;
      }

      ;
      w = name.length;

      while (--w) {
        if (name.charCodeAt(w) === 58) {
          // ':'
          if (w = this.nsmatrix[name.substring(0, w)]) {
            res[w + name.substr(w)] = value;
          }

          ;
          continue aa; // 'xml:base' ???
        }

        ;
      }

      ;
    }

    ;
    res[name] = value;
    noValueAttribute = false;
  }

  ;

  if (!ok) {
    return this.attr_res = true; // атрибутов нет, ошибок тоже нет
  }

  ;

  if (this.hasSurmiseNS) {
    bb: for (i = 0, l = attr_list.length; i < l; i++) {
      name = attr_list[i++];
      w = name.length;

      while (--w) {
        // name.indexOf(':')
        if (name.charCodeAt(w) === 58) {
          // ':'
          if (w = this.nsmatrix[name.substring(0, w)]) {
            res[w + name.substr(w)] = attr_list[i];
          }

          ;
          continue bb;
          break;
        }

        ;
      }

      ;
      res[name] = attr_list[i];
    }

    ;
  }

  ;
  return this.attr_res = res;
}; // xml - string


EasySAXParser.prototype.parse = function (xml) {
  var u,
      xml = String(xml),
      nodestack = [],
      stacknsmatrix = [] //, string_node
  ,
      elem,
      tagend = false,
      tagstart = false,
      j = 0,
      i = 0,
      k = 0,
      len,
      x,
      y,
      q,
      w,
      xmlns,
      stopIndex = 0,
      stop // используется при разборе "namespace" . если встретился неизвестное пространство то события не генерируются
  ,
      _nsmatrix,
      ok,
      pos = 0,
      ln = 0,
      lnStart = -2,
      lnEnd = -1;

  len = xml.length;

  function getStringNode() {
    return xml.substring(i, j + 1);
  }

  ;

  function findLineAndColumnFromPos() {
    while (lnStart < lnEnd && lnEnd < pos) {
      lnStart = lnEnd;
      lnEnd = xml.indexOf("\n", lnEnd + 1);
      ++ln;
    }

    return {
      line: ln,
      column: pos - lnStart
    };
  }

  function position(p) {
    pos = p;
    return findLineAndColumnFromPos;
  }

  while (j !== -1) {
    stop = stopIndex > 0;

    if (xml.charCodeAt(j) === 60) {
      // "<"
      i = j;
    } else {
      i = xml.indexOf('<', j);
    }

    ;

    if (i === -1) {
      // конец разбора
      if (nodestack.length) {
        this.onError('end file', position(j));
        return;
      }

      ;
      return;
    }

    ;

    if (j !== i && !stop) {
      ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
      if (ok === false) return;
    }

    ;
    w = xml.charCodeAt(i + 1);

    if (w === 33) {
      // "!"
      w = xml.charCodeAt(i + 2);

      if (w === 91 && xml.substr(i + 3, 6) === 'CDATA[') {
        // 91 == "["
        j = xml.indexOf(']]>', i);

        if (j === -1) {
          this.onError('cdata', position(i));
          return;
        }

        ; //x = xml.substring(i+9, j);

        if (!stop) {
          ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
          if (ok === false) return;
        }

        ;
        j += 3;
        continue;
      }

      ;

      if (w === 45 && xml.charCodeAt(i + 3) === 45) {
        // 45 == "-"
        j = xml.indexOf('-->', i);

        if (j === -1) {
          this.onError('expected -->', position(i));
          return;
        }

        ;

        if (this.is_onComment && !stop) {
          ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
          if (ok === false) return;
        }

        ;
        j += 3;
        continue;
      }

      ;
      j = xml.indexOf('>', i + 1);

      if (j === -1) {
        this.onError('expected ">"', position(i + 1));
        return;
      }

      ;

      if (this.is_onAttention && !stop) {
        ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
        if (ok === false) return;
      }

      ;
      j += 1;
      continue;
    } else {
      if (w === 63) {
        // "?"
        j = xml.indexOf('?>', i);

        if (j === -1) {
          // error
          this.onError('...?>', position(i));
          return;
        }

        ;

        if (this.is_onQuestion) {
          ok = this.onQuestion(xml.substring(i, j + 2), position(i));
          if (ok === false) return;
        }

        ;
        j += 2;
        continue;
      }

      ;
    }

    ;
    var inside = false;

    for (k = i, j = -1; k < len; k++) {
      var c = xml.charCodeAt(k);

      if (!inside) {
        if (c === 34) {
          // '"'
          inside = c;
        } else if (c === 39) {
          // "'"
          inside = c;
        } else if (c === 62) {
          // <
          j = k;
          break;
        }
      } else {
        if (c === inside) {
          inside = false;
        }
      }
    }

    if (j == -1) {
      // error
      this.onError('...>', position(i + 1));
      return;
    }

    ;
    this.attr_res = true; // атрибутов нет
    //if (xml.charCodeAt(i+1) === 47) { // </...

    if (w === 47) {
      // </...
      tagstart = false;
      tagend = true; // проверяем что должен быть закрыт тотже тег что и открывался

      x = elem = nodestack.pop();
      q = i + 2 + x.length; //console.log()

      if (xml.substring(i + 2, q) !== x) {
        this.onError('close tagname', position(i + 2));
        return;
      }

      ; // проверим что в закрываюшем теге нет лишнего

      for (; q < j; q++) {
        w = xml.charCodeAt(q);

        if (w === 32 || w > 8 && w < 14) {
          // \f\n\r\t\v пробел
          continue;
        }

        ;
        this.onError('close tag', position(i + 2));
        return;
      }

      ;
    } else {
      if (xml.charCodeAt(j - 1) === 47) {
        // .../>
        x = elem = xml.substring(i + 1, j - 1);
        tagstart = true;
        tagend = true;
      } else {
        x = elem = xml.substring(i + 1, j);
        tagstart = true;
        tagend = false;
      }

      ;

      if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
        this.onError('first char nodeName', position(i + 1));
        return;
      }

      ;

      for (q = 1, y = x.length; q < y; q++) {
        w = x.charCodeAt(q);

        if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46
        /* https://github.com/telerik/xPlatCore/issues/179 */
        ) {
            continue;
          }

        ;

        if (w === 32 || w < 14 && w > 8) {
          // \f\n\r\t\v пробел
          elem = x.substring(0, q);
          this.attr_res = null; // возможно есть атирибуты

          break;
        }

        ;
        this.onError('invalid nodeName', position(i + 1));
        return;
      }

      ;

      if (!tagend) {
        nodestack.push(elem);
      }

      ;
    }

    ;

    if (this.isNamespace) {
      if (stop) {
        if (tagend) {
          if (!tagstart) {
            if (--stopIndex === 0) {
              this.nsmatrix = stacknsmatrix.pop();
            }

            ;
          }

          ;
        } else {
          stopIndex += 1;
        }

        ;
        j += 1;
        continue;
      }

      ;
      _nsmatrix = this.nsmatrix;

      if (!tagend) {
        stacknsmatrix.push(this.nsmatrix);

        if (this.attr_res !== true) {
          if (this.hasSurmiseNS = x.indexOf('xmlns', q) !== -1) {
            this.attr_string = x;
            this.attr_posstart = q;
            this.getAttrs();
            this.hasSurmiseNS = false;
          }

          ;
        }

        ;
      }

      ;
      w = elem.indexOf(':');

      if (w !== -1) {
        xmlns = this.nsmatrix[elem.substring(0, w)];
        elem = elem.substr(w + 1);
      } else {
        xmlns = this.nsmatrix.xmlns;
      }

      ;

      if (!xmlns) {
        if (tagend) {
          if (tagstart) {
            this.nsmatrix = _nsmatrix;
          } else {
            this.nsmatrix = stacknsmatrix.pop();
          }

          ;
        } else {
          stopIndex = 1; // первый элемент для которого не определено пространство имен

          this.attr_res = true;
        }

        ;
        j += 1;
        continue;
      }

      ;
      elem = xmlns + ':' + elem;
    }

    ; //string_node = xml.substring(i, j+1); // текст ноды как есть

    if (tagstart) {
      // is_onStartNode
      this.attr_string = x;
      this.attr_posstart = q;
      var that = this;
      ok = this.onStartNode(elem, function () {
        return that.getAttrs();
      }, unEntities, tagend, getStringNode, position(i));

      if (ok === false) {
        return;
      }

      ;
      this.attr_res = true;
    }

    ;

    if (tagend) {
      ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));

      if (ok === false) {
        return;
      }

      ;

      if (this.isNamespace) {
        if (tagstart) {
          this.nsmatrix = _nsmatrix;
        } else {
          this.nsmatrix = stacknsmatrix.pop();
        }

        ;
      }

      ;
    }

    ;
    j += 1;
  }

  ;
};

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/esprima/esprima.js":
/***/ (function(module, exports) {

/*
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function (global) {
  'use strict';

  var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
  Token = {
    BooleanLiteral: 1,
    EOF: 2,
    Identifier: 3,
    Keyword: 4,
    NullLiteral: 5,
    NumericLiteral: 6,
    Punctuator: 7,
    StringLiteral: 8
  };
  TokenName = {};
  TokenName[Token.BooleanLiteral] = 'Boolean';
  TokenName[Token.EOF] = '<end>';
  TokenName[Token.Identifier] = 'Identifier';
  TokenName[Token.Keyword] = 'Keyword';
  TokenName[Token.NullLiteral] = 'Null';
  TokenName[Token.NumericLiteral] = 'Numeric';
  TokenName[Token.Punctuator] = 'Punctuator';
  TokenName[Token.StringLiteral] = 'String';
  Syntax = {
    ArrayExpression: 'ArrayExpression',
    BinaryExpression: 'BinaryExpression',
    CallExpression: 'CallExpression',
    ConditionalExpression: 'ConditionalExpression',
    EmptyStatement: 'EmptyStatement',
    ExpressionStatement: 'ExpressionStatement',
    Identifier: 'Identifier',
    Literal: 'Literal',
    LabeledStatement: 'LabeledStatement',
    LogicalExpression: 'LogicalExpression',
    MemberExpression: 'MemberExpression',
    ObjectExpression: 'ObjectExpression',
    Program: 'Program',
    Property: 'Property',
    ThisExpression: 'ThisExpression',
    UnaryExpression: 'UnaryExpression'
  }; // Error messages should be identical to V8.

  Messages = {
    UnexpectedToken: 'Unexpected token %0',
    UnknownLabel: 'Undefined label \'%0\'',
    Redeclaration: '%0 \'%1\' has already been declared'
  }; // Ensure the condition is true, otherwise throw an error.
  // This is only to have a better contract semantic, i.e. another safety net
  // to catch a logic error. The condition shall be fulfilled in normal case.
  // Do NOT use this to enforce a certain condition on any user input.

  function assert(condition, message) {
    if (!condition) {
      throw new Error('ASSERT: ' + message);
    }
  }

  function isDecimalDigit(ch) {
    return ch >= 48 && ch <= 57; // 0..9
  } // 7.2 White Space


  function isWhiteSpace(ch) {
    return ch === 32 || // space
    ch === 9 || // tab
    ch === 0xB || ch === 0xC || ch === 0xA0 || ch >= 0x1680 && '\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF'.indexOf(String.fromCharCode(ch)) > 0;
  } // 7.3 Line Terminators


  function isLineTerminator(ch) {
    return ch === 10 || ch === 13 || ch === 0x2028 || ch === 0x2029;
  } // 7.6 Identifier Names and Identifiers


  function isIdentifierStart(ch) {
    return ch === 36 || ch === 95 || // $ (dollar) and _ (underscore)
    ch >= 65 && ch <= 90 || // A..Z
    ch >= 97 && ch <= 122; // a..z
  }

  function isIdentifierPart(ch) {
    return ch === 36 || ch === 95 || // $ (dollar) and _ (underscore)
    ch >= 65 && ch <= 90 || // A..Z
    ch >= 97 && ch <= 122 || // a..z
    ch >= 48 && ch <= 57; // 0..9
  } // 7.6.1.1 Keywords


  function isKeyword(id) {
    return id === 'this';
  } // 7.4 Comments


  function skipWhitespace() {
    while (index < length && isWhiteSpace(source.charCodeAt(index))) {
      ++index;
    }
  }

  function getIdentifier() {
    var start, ch;
    start = index++;

    while (index < length) {
      ch = source.charCodeAt(index);

      if (isIdentifierPart(ch)) {
        ++index;
      } else {
        break;
      }
    }

    return source.slice(start, index);
  }

  function scanIdentifier() {
    var start, id, type;
    start = index;
    id = getIdentifier(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.

    if (id.length === 1) {
      type = Token.Identifier;
    } else if (isKeyword(id)) {
      type = Token.Keyword;
    } else if (id === 'null') {
      type = Token.NullLiteral;
    } else if (id === 'true' || id === 'false') {
      type = Token.BooleanLiteral;
    } else {
      type = Token.Identifier;
    }

    return {
      type: type,
      value: id,
      range: [start, index]
    };
  } // 7.7 Punctuators


  function scanPunctuator() {
    var start = index,
        code = source.charCodeAt(index),
        code2,
        ch1 = source[index],
        ch2;

    switch (code) {
      // Check for most common single-character punctuators.
      case 46: // . dot

      case 40: // ( open bracket

      case 41: // ) close bracket

      case 59: // ; semicolon

      case 44: // , comma

      case 123: // { open curly brace

      case 125: // } close curly brace

      case 91: // [

      case 93: // ]

      case 58: // :

      case 63:
        // ?
        ++index;
        return {
          type: Token.Punctuator,
          value: String.fromCharCode(code),
          range: [start, index]
        };

      default:
        code2 = source.charCodeAt(index + 1); // '=' (char #61) marks an assignment or comparison operator.

        if (code2 === 61) {
          switch (code) {
            case 37: // %

            case 38: // &

            case 42: // *:

            case 43: // +

            case 45: // -

            case 47: // /

            case 60: // <

            case 62: // >

            case 124:
              // |
              index += 2;
              return {
                type: Token.Punctuator,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                range: [start, index]
              };

            case 33: // !

            case 61:
              // =
              index += 2; // !== and ===

              if (source.charCodeAt(index) === 61) {
                ++index;
              }

              return {
                type: Token.Punctuator,
                value: source.slice(start, index),
                range: [start, index]
              };

            default:
              break;
          }
        }

        break;
    } // Peek more characters.


    ch2 = source[index + 1]; // Other 2-character punctuators: && ||

    if (ch1 === ch2 && '&|'.indexOf(ch1) >= 0) {
      index += 2;
      return {
        type: Token.Punctuator,
        value: ch1 + ch2,
        range: [start, index]
      };
    }

    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
      ++index;
      return {
        type: Token.Punctuator,
        value: ch1,
        range: [start, index]
      };
    }

    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
  } // 7.8.3 Numeric Literals


  function scanNumericLiteral() {
    var number, start, ch;
    ch = source[index];
    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
    start = index;
    number = '';

    if (ch !== '.') {
      number = source[index++];
      ch = source[index]; // Hex number starts with '0x'.
      // Octal number starts with '0'.

      if (number === '0') {
        // decimal number starts with '0' such as '09' is illegal.
        if (ch && isDecimalDigit(ch.charCodeAt(0))) {
          throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }
      }

      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }

      ch = source[index];
    }

    if (ch === '.') {
      number += source[index++];

      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }

      ch = source[index];
    }

    if (ch === 'e' || ch === 'E') {
      number += source[index++];
      ch = source[index];

      if (ch === '+' || ch === '-') {
        number += source[index++];
      }

      if (isDecimalDigit(source.charCodeAt(index))) {
        while (isDecimalDigit(source.charCodeAt(index))) {
          number += source[index++];
        }
      } else {
        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
      }
    }

    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    return {
      type: Token.NumericLiteral,
      value: parseFloat(number),
      range: [start, index]
    };
  } // 7.8.4 String Literals


  function scanStringLiteral() {
    var str = '',
        quote,
        start,
        ch,
        octal = false;
    quote = source[index];
    assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
    start = index;
    ++index;

    while (index < length) {
      ch = source[index++];

      if (ch === quote) {
        quote = '';
        break;
      } else if (ch === '\\') {
        ch = source[index++];

        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
          switch (ch) {
            case 'n':
              str += '\n';
              break;

            case 'r':
              str += '\r';
              break;

            case 't':
              str += '\t';
              break;

            case 'b':
              str += '\b';
              break;

            case 'f':
              str += '\f';
              break;

            case 'v':
              str += '\x0B';
              break;

            default:
              str += ch;
              break;
          }
        } else {
          if (ch === '\r' && source[index] === '\n') {
            ++index;
          }
        }
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        break;
      } else {
        str += ch;
      }
    }

    if (quote !== '') {
      throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    return {
      type: Token.StringLiteral,
      value: str,
      octal: octal,
      range: [start, index]
    };
  }

  function isIdentifierName(token) {
    return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
  }

  function advance() {
    var ch;
    skipWhitespace();

    if (index >= length) {
      return {
        type: Token.EOF,
        range: [index, index]
      };
    }

    ch = source.charCodeAt(index); // Very common: ( and ) and ;

    if (ch === 40 || ch === 41 || ch === 58) {
      return scanPunctuator();
    } // String literal starts with single quote (#39) or double quote (#34).


    if (ch === 39 || ch === 34) {
      return scanStringLiteral();
    }

    if (isIdentifierStart(ch)) {
      return scanIdentifier();
    } // Dot (.) char #46 can also start a floating-point number, hence the need
    // to check the next character.


    if (ch === 46) {
      if (isDecimalDigit(source.charCodeAt(index + 1))) {
        return scanNumericLiteral();
      }

      return scanPunctuator();
    }

    if (isDecimalDigit(ch)) {
      return scanNumericLiteral();
    }

    return scanPunctuator();
  }

  function lex() {
    var token;
    token = lookahead;
    index = token.range[1];
    lookahead = advance();
    index = token.range[1];
    return token;
  }

  function peek() {
    var pos;
    pos = index;
    lookahead = advance();
    index = pos;
  } // Throw an exception


  function throwError(token, messageFormat) {
    var error,
        args = Array.prototype.slice.call(arguments, 2),
        msg = messageFormat.replace(/%(\d)/g, function (whole, index) {
      assert(index < args.length, 'Message reference must be in range');
      return args[index];
    });
    error = new Error(msg);
    error.index = index;
    error.description = msg;
    throw error;
  } // Throw an exception because of the token.


  function throwUnexpected(token) {
    throwError(token, Messages.UnexpectedToken, token.value);
  } // Expect the next token to match the specified punctuator.
  // If not, an exception will be thrown.


  function expect(value) {
    var token = lex();

    if (token.type !== Token.Punctuator || token.value !== value) {
      throwUnexpected(token);
    }
  } // Return true if the next token matches the specified punctuator.


  function match(value) {
    return lookahead.type === Token.Punctuator && lookahead.value === value;
  } // Return true if the next token matches the specified keyword


  function matchKeyword(keyword) {
    return lookahead.type === Token.Keyword && lookahead.value === keyword;
  }

  function consumeSemicolon() {
    // Catch the very common case first: immediately a semicolon (char #59).
    if (source.charCodeAt(index) === 59) {
      lex();
      return;
    }

    skipWhitespace();

    if (match(';')) {
      lex();
      return;
    }

    if (lookahead.type !== Token.EOF && !match('}')) {
      throwUnexpected(lookahead);
    }
  } // 11.1.4 Array Initialiser


  function parseArrayInitialiser() {
    var elements = [];
    expect('[');

    while (!match(']')) {
      if (match(',')) {
        lex();
        elements.push(null);
      } else {
        elements.push(parseExpression());

        if (!match(']')) {
          expect(',');
        }
      }
    }

    expect(']');
    return delegate.createArrayExpression(elements);
  } // 11.1.5 Object Initialiser


  function parseObjectPropertyKey() {
    var token;
    skipWhitespace();
    token = lex(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.

    if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
      return delegate.createLiteral(token);
    }

    return delegate.createIdentifier(token.value);
  }

  function parseObjectProperty() {
    var token, key;
    token = lookahead;
    skipWhitespace();

    if (token.type === Token.EOF || token.type === Token.Punctuator) {
      throwUnexpected(token);
    }

    key = parseObjectPropertyKey();
    expect(':');
    return delegate.createProperty('init', key, parseExpression());
  }

  function parseObjectInitialiser() {
    var properties = [];
    expect('{');

    while (!match('}')) {
      properties.push(parseObjectProperty());

      if (!match('}')) {
        expect(',');
      }
    }

    expect('}');
    return delegate.createObjectExpression(properties);
  } // 11.1.6 The Grouping Operator


  function parseGroupExpression() {
    var expr;
    expect('(');
    expr = parseExpression();
    expect(')');
    return expr;
  } // 11.1 Primary Expressions


  function parsePrimaryExpression() {
    var type, token, expr;

    if (match('(')) {
      return parseGroupExpression();
    }

    type = lookahead.type;

    if (type === Token.Identifier) {
      expr = delegate.createIdentifier(lex().value);
    } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
      expr = delegate.createLiteral(lex());
    } else if (type === Token.Keyword) {
      if (matchKeyword('this')) {
        lex();
        expr = delegate.createThisExpression();
      }
    } else if (type === Token.BooleanLiteral) {
      token = lex();
      token.value = token.value === 'true';
      expr = delegate.createLiteral(token);
    } else if (type === Token.NullLiteral) {
      token = lex();
      token.value = null;
      expr = delegate.createLiteral(token);
    } else if (match('[')) {
      expr = parseArrayInitialiser();
    } else if (match('{')) {
      expr = parseObjectInitialiser();
    }

    if (expr) {
      return expr;
    }

    throwUnexpected(lex());
  } // 11.2 Left-Hand-Side Expressions


  function parseArguments() {
    var args = [];
    expect('(');

    if (!match(')')) {
      while (index < length) {
        args.push(parseExpression());

        if (match(')')) {
          break;
        }

        expect(',');
      }
    }

    expect(')');
    return args;
  }

  function parseNonComputedProperty() {
    var token;
    token = lex();

    if (!isIdentifierName(token)) {
      throwUnexpected(token);
    }

    return delegate.createIdentifier(token.value);
  }

  function parseNonComputedMember() {
    expect('.');
    return parseNonComputedProperty();
  }

  function parseComputedMember() {
    var expr;
    expect('[');
    expr = parseExpression();
    expect(']');
    return expr;
  }

  function parseLeftHandSideExpression() {
    var expr, args, property;
    expr = parsePrimaryExpression();

    while (true) {
      if (match('[')) {
        property = parseComputedMember();
        expr = delegate.createMemberExpression('[', expr, property);
      } else if (match('.')) {
        property = parseNonComputedMember();
        expr = delegate.createMemberExpression('.', expr, property);
      } else if (match('(')) {
        args = parseArguments();
        expr = delegate.createCallExpression(expr, args);
      } else {
        break;
      }
    }

    return expr;
  } // 11.3 Postfix Expressions


  var parsePostfixExpression = parseLeftHandSideExpression; // 11.4 Unary Operators

  function parseUnaryExpression() {
    var token, expr;

    if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
      expr = parsePostfixExpression();
    } else if (match('+') || match('-') || match('!')) {
      token = lex();
      expr = parseUnaryExpression();
      expr = delegate.createUnaryExpression(token.value, expr);
    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
      throwError({}, Messages.UnexpectedToken);
    } else {
      expr = parsePostfixExpression();
    }

    return expr;
  }

  function binaryPrecedence(token) {
    var prec = 0;

    if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
      return 0;
    }

    switch (token.value) {
      case '||':
        prec = 1;
        break;

      case '&&':
        prec = 2;
        break;

      case '==':
      case '!=':
      case '===':
      case '!==':
        prec = 6;
        break;

      case '<':
      case '>':
      case '<=':
      case '>=':
      case 'instanceof':
        prec = 7;
        break;

      case 'in':
        prec = 7;
        break;

      case '+':
      case '-':
        prec = 9;
        break;

      case '*':
      case '/':
      case '%':
        prec = 11;
        break;

      default:
        break;
    }

    return prec;
  } // 11.5 Multiplicative Operators
  // 11.6 Additive Operators
  // 11.7 Bitwise Shift Operators
  // 11.8 Relational Operators
  // 11.9 Equality Operators
  // 11.10 Binary Bitwise Operators
  // 11.11 Binary Logical Operators


  function parseBinaryExpression() {
    var expr, token, prec, stack, right, operator, left, i;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);

    if (prec === 0) {
      return left;
    }

    token.prec = prec;
    lex();
    right = parseUnaryExpression();
    stack = [left, token, right];

    while ((prec = binaryPrecedence(lookahead)) > 0) {
      // Reduce: make a binary expression from the three topmost entries.
      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
        right = stack.pop();
        operator = stack.pop().value;
        left = stack.pop();
        expr = delegate.createBinaryExpression(operator, left, right);
        stack.push(expr);
      } // Shift.


      token = lex();
      token.prec = prec;
      stack.push(token);
      expr = parseUnaryExpression();
      stack.push(expr);
    } // Final reduce to clean-up the stack.


    i = stack.length - 1;
    expr = stack[i];

    while (i > 1) {
      expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
      i -= 2;
    }

    return expr;
  } // 11.12 Conditional Operator


  function parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression();

    if (match('?')) {
      lex();
      consequent = parseConditionalExpression();
      expect(':');
      alternate = parseConditionalExpression();
      expr = delegate.createConditionalExpression(expr, consequent, alternate);
    }

    return expr;
  } // Simplification since we do not support AssignmentExpression.


  var parseExpression = parseConditionalExpression; // Polymer Syntax extensions
  // Filter ::
  //   Identifier
  //   Identifier "(" ")"
  //   Identifier "(" FilterArguments ")"

  function parseFilter() {
    var identifier, args;
    identifier = lex();

    if (identifier.type !== Token.Identifier) {
      throwUnexpected(identifier);
    }

    args = match('(') ? parseArguments() : [];
    return delegate.createFilter(identifier.value, args);
  } // Filters ::
  //   "|" Filter
  //   Filters "|" Filter


  function parseFilters() {
    while (match('|')) {
      lex();
      parseFilter();
    }
  } // TopLevel ::
  //   LabelledExpressions
  //   AsExpression
  //   InExpression
  //   FilterExpression
  // AsExpression ::
  //   FilterExpression as Identifier
  // InExpression ::
  //   Identifier, Identifier in FilterExpression
  //   Identifier in FilterExpression
  // FilterExpression ::
  //   Expression
  //   Expression Filters


  function parseTopLevel() {
    skipWhitespace();
    peek();
    var expr = parseExpression();

    if (expr) {
      if (lookahead.value === ',' || lookahead.value == 'in' && expr.type === Syntax.Identifier) {
        parseInExpression(expr);
      } else {
        parseFilters();

        if (lookahead.value === 'as') {
          parseAsExpression(expr);
        } else {
          delegate.createTopLevel(expr);
        }
      }
    }

    if (lookahead.type !== Token.EOF) {
      throwUnexpected(lookahead);
    }
  }

  function parseAsExpression(expr) {
    lex(); // as

    var identifier = lex().value;
    delegate.createAsExpression(expr, identifier);
  }

  function parseInExpression(identifier) {
    var indexName;

    if (lookahead.value === ',') {
      lex();
      if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
      indexName = lex().value;
    }

    lex(); // in

    var expr = parseExpression();
    parseFilters();
    delegate.createInExpression(identifier.name, indexName, expr);
  }

  function parse(code, inDelegate) {
    delegate = inDelegate;
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;
    state = {
      labelSet: {}
    };
    return parseTopLevel();
  }

  global.esprima = {
    parse: parse
  };
})(module.exports);

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */


function detectEval() {
  // Don't test for eval if we're running in a Chrome App environment.
  // We check for APIs set that only exist in a Chrome App context.
  if (typeof chrome !== 'undefined' && chrome.app && chrome.app.runtime) {
    return false;
  } // Firefox OS Apps do not allow eval. This feature detection is very hacky
  // but even if some other platform adds support for this function this code
  // will continue to work.


  if (typeof navigator != 'undefined' && navigator.getDeviceStorage) {
    return false;
  }

  try {
    var f = new Function('', 'return true;');
    return f();
  } catch (ex) {
    return false;
  }
}

var hasEval = detectEval();

function isIndex(s) {
  return +s === s >>> 0 && s !== '';
}

function toNumber(s) {
  return +s;
}

function isObject(obj) {
  return obj === Object(obj);
}

var numberIsNaN = Number.isNaN || function (value) {
  return typeof value === 'number' && isNaN(value);
};

function areSameValue(left, right) {
  if (left === right) return left !== 0 || 1 / left === 1 / right;
  if (numberIsNaN(left) && numberIsNaN(right)) return true;
  return left !== left && right !== right;
}

var createObject = '__proto__' in {} ? function (obj) {
  return obj;
} : function (obj) {
  var proto = obj.__proto__;
  if (!proto) return obj;
  var newObject = Object.create(proto);
  Object.getOwnPropertyNames(obj).forEach(function (name) {
    Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
  });
  return newObject;
};
var identStart = '[\$_a-zA-Z]';
var identPart = '[\$_a-zA-Z0-9]';
var identRegExp = new RegExp('^' + identStart + '+' + identPart + '*' + '$');

function getPathCharType(char) {
  if (char === undefined) return 'eof';
  var code = char.charCodeAt(0);

  switch (code) {
    case 0x5B: // [

    case 0x5D: // ]

    case 0x2E: // .

    case 0x22: // "

    case 0x27: // '

    case 0x30:
      // 0
      return char;

    case 0x5F: // _

    case 0x24:
      // $
      return 'ident';

    case 0x20: // Space

    case 0x09: // Tab

    case 0x0A: // Newline

    case 0x0D: // Return

    case 0xA0: // No-break space

    case 0xFEFF: // Byte Order Mark

    case 0x2028: // Line Separator

    case 0x2029:
      // Paragraph Separator
      return 'ws';
  } // a-z, A-Z


  if (0x61 <= code && code <= 0x7A || 0x41 <= code && code <= 0x5A) return 'ident'; // 1-9

  if (0x31 <= code && code <= 0x39) return 'number';
  return 'else';
}

var pathStateMachine = {
  'beforePath': {
    'ws': ['beforePath'],
    'ident': ['inIdent', 'append'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },
  'inPath': {
    'ws': ['inPath'],
    '.': ['beforeIdent'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },
  'beforeIdent': {
    'ws': ['beforeIdent'],
    'ident': ['inIdent', 'append']
  },
  'inIdent': {
    'ident': ['inIdent', 'append'],
    '0': ['inIdent', 'append'],
    'number': ['inIdent', 'append'],
    'ws': ['inPath', 'push'],
    '.': ['beforeIdent', 'push'],
    '[': ['beforeElement', 'push'],
    'eof': ['afterPath', 'push']
  },
  'beforeElement': {
    'ws': ['beforeElement'],
    '0': ['afterZero', 'append'],
    'number': ['inIndex', 'append'],
    "'": ['inSingleQuote', 'append', ''],
    '"': ['inDoubleQuote', 'append', '']
  },
  'afterZero': {
    'ws': ['afterElement', 'push'],
    ']': ['inPath', 'push']
  },
  'inIndex': {
    '0': ['inIndex', 'append'],
    'number': ['inIndex', 'append'],
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  },
  'inSingleQuote': {
    "'": ['afterElement'],
    'eof': ['error'],
    'else': ['inSingleQuote', 'append']
  },
  'inDoubleQuote': {
    '"': ['afterElement'],
    'eof': ['error'],
    'else': ['inDoubleQuote', 'append']
  },
  'afterElement': {
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  }
};

function noop() {}

function parsePath(path) {
  var keys = [];
  var index = -1;
  var c,
      newChar,
      key,
      type,
      transition,
      action,
      typeMap,
      mode = 'beforePath';
  var actions = {
    push: function () {
      if (key === undefined) return;
      keys.push(key);
      key = undefined;
    },
    append: function () {
      if (key === undefined) key = newChar;else key += newChar;
    }
  };

  function maybeUnescapeQuote() {
    if (index >= path.length) return;
    var nextChar = path[index + 1];

    if (mode == 'inSingleQuote' && nextChar == "'" || mode == 'inDoubleQuote' && nextChar == '"') {
      index++;
      newChar = nextChar;
      actions.append();
      return true;
    }
  }

  while (mode) {
    index++;
    c = path[index];
    if (c == '\\' && maybeUnescapeQuote(mode)) continue;
    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || 'error';
    if (transition == 'error') return; // parse error;

    mode = transition[0];
    action = actions[transition[1]] || noop;
    newChar = transition[2] === undefined ? c : transition[2];
    action();

    if (mode === 'afterPath') {
      return keys;
    }
  }

  return; // parse error
}

function isIdent(s) {
  return identRegExp.test(s);
}

var constructorIsPrivate = {};

function Path(parts, privateToken) {
  if (privateToken !== constructorIsPrivate) throw Error('Use Path.get to retrieve path objects');

  for (var i = 0; i < parts.length; i++) {
    this.push(String(parts[i]));
  }

  if (hasEval && this.length) {
    this.getValueFrom = this.compiledGetValueFromFn();
  }
} // TODO(rafaelw): Make simple LRU cache


var pathCache = {};

function getPath(pathString) {
  if (pathString instanceof Path) return pathString;
  if (pathString == null || pathString.length == 0) pathString = '';

  if (typeof pathString != 'string') {
    if (isIndex(pathString.length)) {
      // Constructed with array-like (pre-parsed) keys
      return new Path(pathString, constructorIsPrivate);
    }

    pathString = String(pathString);
  }

  var path = pathCache[pathString];
  if (path) return path;
  var parts = parsePath(pathString);
  if (!parts) return invalidPath;
  var path = new Path(parts, constructorIsPrivate);
  pathCache[pathString] = path;
  return path;
}

Path.get = getPath;

function formatAccessor(key) {
  if (isIndex(key)) {
    return '[' + key + ']';
  } else {
    return '["' + key.replace(/"/g, '\\"') + '"]';
  }
}

Path.prototype = createObject({
  __proto__: [],
  valid: true,
  toString: function () {
    var pathString = '';

    for (var i = 0; i < this.length; i++) {
      var key = this[i];

      if (isIdent(key)) {
        pathString += i ? '.' + key : key;
      } else {
        pathString += formatAccessor(key);
      }
    }

    return pathString;
  },
  getValueFrom: function (obj, directObserver) {
    for (var i = 0; i < this.length; i++) {
      if (obj == null) return;
      obj = obj[this[i]];
    }

    return obj;
  },
  iterateObjects: function (obj, observe) {
    for (var i = 0; i < this.length; i++) {
      if (i) obj = obj[this[i - 1]];
      if (!isObject(obj)) return;
      observe(obj, this[i]);
    }
  },
  compiledGetValueFromFn: function () {
    var str = '';
    var pathString = 'obj';
    str += 'if (obj != null';
    var i = 0;
    var key;

    for (; i < this.length - 1; i++) {
      key = this[i];
      pathString += isIdent(key) ? '.' + key : formatAccessor(key);
      str += ' &&\n     ' + pathString + ' != null';
    }

    str += ')\n';
    var key = this[i];
    pathString += isIdent(key) ? '.' + key : formatAccessor(key);
    str += '  return ' + pathString + ';\nelse\n  return undefined;';
    return new Function('obj', str);
  },
  setValueFrom: function (obj, value) {
    if (!this.length) return false;

    for (var i = 0; i < this.length - 1; i++) {
      if (!isObject(obj)) return false;
      obj = obj[this[i]];
    }

    if (!isObject(obj)) return false;
    obj[this[i]] = value;
    return true;
  }
});
var invalidPath = new Path('', constructorIsPrivate);
invalidPath.valid = false;

invalidPath.getValueFrom = invalidPath.setValueFrom = function () {};

exports.Path = Path;

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js":
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
// This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
// The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
// The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
// Code distributed by Google as part of the polymer project is also
// subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
var esprima = __webpack_require__("../node_modules/tns-core-modules/js-libs/esprima/esprima.js").esprima;

var Path = __webpack_require__("../node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js").Path;

(function (global) {
  'use strict'; // TODO(rafaelw): Implement simple LRU.

  var expressionParseCache = Object.create(null);

  function getExpression(expressionText) {
    var expression = expressionParseCache[expressionText];

    if (!expression) {
      var delegate = new ASTDelegate();
      esprima.parse(expressionText, delegate);
      expression = new Expression(delegate);
      expressionParseCache[expressionText] = expression;
    }

    return expression;
  }

  function Literal(value) {
    this.value = value;
    this.valueFn_ = undefined;
  }

  Literal.prototype = {
    valueFn: function () {
      if (!this.valueFn_) {
        var value = this.value;

        this.valueFn_ = function () {
          return value;
        };
      }

      return this.valueFn_;
    }
  };

  function IdentPath(name) {
    this.name = name;
    this.path = Path.get(name);
  }

  IdentPath.prototype = {
    valueFn: function () {
      if (!this.valueFn_) {
        var name = this.name;
        var path = this.path;

        this.valueFn_ = function (model, observer, changedModel) {
          if (observer) observer.addPath(model, path);

          if (changedModel) {
            var result = path.getValueFrom(changedModel);

            if (result !== undefined) {
              return result;
            }
          }

          return path.getValueFrom(model);
        };
      }

      return this.valueFn_;
    },
    setValue: function (model, newValue) {
      if (this.path.length == 1) {
        model = findScope(model, this.path[0]);
      }

      return this.path.setValueFrom(model, newValue);
    }
  };

  function MemberExpression(object, property, accessor) {
    this.computed = accessor == '[';
    this.dynamicDeps = typeof object == 'function' || object.dynamicDeps || this.computed && !(property instanceof Literal);
    this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
    this.object = this.simplePath ? object : getFn(object);
    this.property = !this.computed || this.simplePath ? property : getFn(property);
  }

  MemberExpression.prototype = {
    get fullPath() {
      if (!this.fullPath_) {
        var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [this.object.name];
        parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
        this.fullPath_ = Path.get(parts);
      }

      return this.fullPath_;
    },

    valueFn: function () {
      if (!this.valueFn_) {
        var object = this.object;

        if (this.simplePath) {
          var path = this.fullPath;

          this.valueFn_ = function (model, observer) {
            if (observer) observer.addPath(model, path);
            return path.getValueFrom(model);
          };
        } else if (!this.computed) {
          var path = Path.get(this.property.name);

          this.valueFn_ = function (model, observer, filterRegistry) {
            var context = object(model, observer, filterRegistry);
            if (observer) observer.addPath(context, path);
            return path.getValueFrom(context);
          };
        } else {
          // Computed property.
          var property = this.property;

          this.valueFn_ = function (model, observer, filterRegistry) {
            var context = object(model, observer, filterRegistry);
            var propName = property(model, observer, filterRegistry);
            if (observer) observer.addPath(context, [propName]);
            return context ? context[propName] : undefined;
          };
        }
      }

      return this.valueFn_;
    },
    setValue: function (model, newValue) {
      if (this.simplePath) {
        this.fullPath.setValueFrom(model, newValue);
        return newValue;
      }

      var object = this.object(model);
      var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
      return object[propName] = newValue;
    }
  };

  function Filter(name, args) {
    this.name = name;
    this.args = [];

    for (var i = 0; i < args.length; i++) {
      this.args[i] = getFn(args[i]);
    }
  }

  Filter.prototype = {
    transform: function (model, observer, filterRegistry, toModelDirection, initialArgs) {
      var fn = filterRegistry[this.name];
      var context = model;

      if (fn) {
        context = undefined;
      } else {
        fn = context[this.name];

        if (!fn) {
          console.error('Cannot find function or filter: ' + this.name);
          return;
        }
      } // If toModelDirection is falsey, then the "normal" (dom-bound) direction
      // is used. Otherwise, it looks for a 'toModel' property function on the
      // object.


      if (toModelDirection) {
        fn = fn.toModel;
      } else if (typeof fn.toView == 'function') {
        fn = fn.toView;
      }

      if (typeof fn != 'function') {
        console.error('Cannot find function or filter: ' + this.name);
        return;
      }

      var args = initialArgs || [];

      for (var i = 0; i < this.args.length; i++) {
        args.push(getFn(this.args[i])(model, observer, filterRegistry));
      }

      return fn.apply(context, args);
    }
  };

  function notImplemented() {
    throw Error('Not Implemented');
  }

  var unaryOperators = {
    '+': function (v) {
      return +v;
    },
    '-': function (v) {
      return -v;
    },
    '!': function (v) {
      return !v;
    }
  };
  var binaryOperators = {
    '+': function (l, r) {
      return l + r;
    },
    '-': function (l, r) {
      return l - r;
    },
    '*': function (l, r) {
      return l * r;
    },
    '/': function (l, r) {
      return l / r;
    },
    '%': function (l, r) {
      return l % r;
    },
    '<': function (l, r) {
      return l < r;
    },
    '>': function (l, r) {
      return l > r;
    },
    '<=': function (l, r) {
      return l <= r;
    },
    '>=': function (l, r) {
      return l >= r;
    },
    '==': function (l, r) {
      return l == r;
    },
    '!=': function (l, r) {
      return l != r;
    },
    '===': function (l, r) {
      return l === r;
    },
    '!==': function (l, r) {
      return l !== r;
    },
    '&&': function (l, r) {
      return l && r;
    },
    '||': function (l, r) {
      return l || r;
    }
  };

  function getFn(arg) {
    return typeof arg == 'function' ? arg : arg.valueFn();
  }

  function ASTDelegate() {
    this.expression = null;
    this.filters = [];
    this.deps = {};
    this.currentPath = undefined;
    this.scopeIdent = undefined;
    this.indexIdent = undefined;
    this.dynamicDeps = false;
  }

  ASTDelegate.prototype = {
    createUnaryExpression: function (op, argument) {
      if (!unaryOperators[op]) throw Error('Disallowed operator: ' + op);
      argument = getFn(argument);
      return function (model, observer, filterRegistry) {
        return unaryOperators[op](argument(model, observer, filterRegistry));
      };
    },
    createBinaryExpression: function (op, left, right) {
      if (!binaryOperators[op]) throw Error('Disallowed operator: ' + op);
      left = getFn(left);
      right = getFn(right);

      switch (op) {
        case '||':
          this.dynamicDeps = true;
          return function (model, observer, filterRegistry) {
            return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
          };

        case '&&':
          this.dynamicDeps = true;
          return function (model, observer, filterRegistry) {
            return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
          };
      }

      return function (model, observer, filterRegistry) {
        return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
      };
    },
    createConditionalExpression: function (test, consequent, alternate) {
      test = getFn(test);
      consequent = getFn(consequent);
      alternate = getFn(alternate);
      this.dynamicDeps = true;
      return function (model, observer, filterRegistry) {
        return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
      };
    },
    createIdentifier: function (name) {
      var ident = new IdentPath(name);
      ident.type = 'Identifier';
      return ident;
    },
    createMemberExpression: function (accessor, object, property) {
      var ex = new MemberExpression(object, property, accessor);
      if (ex.dynamicDeps) this.dynamicDeps = true;
      return ex;
    },
    createCallExpression: function (expression, args) {
      if (!(expression instanceof IdentPath)) throw Error('Only identifier function invocations are allowed');
      var filter = new Filter(expression.name, args);
      return function (model, observer, filterRegistry) {
        return filter.transform(model, observer, filterRegistry, false);
      };
    },
    createLiteral: function (token) {
      return new Literal(token.value);
    },
    createArrayExpression: function (elements) {
      for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);

      return function (model, observer, filterRegistry) {
        var arr = [];

        for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));

        return arr;
      };
    },
    createProperty: function (kind, key, value) {
      return {
        key: key instanceof IdentPath ? key.name : key.value,
        value: value
      };
    },
    createObjectExpression: function (properties) {
      for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);

      return function (model, observer, filterRegistry) {
        var obj = {};

        for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);

        return obj;
      };
    },
    createFilter: function (name, args) {
      this.filters.push(new Filter(name, args));
    },
    createAsExpression: function (expression, scopeIdent) {
      this.expression = expression;
      this.scopeIdent = scopeIdent;
    },
    createInExpression: function (scopeIdent, indexIdent, expression) {
      this.expression = expression;
      this.scopeIdent = scopeIdent;
      this.indexIdent = indexIdent;
    },
    createTopLevel: function (expression) {
      this.expression = expression;
    },
    createThisExpression: notImplemented
  };

  function Expression(delegate) {
    this.scopeIdent = delegate.scopeIdent;
    this.indexIdent = delegate.indexIdent;
    if (!delegate.expression) throw Error('No expression found.');
    this.expression = delegate.expression;
    getFn(this.expression); // forces enumeration of path dependencies

    this.filters = delegate.filters;
    this.dynamicDeps = delegate.dynamicDeps;
  }

  Expression.prototype = {
    getValue: function (model, isBackConvert, changedModel, observer) {
      var value = getFn(this.expression)(model.context, observer, changedModel);

      for (var i = 0; i < this.filters.length; i++) {
        value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [value]);
      }

      return value;
    },
    setValue: function (model, newValue, filterRegistry) {
      var count = this.filters ? this.filters.length : 0;

      while (count-- > 0) {
        newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [newValue]);
      }

      if (this.expression.setValue) return this.expression.setValue(model, newValue);
    }
    /**
     * Converts a style property name to a css property name. For example:
     * "WebkitUserSelect" to "-webkit-user-select"
     */

  };

  function convertStylePropertyName(name) {
    return String(name).replace(/[A-Z]/g, function (c) {
      return '-' + c.toLowerCase();
    });
  }

  var parentScopeName = '@' + Math.random().toString(36).slice(2); // Single ident paths must bind directly to the appropriate scope object.
  // I.e. Pushed values in two-bindings need to be assigned to the actual model
  // object.

  function findScope(model, prop) {
    while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
      model = model[parentScopeName];
    }

    return model;
  }

  function isLiteralExpression(pathString) {
    switch (pathString) {
      case '':
        return false;

      case 'false':
      case 'null':
      case 'true':
        return true;
    }

    if (!isNaN(Number(pathString))) return true;
    return false;
  }

  ;

  function PolymerExpressions() {}

  PolymerExpressions.prototype = {
    // "built-in" filters
    styleObject: function (value) {
      var parts = [];

      for (var key in value) {
        parts.push(convertStylePropertyName(key) + ': ' + value[key]);
      }

      return parts.join('; ');
    },
    tokenList: function (value) {
      var tokens = [];

      for (var key in value) {
        if (value[key]) tokens.push(key);
      }

      return tokens.join(' ');
    },
    // binding delegate API
    prepareInstancePositionChanged: function (template) {
      var indexIdent = template.polymerExpressionIndexIdent_;
      if (!indexIdent) return;
      return function (templateInstance, index) {
        templateInstance.model[indexIdent] = index;
      };
    },
    prepareInstanceModel: function (template) {
      var scopeName = template.polymerExpressionScopeIdent_;
      if (!scopeName) return;
      var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
      var indexName = template.polymerExpressionIndexIdent_;
      return function (model) {
        return createScopeObject(parentScope, model, scopeName, indexName);
      };
    }
  };
  var createScopeObject = '__proto__' in {} ? function (parentScope, model, scopeName, indexName) {
    var scope = {};
    scope[scopeName] = model;
    scope[indexName] = undefined;
    scope[parentScopeName] = parentScope;
    scope.__proto__ = parentScope;
    return scope;
  } : function (parentScope, model, scopeName, indexName) {
    var scope = Object.create(parentScope);
    Object.defineProperty(scope, scopeName, {
      value: model,
      configurable: true,
      writable: true
    });
    Object.defineProperty(scope, indexName, {
      value: undefined,
      configurable: true,
      writable: true
    });
    Object.defineProperty(scope, parentScopeName, {
      value: parentScope,
      configurable: true,
      writable: true
    });
    return scope;
  };
  global.PolymerExpressions = PolymerExpressions;
  PolymerExpressions.getExpression = getExpression;
})(module.exports);

/***/ }),

/***/ "../node_modules/tns-core-modules/matrix/matrix.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var number_utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/number-utils.js");

exports.getTransformMatrix = function (_a) {
  var property = _a.property,
      value = _a.value;
  return TRANSFORM_MATRIXES[property](value);
};

var TRANSFORM_MATRIXES = {
  "scale": function (_a) {
    var x = _a.x,
        y = _a.y;
    return [x, 0, 0, 0, y, 0, 0, 0, 1];
  },
  "translate": function (_a) {
    var x = _a.x,
        y = _a.y;
    return [1, 0, x, 0, 1, y, 0, 0, 1];
  },
  "rotate": function (angleInDeg) {
    var angleInRad = number_utils_1.degreesToRadians(angleInDeg);
    return [Math.cos(angleInRad), -Math.sin(angleInRad), 0, Math.sin(angleInRad), Math.cos(angleInRad), 0, 0, 0, 1];
  }
};

exports.matrixArrayToCssMatrix = function (m) {
  return [m[0], m[3], m[1], m[4], m[2], m[5]];
};

function multiplyAffine2d(m1, m2) {
  return [m1[0] * m2[0] + m1[1] * m2[3], m1[0] * m2[1] + m1[1] * m2[4], m1[0] * m2[2] + m1[1] * m2[5] + m1[2], m1[3] * m2[0] + m1[4] * m2[3], m1[3] * m2[1] + m1[4] * m2[4], m1[3] * m2[2] + m1[4] * m2[5] + m1[5]];
}

exports.multiplyAffine2d = multiplyAffine2d;

function decompose2DTransformMatrix(matrix) {
  verifyTransformMatrix(matrix);

  var _a = matrix.slice(),
      A = _a[0],
      B = _a[1],
      C = _a[2],
      D = _a[3],
      E = _a[4],
      F = _a[5];

  var determinant = A * D - B * C;
  var translate = {
    x: E || 0,
    y: F || 0
  };
  var rotate = 0;
  var scale = {
    x: 1,
    y: 1
  };

  if (A || B) {
    var R = Math.sqrt(A * A + B * B);
    rotate = B > 0 ? Math.acos(A / R) : -Math.acos(A / R);
    scale = {
      x: R,
      y: determinant / R
    };
  } else if (C || D) {
    var R = Math.sqrt(C * C + D * D);
    rotate = Math.PI / 2 - (D > 0 ? Math.acos(-C / R) : -Math.acos(C / R));
    scale = {
      x: determinant / R,
      y: R
    };
  }

  rotate = number_utils_1.radiansToDegrees(rotate);
  return {
    translate: translate,
    rotate: rotate,
    scale: scale
  };
}

exports.decompose2DTransformMatrix = decompose2DTransformMatrix;

function verifyTransformMatrix(matrix) {
  if (matrix.length < 6) {
    throw new Error("Transform matrix should be 2x3.");
  }
}

/***/ }),

/***/ "../node_modules/tns-core-modules/platform/platform.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var appModule = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var MIN_TABLET_PIXELS = 600;
var platformNames;

(function (platformNames) {
  platformNames.android = "Android";
  platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));

var Device = function () {
  function Device() {}

  Object.defineProperty(Device.prototype, "os", {
    get: function () {
      return platformNames.android;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "manufacturer", {
    get: function () {
      if (!this._manufacturer) {
        this._manufacturer = android.os.Build.MANUFACTURER;
      }

      return this._manufacturer;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "osVersion", {
    get: function () {
      if (!this._osVersion) {
        this._osVersion = android.os.Build.VERSION.RELEASE;
      }

      return this._osVersion;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "model", {
    get: function () {
      if (!this._model) {
        this._model = android.os.Build.MODEL;
      }

      return this._model;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "sdkVersion", {
    get: function () {
      if (!this._sdkVersion) {
        this._sdkVersion = android.os.Build.VERSION.SDK;
      }

      return this._sdkVersion;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "deviceType", {
    get: function () {
      if (!this._deviceType) {
        var dips = Math.min(screen.mainScreen.widthPixels, screen.mainScreen.heightPixels) / screen.mainScreen.scale;

        if (dips >= MIN_TABLET_PIXELS) {
          this._deviceType = "Tablet";
        } else {
          this._deviceType = "Phone";
        }
      }

      return this._deviceType;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "uuid", {
    get: function () {
      if (!this._uuid) {
        var nativeApp = appModule.android.nativeApp;
        this._uuid = android.provider.Settings.Secure.getString(nativeApp.getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
      }

      return this._uuid;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "language", {
    get: function () {
      if (!this._language) {
        this._language = java.util.Locale.getDefault().getLanguage().replace("_", "-");
      }

      return this._language;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "region", {
    get: function () {
      if (!this._region) {
        this._region = java.util.Locale.getDefault().getCountry();
      }

      return this._region;
    },
    enumerable: true,
    configurable: true
  });
  return Device;
}();

var MainScreen = function () {
  function MainScreen() {}

  MainScreen.prototype.reinitMetrics = function () {
    if (!this._metrics) {
      this._metrics = new android.util.DisplayMetrics();
    }

    this.initMetrics();
  };

  MainScreen.prototype.initMetrics = function () {
    var nativeApp = appModule.getNativeApplication();
    nativeApp.getSystemService(android.content.Context.WINDOW_SERVICE).getDefaultDisplay().getRealMetrics(this._metrics);
  };

  Object.defineProperty(MainScreen.prototype, "metrics", {
    get: function () {
      if (!this._metrics) {
        appModule.on("cssChanged", this.reinitMetrics, this);
        appModule.on(appModule.orientationChangedEvent, this.reinitMetrics, this);
        this._metrics = new android.util.DisplayMetrics();
        this.initMetrics();
      }

      return this._metrics;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "widthPixels", {
    get: function () {
      return this.metrics.widthPixels;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "heightPixels", {
    get: function () {
      return this.metrics.heightPixels;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "scale", {
    get: function () {
      return this.metrics.density;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "widthDIPs", {
    get: function () {
      return this.metrics.widthPixels / this.metrics.density;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "heightDIPs", {
    get: function () {
      return this.metrics.heightPixels / this.metrics.density;
    },
    enumerable: true,
    configurable: true
  });
  return MainScreen;
}();

exports.device = new Device();
var screen;

(function (screen) {
  screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));

exports.isAndroid = true;

/***/ }),

/***/ "../node_modules/tns-core-modules/profiling/profiling.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

function uptime() {
  return global.android ? org.nativescript.Process.getUpTime() : global.__tns_uptime();
}

exports.uptime = uptime;

function log(message) {
  if (global.__nslog) {
    global.__nslog("CONSOLE LOG: " + message);
  }

  console.log(message);
}

exports.log = log;
var timers = {};
var anyGlobal = global;
var profileNames = [];
exports.time = global.__time || Date.now;

function start(name) {
  var info = timers[name];

  if (info) {
    info.currentStart = exports.time();
    info.runCount++;
  } else {
    info = {
      totalTime: 0,
      count: 0,
      currentStart: exports.time(),
      runCount: 1
    };
    timers[name] = info;
    profileNames.push(name);
  }
}

exports.start = start;

function stop(name) {
  var info = timers[name];

  if (!info) {
    throw new Error("No timer started: " + name);
  }

  if (info.runCount) {
    info.runCount--;

    if (info.runCount) {
      info.count++;
    } else {
      info.lastTime = exports.time() - info.currentStart;
      info.totalTime += info.lastTime;
      info.count++;
      info.currentStart = 0;
    }
  } else {
    throw new Error("Timer " + name + " paused more times than started.");
  }

  return info;
}

exports.stop = stop;

function timer(name) {
  return timers[name];
}

exports.timer = timer;

function print(name) {
  var info = timers[name];

  if (!info) {
    throw new Error("No timer started: " + name);
  }

  console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
  return info;
}

exports.print = print;

function isRunning(name) {
  var info = timers[name];
  return !!(info && info.runCount);
}

exports.isRunning = isRunning;

function countersProfileFunctionFactory(fn, name, type) {
  if (type === void 0) {
    type = 1;
  }

  profileNames.push(name);
  return function () {
    start(name);

    try {
      return fn.apply(this, arguments);
    } finally {
      stop(name);
    }
  };
}

function timelineProfileFunctionFactory(fn, name, type) {
  if (type === void 0) {
    type = 1;
  }

  return type === 1 ? function () {
    var start = exports.time();

    try {
      return fn.apply(this, arguments);
    } finally {
      var end = exports.time();
      console.log("Timeline: Modules: " + name + " " + this + "  (" + start + "ms. - " + end + "ms.)");
    }
  } : function () {
    var start = exports.time();

    try {
      return fn.apply(this, arguments);
    } finally {
      var end = exports.time();
      console.log("Timeline: Modules: " + name + "  (" + start + "ms. - " + end + "ms.)");
    }
  };
}

var Level;

(function (Level) {
  Level[Level["none"] = 0] = "none";
  Level[Level["lifecycle"] = 1] = "lifecycle";
  Level[Level["timeline"] = 2] = "timeline";
})(Level = exports.Level || (exports.Level = {}));

var tracingLevel = Level.none;
var profileFunctionFactory;

function enable(mode) {
  if (mode === void 0) {
    mode = "counters";
  }

  profileFunctionFactory = mode && {
    counters: countersProfileFunctionFactory,
    timeline: timelineProfileFunctionFactory
  }[mode];
  tracingLevel = {
    lifecycle: Level.lifecycle,
    timeline: Level.timeline
  }[mode] || Level.none;
}

exports.enable = enable;

try {
  var appConfig = __webpack_require__("./package.json");

  if (appConfig && appConfig.profiling) {
    enable(appConfig.profiling);
  }
} catch (e1) {
  try {
    console.log("Profiling startup failed to figure out defaults from package.json, error: " + e1);
  } catch (e2) {}
}

function disable() {
  profileFunctionFactory = undefined;
}

exports.disable = disable;

function profileFunction(fn, customName) {
  return profileFunctionFactory(fn, customName || fn.name);
}

var profileMethodUnnamed = function (target, key, descriptor) {
  if (descriptor === undefined) {
    descriptor = Object.getOwnPropertyDescriptor(target, key);
  }

  var originalMethod = descriptor.value;
  var className = "";

  if (target && target.constructor && target.constructor.name) {
    className = target.constructor.name + ".";
  }

  var name = className + key;
  descriptor.value = profileFunctionFactory(originalMethod, name, 1);
  return descriptor;
};

var profileStaticMethodUnnamed = function (ctor, key, descriptor) {
  if (descriptor === undefined) {
    descriptor = Object.getOwnPropertyDescriptor(ctor, key);
  }

  var originalMethod = descriptor.value;
  var className = "";

  if (ctor && ctor.name) {
    className = ctor.name + ".";
  }

  var name = className + key;
  descriptor.value = profileFunctionFactory(originalMethod, name, 0);
  return descriptor;
};

function profileMethodNamed(name) {
  return function (target, key, descriptor) {
    if (descriptor === undefined) {
      descriptor = Object.getOwnPropertyDescriptor(target, key);
    }

    var originalMethod = descriptor.value;
    descriptor.value = profileFunctionFactory(originalMethod, name);
    return descriptor;
  };
}

var voidMethodDecorator = function () {};

function profile(nameFnOrTarget, fnOrKey, descriptor) {
  if (typeof nameFnOrTarget === "object" && (typeof fnOrKey === "string" || typeof fnOrKey === "symbol")) {
    if (!profileFunctionFactory) {
      return;
    }

    return profileMethodUnnamed(nameFnOrTarget, fnOrKey, descriptor);
  } else if (typeof nameFnOrTarget === "function" && (typeof fnOrKey === "string" || typeof fnOrKey === "symbol")) {
    if (!profileFunctionFactory) {
      return;
    }

    return profileStaticMethodUnnamed(nameFnOrTarget, fnOrKey, descriptor);
  } else if (typeof nameFnOrTarget === "string" && typeof fnOrKey === "function") {
    if (!profileFunctionFactory) {
      return fnOrKey;
    }

    return profileFunction(fnOrKey, nameFnOrTarget);
  } else if (typeof nameFnOrTarget === "function") {
    if (!profileFunctionFactory) {
      return nameFnOrTarget;
    }

    return profileFunction(nameFnOrTarget);
  } else if (typeof nameFnOrTarget === "string") {
    if (!profileFunctionFactory) {
      return voidMethodDecorator;
    }

    return profileMethodNamed(nameFnOrTarget);
  } else {
    if (!profileFunctionFactory) {
      return voidMethodDecorator;
    }

    return profileMethodUnnamed;
  }
}

exports.profile = profile;

function dumpProfiles() {
  profileNames.forEach(function (name) {
    var info = timers[name];

    if (info) {
      console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
    } else {
      console.log("---- [" + name + "] Never called");
    }
  });
}

exports.dumpProfiles = dumpProfiles;

function resetProfiles() {
  profileNames.forEach(function (name) {
    var info = timers[name];

    if (info) {
      if (info.runCount) {
        console.log("---- timer with name [" + name + "] is currently running and won't be reset");
      } else {
        timers[name] = undefined;
      }
    }
  });
}

exports.resetProfiles = resetProfiles;

function startCPUProfile(name) {
  if (anyGlobal.android) {
    __startCPUProfiler(name);
  }
}

exports.startCPUProfile = startCPUProfile;

function stopCPUProfile(name) {
  if (anyGlobal.android) {
    __stopCPUProfiler(name);
  }
}

exports.stopCPUProfile = stopCPUProfile;

function level() {
  return tracingLevel;
}

exports.level = level;

function trace(message, start, end) {
  log("Timeline: Modules: " + message + "  (" + start + "ms. - " + end + "ms.)");
}

exports.trace = trace;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/text/formatted-string.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var span_1 = __webpack_require__("../node_modules/tns-core-modules/text/span.js");

exports.Span = span_1.Span;

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var observable_array_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable-array/observable-array.js");

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var knownCollections;

(function (knownCollections) {
  knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var CHILD_SPAN = "Span";

var FormattedString = function (_super) {
  __extends(FormattedString, _super);

  function FormattedString() {
    var _this = _super.call(this) || this;

    _this._spans = new observable_array_1.ObservableArray();

    _this._spans.addEventListener(observable_array_1.ObservableArray.changeEvent, _this.onSpansCollectionChanged, _this);

    return _this;
  }

  Object.defineProperty(FormattedString.prototype, "fontFamily", {
    get: function () {
      return this.style.fontFamily;
    },
    set: function (value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontSize", {
    get: function () {
      return this.style.fontSize;
    },
    set: function (value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontStyle", {
    get: function () {
      return this.style.fontStyle;
    },
    set: function (value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontWeight", {
    get: function () {
      return this.style.fontWeight;
    },
    set: function (value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "textDecoration", {
    get: function () {
      return this.style.textDecoration;
    },
    set: function (value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "color", {
    get: function () {
      return this.style.color;
    },
    set: function (value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "backgroundColor", {
    get: function () {
      return this.style.backgroundColor;
    },
    set: function (value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "spans", {
    get: function () {
      if (!this._spans) {
        this._spans = new observable_array_1.ObservableArray();
      }

      return this._spans;
    },
    enumerable: true,
    configurable: true
  });

  FormattedString.prototype.toString = function () {
    var result = "";

    for (var i = 0, length_1 = this._spans.length; i < length_1; i++) {
      result += this._spans.getItem(i).text;
    }

    return result;
  };

  FormattedString.prototype._addArrayFromBuilder = function (name, value) {
    if (name === knownCollections.spans) {
      this.spans.push(value);
    }
  };

  FormattedString.prototype._addChildFromBuilder = function (name, value) {
    if (name === CHILD_SPAN) {
      this.spans.push(value);
    }
  };

  FormattedString.prototype.onSpansCollectionChanged = function (eventData) {
    if (eventData.addedCount > 0) {
      for (var i = 0; i < eventData.addedCount; i++) {
        var span = eventData.object.getItem(eventData.index + i);

        this._addView(span);

        this.addPropertyChangeHandler(span);
      }
    }

    if (eventData.removed && eventData.removed.length > 0) {
      for (var p = 0; p < eventData.removed.length; p++) {
        var span = eventData.removed[p];
        this.removePropertyChangeHandler(span);

        this._removeView(span);
      }
    }

    this.notifyPropertyChange(".", this);
  };

  FormattedString.prototype.addPropertyChangeHandler = function (span) {
    var style = span.style;
    span.on(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
    style.on("fontFamilyChange", this.onPropertyChange, this);
    style.on("fontSizeChange", this.onPropertyChange, this);
    style.on("fontStyleChange", this.onPropertyChange, this);
    style.on("fontWeightChange", this.onPropertyChange, this);
    style.on("textDecorationChange", this.onPropertyChange, this);
    style.on("colorChange", this.onPropertyChange, this);
    style.on("backgroundColorChange", this.onPropertyChange, this);
  };

  FormattedString.prototype.removePropertyChangeHandler = function (span) {
    var style = span.style;
    span.off(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
    style.off("fontFamilyChange", this.onPropertyChange, this);
    style.off("fontSizeChange", this.onPropertyChange, this);
    style.off("fontStyleChange", this.onPropertyChange, this);
    style.off("fontWeightChange", this.onPropertyChange, this);
    style.off("textDecorationChange", this.onPropertyChange, this);
    style.off("colorChange", this.onPropertyChange, this);
    style.off("backgroundColorChange", this.onPropertyChange, this);
  };

  FormattedString.prototype.onPropertyChange = function (data) {
    this.notifyPropertyChange(data.propertyName, this);
  };

  FormattedString.prototype.eachChild = function (callback) {
    this.spans.forEach(function (v, i, arr) {
      return callback(v);
    });
  };

  return FormattedString;
}(view_1.ViewBase);

exports.FormattedString = FormattedString;

/***/ }),

/***/ "../node_modules/tns-core-modules/text/span.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var Span = function (_super) {
  __extends(Span, _super);

  function Span() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Span.prototype, "fontFamily", {
    get: function () {
      return this.style.fontFamily;
    },
    set: function (value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontSize", {
    get: function () {
      return this.style.fontSize;
    },
    set: function (value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontStyle", {
    get: function () {
      return this.style.fontStyle;
    },
    set: function (value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontWeight", {
    get: function () {
      return this.style.fontWeight;
    },
    set: function (value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "textDecoration", {
    get: function () {
      return this.style.textDecoration;
    },
    set: function (value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "color", {
    get: function () {
      return this.style.color;
    },
    set: function (value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "backgroundColor", {
    get: function () {
      return this.style.backgroundColor;
    },
    set: function (value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "text", {
    get: function () {
      return this._text;
    },
    set: function (value) {
      if (this._text !== value) {
        this._text = value;
        this.notifyPropertyChange("text", value);
      }
    },
    enumerable: true,
    configurable: true
  });

  Span.prototype._setTextInternal = function (value) {
    this._text = value;
  };

  return Span;
}(view_1.ViewBase);

exports.Span = Span;

/***/ }),

/***/ "../node_modules/tns-core-modules/text/text.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var encoding;

(function (encoding) {
  encoding.ISO_8859_1 = "ISO-8859-1";
  encoding.US_ASCII = "US-ASCII";
  encoding.UTF_16 = "UTF-16";
  encoding.UTF_16BE = "UTF-16BE";
  encoding.UTF_16LE = "UTF-16LE";
  encoding.UTF_8 = "UTF-8";
})(encoding = exports.encoding || (exports.encoding = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/timer/timer.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var timeoutHandler;
var timeoutCallbacks = {};
var timerId = 0;

function createHandlerAndGetId() {
  if (!timeoutHandler) {
    timeoutHandler = new android.os.Handler(android.os.Looper.myLooper());
  }

  timerId++;
  return timerId;
}

function setTimeout(callback, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }

  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  var id = createHandlerAndGetId();

  var invoke = function () {
    return callback.apply(void 0, args);
  };

  var zoneBound = zonedCallback(invoke);
  var runnable = new java.lang.Runnable({
    run: function () {
      zoneBound();

      if (timeoutCallbacks[id]) {
        delete timeoutCallbacks[id];
      }
    }
  });

  if (!timeoutCallbacks[id]) {
    timeoutCallbacks[id] = runnable;
  }

  timeoutHandler.postDelayed(runnable, long(milliseconds));
  return id;
}

exports.setTimeout = setTimeout;

function clearTimeout(id) {
  var index = id;

  if (timeoutCallbacks[index]) {
    timeoutHandler.removeCallbacks(timeoutCallbacks[index]);
    delete timeoutCallbacks[index];
  }
}

exports.clearTimeout = clearTimeout;

function setInterval(callback, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }

  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  var id = createHandlerAndGetId();
  var handler = timeoutHandler;

  var invoke = function () {
    return callback.apply(void 0, args);
  };

  var zoneBound = zonedCallback(invoke);
  var runnable = new java.lang.Runnable({
    run: function () {
      zoneBound();

      if (timeoutCallbacks[id]) {
        handler.postDelayed(runnable, long(milliseconds));
      }
    }
  });

  if (!timeoutCallbacks[id]) {
    timeoutCallbacks[id] = runnable;
  }

  timeoutHandler.postDelayed(runnable, long(milliseconds));
  return id;
}

exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;

/***/ }),

/***/ "../node_modules/tns-core-modules/trace/trace.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];

var _errorHandler;

function enable() {
  enabled = true;
}

exports.enable = enable;

function disable() {
  enabled = false;
}

exports.disable = disable;

function isEnabled() {
  return enabled;
}

exports.isEnabled = isEnabled;

function isCategorySet(category) {
  return category in _categories;
}

exports.isCategorySet = isCategorySet;

function addWriter(writer) {
  _writers.push(writer);
}

exports.addWriter = addWriter;

function removeWriter(writer) {
  var index = _writers.indexOf(writer);

  if (index >= 0) {
    _writers.splice(index, 1);
  }
}

exports.removeWriter = removeWriter;

function clearWriters() {
  if (_writers.length > 0) {
    _writers.splice(0, _writers.length);
  }
}

exports.clearWriters = clearWriters;

function setCategories(categories) {
  _categories = {};
  addCategories(categories);
}

exports.setCategories = setCategories;

function addCategories(categories) {
  var split = categories.split(",");

  for (var i = 0; i < split.length; i++) {
    _categories[split[i].trim()] = true;
  }
}

exports.addCategories = addCategories;

function write(message, category, type) {
  var i;

  if (type === messageType.error) {
    for (i = 0; i < _writers.length; i++) {
      _writers[i].write(message, category, type);
    }

    return;
  }

  if (!enabled) {
    return;
  }

  if (!(category in _categories)) {
    return;
  }

  for (i = 0; i < _writers.length; i++) {
    _writers[i].write(message, category, type);
  }
}

exports.write = write;

function notifyEvent(object, name, data) {
  if (!enabled) {
    return;
  }

  var i, listener, filters;

  for (i = 0; i < _eventListeners.length; i++) {
    listener = _eventListeners[i];

    if (listener.filter) {
      filters = listener.filter.split(",");
      filters.forEach(function (value) {
        if (value.trim() === name) {
          listener.on(object, name, data);
        }
      });
    } else {
      listener.on(object, name, data);
    }
  }
}

exports.notifyEvent = notifyEvent;

function addEventListener(listener) {
  _eventListeners.push(listener);
}

exports.addEventListener = addEventListener;

function removeEventListener(listener) {
  var index = _eventListeners.indexOf(listener);

  if (index >= 0) {
    _eventListeners.splice(index, 1);
  }
}

exports.removeEventListener = removeEventListener;
var messageType;

(function (messageType) {
  messageType.log = 0;
  messageType.info = 1;
  messageType.warn = 2;
  messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));

var categories;

(function (categories) {
  categories.VisualTreeEvents = "VisualTreeEvents";
  categories.Layout = "Layout";
  categories.Style = "Style";
  categories.ViewHierarchy = "ViewHierarchy";
  categories.NativeLifecycle = "NativeLifecycle";
  categories.Debug = "Debug";
  categories.Navigation = "Navigation";
  categories.Test = "Test";
  categories.Binding = "Binding";
  categories.BindingError = "BindingError";
  categories.Error = "Error";
  categories.Animation = "Animation";
  categories.Transition = "Transition";
  categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
  categories.separator = ",";

  function concat() {
    var i;
    var result;

    for (i = 0; i < arguments.length; i++) {
      if (!result) {
        result = arguments[i];
        continue;
      }

      result = result.concat(categories.separator, arguments[i]);
    }

    return result;
  }

  categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));

var ConsoleWriter = function () {
  function ConsoleWriter() {}

  ConsoleWriter.prototype.write = function (message, category, type) {
    if (!console) {
      return;
    }

    var msgType;

    if (type === undefined) {
      msgType = messageType.log;
    } else {
      msgType = type;
    }

    switch (msgType) {
      case messageType.log:
        console.log(category + ": " + message);
        break;

      case messageType.info:
        console.info(category + ": " + message);
        break;

      case messageType.warn:
        console.warn(category + ": " + message);
        break;

      case messageType.error:
        console.error(category + ": " + message);
        break;
    }
  };

  return ConsoleWriter;
}();

addWriter(new ConsoleWriter());

var DefaultErrorHandler = function () {
  function DefaultErrorHandler() {}

  DefaultErrorHandler.prototype.handlerError = function (error) {
    throw error;
  };

  return DefaultErrorHandler;
}();

exports.DefaultErrorHandler = DefaultErrorHandler;
setErrorHandler(new DefaultErrorHandler());

function getErrorHandler() {
  return _errorHandler;
}

exports.getErrorHandler = getErrorHandler;

function setErrorHandler(handler) {
  _errorHandler = handler;
}

exports.setErrorHandler = setErrorHandler;

function error(error) {
  if (!_errorHandler) {
    return;
  }

  if (typeof error === "string") {
    error = new Error(error);
  }

  _errorHandler.handlerError(error);
}

exports.error = error;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/animation-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

exports.Color = color_1.Color;

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceCategories = trace_1.categories;
exports.traceType = trace_1.messageType;
var Properties;

(function (Properties) {
  Properties.opacity = "opacity";
  Properties.backgroundColor = "backgroundColor";
  Properties.translate = "translate";
  Properties.rotate = "rotate";
  Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));

var CubicBezierAnimationCurve = function () {
  function CubicBezierAnimationCurve(x1, y1, x2, y2) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
  }

  return CubicBezierAnimationCurve;
}();

exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;

var AnimationBase = function () {
  function AnimationBase(animationDefinitions, playSequentially) {
    if (!animationDefinitions || animationDefinitions.length === 0) {
      throw new Error("No animation definitions specified");
    }

    if (trace_1.isEnabled()) {
      trace_1.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace_1.categories.Animation);
    }

    this._propertyAnimations = new Array();

    for (var i = 0, length_1 = animationDefinitions.length; i < length_1; i++) {
      if (animationDefinitions[i].curve) {
        animationDefinitions[i].curve = this._resolveAnimationCurve(animationDefinitions[i].curve);
      }

      this._propertyAnimations = this._propertyAnimations.concat(AnimationBase._createPropertyAnimations(animationDefinitions[i]));
    }

    if (this._propertyAnimations.length === 0) {
      throw new Error("Nothing to animate.");
    }

    if (trace_1.isEnabled()) {
      trace_1.write("Created " + this._propertyAnimations.length + " individual property animations.", trace_1.categories.Animation);
    }

    this._playSequentially = playSequentially;
  }

  AnimationBase.prototype._rejectAlreadyPlaying = function () {
    var reason = "Animation is already playing.";
    trace_1.write(reason, trace_1.categories.Animation, trace_1.messageType.warn);
    return new Promise(function (resolve, reject) {
      reject(reason);
    });
  };

  AnimationBase.prototype.play = function () {
    var _this_1 = this;

    var animationFinishedPromise = new Promise(function (resolve, reject) {
      _this_1._resolve = resolve;
      _this_1._reject = reject;
    });
    this.fixupAnimationPromise(animationFinishedPromise);
    this._isPlaying = true;
    return animationFinishedPromise;
  };

  AnimationBase.prototype.fixupAnimationPromise = function (promise) {
    var _this = this;

    promise.cancel = function () {
      _this.cancel();
    };

    var _then = promise.then;

    promise.then = function () {
      var r = _then.apply(promise, arguments);

      _this.fixupAnimationPromise(r);

      return r;
    };

    var _catch = promise.catch;

    promise.catch = function () {
      var r = _catch.apply(promise, arguments);

      _this.fixupAnimationPromise(r);

      return r;
    };
  };

  AnimationBase.prototype.cancel = function () {};

  Object.defineProperty(AnimationBase.prototype, "isPlaying", {
    get: function () {
      return this._isPlaying;
    },
    enumerable: true,
    configurable: true
  });

  AnimationBase.prototype._resolveAnimationFinishedPromise = function () {
    this._isPlaying = false;

    this._resolve();
  };

  AnimationBase.prototype._rejectAnimationFinishedPromise = function () {
    this._isPlaying = false;

    this._reject(new Error("Animation cancelled."));
  };

  AnimationBase._createPropertyAnimations = function (animationDefinition) {
    if (!animationDefinition.target) {
      throw new Error("No animation target specified.");
    }

    for (var item in animationDefinition) {
      if (animationDefinition[item] === undefined) {
        continue;
      }

      if ((item === Properties.opacity || item === Properties.rotate || item === "duration" || item === "delay" || item === "iterations") && typeof animationDefinition[item] !== "number") {
        throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
      } else if ((item === Properties.scale || item === Properties.translate) && (typeof animationDefinition[item].x !== "number" || typeof animationDefinition[item].y !== "number")) {
        throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
      } else if (item === Properties.backgroundColor && !color_1.Color.isValid(animationDefinition.backgroundColor)) {
        throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
      }
    }

    var propertyAnimations = new Array();

    if (animationDefinition.opacity !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.opacity,
        value: animationDefinition.opacity,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.backgroundColor !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.backgroundColor,
        value: typeof animationDefinition.backgroundColor === "string" ? new color_1.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.translate !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.translate,
        value: animationDefinition.translate,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.scale !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.scale,
        value: animationDefinition.scale,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.rotate !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.rotate,
        value: animationDefinition.rotate,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (propertyAnimations.length === 0) {
      throw new Error("No animation property specified.");
    }

    return propertyAnimations;
  };

  AnimationBase._getAnimationInfo = function (animation) {
    return JSON.stringify({
      target: animation.target.id,
      property: animation.property,
      value: animation.value,
      duration: animation.duration,
      delay: animation.delay,
      iterations: animation.iterations,
      curve: animation.curve
    });
  };

  return AnimationBase;
}();

exports.AnimationBase = AnimationBase;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/animation.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var animation_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation-common.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var lazy_1 = __webpack_require__("../node_modules/tns-core-modules/utils/lazy.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/animation/animation-common.js"));

var argbEvaluator;

function ensureArgbEvaluator() {
  if (!argbEvaluator) {
    argbEvaluator = new android.animation.ArgbEvaluator();
  }
}

var easeIn = lazy_1.default(function () {
  return new android.view.animation.AccelerateInterpolator(1);
});
var easeOut = lazy_1.default(function () {
  return new android.view.animation.DecelerateInterpolator(1);
});
var easeInOut = lazy_1.default(function () {
  return new android.view.animation.AccelerateDecelerateInterpolator();
});
var linear = lazy_1.default(function () {
  return new android.view.animation.LinearInterpolator();
});
var bounce = lazy_1.default(function () {
  return new android.view.animation.BounceInterpolator();
});
var keyPrefix = "ui.animation.";
var propertyKeys = {};
propertyKeys[animation_common_1.Properties.backgroundColor] = Symbol(keyPrefix + animation_common_1.Properties.backgroundColor);
propertyKeys[animation_common_1.Properties.opacity] = Symbol(keyPrefix + animation_common_1.Properties.opacity);
propertyKeys[animation_common_1.Properties.rotate] = Symbol(keyPrefix + animation_common_1.Properties.rotate);
propertyKeys[animation_common_1.Properties.scale] = Symbol(keyPrefix + animation_common_1.Properties.scale);
propertyKeys[animation_common_1.Properties.translate] = Symbol(keyPrefix + animation_common_1.Properties.translate);

function _resolveAnimationCurve(curve) {
  switch (curve) {
    case "easeIn":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).", animation_common_1.traceCategories.Animation);
      }

      return easeIn();

    case "easeOut":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).", animation_common_1.traceCategories.Animation);
      }

      return easeOut();

    case "easeInOut":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().", animation_common_1.traceCategories.Animation);
      }

      return easeInOut();

    case "linear":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.LinearInterpolator().", animation_common_1.traceCategories.Animation);
      }

      return linear();

    case "spring":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.BounceInterpolator().", animation_common_1.traceCategories.Animation);
      }

      return bounce();

    case "ease":
      return android.support.v4.view.animation.PathInterpolatorCompat.create(0.25, 0.1, 0.25, 1.0);

    default:
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to original: " + curve, animation_common_1.traceCategories.Animation);
      }

      if (curve instanceof animation_common_1.CubicBezierAnimationCurve) {
        return android.support.v4.view.animation.PathInterpolatorCompat.create(curve.x1, curve.y1, curve.x2, curve.y2);
      } else if (curve && curve.getInterpolation) {
        return curve;
      } else if (curve instanceof android.view.animation.LinearInterpolator) {
        return curve;
      } else {
        throw new Error("Invalid animation curve: " + curve);
      }

  }
}

exports._resolveAnimationCurve = _resolveAnimationCurve;

var Animation = function (_super) {
  __extends(Animation, _super);

  function Animation(animationDefinitions, playSequentially) {
    var _this = _super.call(this, animationDefinitions, playSequentially) || this;

    _this._resetOnFinish = true;
    _this._valueSource = "animation";

    if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
      _this._valueSource = animationDefinitions[0].valueSource;
    }

    var that = new WeakRef(_this);
    _this._animatorListener = new android.animation.Animator.AnimatorListener({
      onAnimationStart: function (animator) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("MainAnimatorListener.onAndroidAnimationStart(" + animator + ")", animation_common_1.traceCategories.Animation);
        }
      },
      onAnimationRepeat: function (animator) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("MainAnimatorListener.onAnimationRepeat(" + animator + ")", animation_common_1.traceCategories.Animation);
        }
      },
      onAnimationEnd: function (animator) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("MainAnimatorListener.onAnimationEnd(" + animator + ")", animation_common_1.traceCategories.Animation);
        }

        var thisRef = that.get();

        if (thisRef) {
          thisRef._onAndroidAnimationEnd();
        }
      },
      onAnimationCancel: function (animator) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("MainAnimatorListener.onAnimationCancel(" + animator + ")", animation_common_1.traceCategories.Animation);
        }

        var thisRef = that.get();

        if (thisRef) {
          thisRef._onAndroidAnimationCancel();
        }
      }
    });
    return _this;
  }

  Animation.prototype.play = function (resetOnFinish) {
    if (resetOnFinish !== undefined) {
      this._resetOnFinish = resetOnFinish;
    }

    if (this.isPlaying) {
      return this._rejectAlreadyPlaying();
    }

    if (this._animatorSet) {
      return this._play();
    }

    this._animators = new Array();
    this._propertyUpdateCallbacks = new Array();
    this._propertyResetCallbacks = new Array();

    for (var i = 0, length_1 = this._propertyAnimations.length; i < length_1; i++) {
      this._createAnimators(this._propertyAnimations[i]);
    }

    this._nativeAnimatorsArray = Array.create(android.animation.Animator, this._animators.length);

    for (var i = 0, length_2 = this._animators.length; i < length_2; i++) {
      this._nativeAnimatorsArray[i] = this._animators[i];
    }

    this._animatorSet = new android.animation.AnimatorSet();

    this._animatorSet.addListener(this._animatorListener);

    return this._play();
  };

  Animation.prototype.cancel = function () {
    if (!this.isPlaying) {
      animation_common_1.traceWrite("Animation is not currently playing.", animation_common_1.traceCategories.Animation, animation_common_1.traceType.warn);
      return;
    }

    animation_common_1.traceWrite("Cancelling AnimatorSet.", animation_common_1.traceCategories.Animation);

    this._animatorSet.cancel();
  };

  Animation.prototype._resolveAnimationCurve = function (curve) {
    return _resolveAnimationCurve(curve);
  };

  Animation.prototype._play = function () {
    var animationFinishedPromise = _super.prototype.play.call(this);

    if (platform_1.device.sdkVersion <= "23") {
      this._animatorSet = new android.animation.AnimatorSet();

      this._animatorSet.addListener(this._animatorListener);
    }

    if (this._animators.length > 0) {
      if (this._playSequentially) {
        this._animatorSet.playSequentially(this._nativeAnimatorsArray);
      } else {
        this._animatorSet.playTogether(this._nativeAnimatorsArray);
      }
    }

    if (animation_common_1.traceEnabled()) {
      animation_common_1.traceWrite("Starting " + this._nativeAnimatorsArray.length + " animations " + (this._playSequentially ? "sequentially." : "together."), animation_common_1.traceCategories.Animation);
    }

    this._animatorSet.setupStartValues();

    this._animatorSet.start();

    return animationFinishedPromise;
  };

  Animation.prototype._onAndroidAnimationEnd = function () {
    if (!this.isPlaying) {
      return;
    }

    this._propertyUpdateCallbacks.forEach(function (v) {
      return v();
    });

    this._resolveAnimationFinishedPromise();

    if (this._resetOnFinish && this._target) {
      this._target._removeAnimation(this);
    }
  };

  Animation.prototype._onAndroidAnimationCancel = function () {
    this._propertyResetCallbacks.forEach(function (v) {
      return v();
    });

    this._rejectAnimationFinishedPromise();

    if (this._target) {
      this._target._removeAnimation(this);
    }
  };

  Animation.prototype._createAnimators = function (propertyAnimation) {
    if (!propertyAnimation.target.nativeViewProtected) {
      return;
    }

    if (animation_common_1.traceEnabled()) {
      animation_common_1.traceWrite("Creating ObjectAnimator(s) for animation: " + Animation._getAnimationInfo(propertyAnimation) + "...", animation_common_1.traceCategories.Animation);
    }

    if (propertyAnimation.target === null || propertyAnimation.target === undefined) {
      throw new Error("Animation target cannot be null or undefined; property: " + propertyAnimation.property + "; value: " + propertyAnimation.value + ";");
    }

    if (propertyAnimation.property === null || propertyAnimation.property === undefined) {
      throw new Error("Animation property cannot be null or undefined; target: " + propertyAnimation.target + "; value: " + propertyAnimation.value + ";");
    }

    if (propertyAnimation.value === null || propertyAnimation.value === undefined) {
      throw new Error("Animation value cannot be null or undefined; target: " + propertyAnimation.target + "; property: " + propertyAnimation.property + ";");
    }

    this._target = propertyAnimation.target;
    var nativeArray;
    var nativeView = propertyAnimation.target.nativeViewProtected;
    var animators = new Array();
    var propertyUpdateCallbacks = new Array();
    var propertyResetCallbacks = new Array();
    var originalValue1;
    var originalValue2;
    var density = utils_1.layout.getDisplayDensity();
    var xyObjectAnimators;
    var animatorSet;
    var key = propertyKeys[propertyAnimation.property];

    if (key) {
      propertyAnimation.target[key] = propertyAnimation;
    }

    function checkAnimation(cb) {
      return function () {
        if (propertyAnimation.target[key] === propertyAnimation) {
          delete propertyAnimation.target[key];
          cb();
        }
      };
    }

    var setLocal = this._valueSource === "animation";
    var style = propertyAnimation.target.style;

    switch (propertyAnimation.property) {
      case animation_common_1.Properties.opacity:
        style_properties_1.opacityProperty._initDefaultNativeValue(style);

        originalValue1 = nativeView.getAlpha();
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value;
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.opacityProperty.name : style_properties_1.opacityProperty.keyframe] = propertyAnimation.value;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.opacityProperty.name] = originalValue1;
          } else {
            propertyAnimation.target.style[style_properties_1.opacityProperty.keyframe] = originalValue1;
          }

          if (propertyAnimation.target.nativeViewProtected) {
            propertyAnimation.target[style_properties_1.opacityProperty.setNative](propertyAnimation.target.style.opacity);
          }
        }));
        animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "alpha", nativeArray));
        break;

      case animation_common_1.Properties.backgroundColor:
        style_properties_1.backgroundColorProperty._initDefaultNativeValue(style);

        ensureArgbEvaluator();
        originalValue1 = propertyAnimation.target.backgroundColor;
        nativeArray = Array.create(java.lang.Object, 2);
        nativeArray[0] = propertyAnimation.target.backgroundColor ? java.lang.Integer.valueOf(propertyAnimation.target.backgroundColor.argb) : java.lang.Integer.valueOf(-1);
        nativeArray[1] = java.lang.Integer.valueOf(propertyAnimation.value.argb);
        var animator = android.animation.ValueAnimator.ofObject(argbEvaluator, nativeArray);
        animator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({
          onAnimationUpdate: function (animator) {
            var argb = animator.getAnimatedValue().intValue();
            propertyAnimation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = new animation_common_1.Color(argb);
          }
        }));
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = propertyAnimation.value;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.backgroundColorProperty.name] = originalValue1;
          } else {
            propertyAnimation.target.style[style_properties_1.backgroundColorProperty.keyframe] = originalValue1;
          }

          if (propertyAnimation.target.nativeViewProtected && propertyAnimation.target[style_properties_1.backgroundColorProperty.setNative]) {
            propertyAnimation.target[style_properties_1.backgroundColorProperty.setNative](propertyAnimation.target.style.backgroundColor);
          }
        }));
        animators.push(animator);
        break;

      case animation_common_1.Properties.translate:
        style_properties_1.translateXProperty._initDefaultNativeValue(style);

        style_properties_1.translateYProperty._initDefaultNativeValue(style);

        xyObjectAnimators = Array.create(android.animation.Animator, 2);
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value.x * density;
        xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationX", nativeArray);
        xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value.y * density;
        xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationY", nativeArray);
        xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
        originalValue1 = nativeView.getTranslationX() / density;
        originalValue2 = nativeView.getTranslationY() / density;
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = propertyAnimation.value.x;
          propertyAnimation.target.style[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = propertyAnimation.value.y;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.translateXProperty.name] = originalValue1;
            propertyAnimation.target.style[style_properties_1.translateYProperty.name] = originalValue2;
          } else {
            propertyAnimation.target.style[style_properties_1.translateXProperty.keyframe] = originalValue1;
            propertyAnimation.target.style[style_properties_1.translateYProperty.keyframe] = originalValue2;
          }

          if (propertyAnimation.target.nativeViewProtected) {
            propertyAnimation.target[style_properties_1.translateXProperty.setNative](propertyAnimation.target.style.translateX);
            propertyAnimation.target[style_properties_1.translateYProperty.setNative](propertyAnimation.target.style.translateY);
          }
        }));
        animatorSet = new android.animation.AnimatorSet();
        animatorSet.playTogether(xyObjectAnimators);
        animatorSet.setupStartValues();
        animators.push(animatorSet);
        break;

      case animation_common_1.Properties.scale:
        style_properties_1.scaleXProperty._initDefaultNativeValue(style);

        style_properties_1.scaleYProperty._initDefaultNativeValue(style);

        xyObjectAnimators = Array.create(android.animation.Animator, 2);
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value.x;
        xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleX", nativeArray);
        xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value.y;
        xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleY", nativeArray);
        xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
        originalValue1 = nativeView.getScaleX();
        originalValue2 = nativeView.getScaleY();
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = propertyAnimation.value.x;
          propertyAnimation.target.style[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = propertyAnimation.value.y;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.scaleXProperty.name] = originalValue1;
            propertyAnimation.target.style[style_properties_1.scaleYProperty.name] = originalValue2;
          } else {
            propertyAnimation.target.style[style_properties_1.scaleXProperty.keyframe] = originalValue1;
            propertyAnimation.target.style[style_properties_1.scaleYProperty.keyframe] = originalValue2;
          }

          if (propertyAnimation.target.nativeViewProtected) {
            propertyAnimation.target[style_properties_1.scaleXProperty.setNative](propertyAnimation.target.style.scaleX);
            propertyAnimation.target[style_properties_1.scaleYProperty.setNative](propertyAnimation.target.style.scaleY);
          }
        }));
        animatorSet = new android.animation.AnimatorSet();
        animatorSet.playTogether(xyObjectAnimators);
        animatorSet.setupStartValues();
        animators.push(animatorSet);
        break;

      case animation_common_1.Properties.rotate:
        style_properties_1.rotateProperty._initDefaultNativeValue(style);

        originalValue1 = nativeView.getRotation();
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value;
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.rotateProperty.name : style_properties_1.rotateProperty.keyframe] = propertyAnimation.value;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.rotateProperty.name] = originalValue1;
          } else {
            propertyAnimation.target.style[style_properties_1.rotateProperty.keyframe] = originalValue1;
          }

          if (propertyAnimation.target.nativeViewProtected) {
            propertyAnimation.target[style_properties_1.rotateProperty.setNative](propertyAnimation.target.style.rotate);
          }
        }));
        animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "rotation", nativeArray));
        break;

      default:
        throw new Error("Cannot animate " + propertyAnimation.property);
    }

    for (var i = 0, length_3 = animators.length; i < length_3; i++) {
      if (propertyAnimation.duration !== undefined) {
        animators[i].setDuration(propertyAnimation.duration);
      }

      if (propertyAnimation.delay !== undefined) {
        animators[i].setStartDelay(propertyAnimation.delay);
      }

      if (propertyAnimation.iterations !== undefined && animators[i] instanceof android.animation.ValueAnimator) {
        animators[i].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
      }

      if (propertyAnimation.curve !== undefined) {
        animators[i].setInterpolator(propertyAnimation.curve);
      }

      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animator created: " + animators[i], animation_common_1.traceCategories.Animation);
      }
    }

    this._animators = this._animators.concat(animators);
    this._propertyUpdateCallbacks = this._propertyUpdateCallbacks.concat(propertyUpdateCallbacks);
    this._propertyResetCallbacks = this._propertyResetCallbacks.concat(propertyResetCallbacks);
  };

  Animation._getAndroidRepeatCount = function (iterations) {
    return iterations === Number.POSITIVE_INFINITY ? android.view.animation.Animation.INFINITE : iterations - 1;
  };

  return Animation;
}(animation_common_1.AnimationBase);

exports.Animation = Animation;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/keyframe-animation.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var enums_1 = __webpack_require__("../node_modules/tns-core-modules/ui/enums/enums.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var Keyframes = function () {
  function Keyframes() {}

  return Keyframes;
}();

exports.Keyframes = Keyframes;

var UnparsedKeyframe = function () {
  function UnparsedKeyframe() {}

  return UnparsedKeyframe;
}();

exports.UnparsedKeyframe = UnparsedKeyframe;

var KeyframeDeclaration = function () {
  function KeyframeDeclaration() {}

  return KeyframeDeclaration;
}();

exports.KeyframeDeclaration = KeyframeDeclaration;

var KeyframeInfo = function () {
  function KeyframeInfo() {
    this.curve = enums_1.AnimationCurve.ease;
  }

  return KeyframeInfo;
}();

exports.KeyframeInfo = KeyframeInfo;

var KeyframeAnimationInfo = function () {
  function KeyframeAnimationInfo() {
    this.name = "";
    this.duration = 0.3;
    this.delay = 0;
    this.iterations = 1;
    this.curve = "ease";
    this.isForwards = false;
    this.isReverse = false;
  }

  return KeyframeAnimationInfo;
}();

exports.KeyframeAnimationInfo = KeyframeAnimationInfo;

var KeyframeAnimation = function () {
  function KeyframeAnimation() {
    this.delay = 0;
    this.iterations = 1;
  }

  KeyframeAnimation.keyframeAnimationFromInfo = function (info) {
    var length = info.keyframes.length;
    var animations = new Array();
    var startDuration = 0;

    if (info.isReverse) {
      for (var index_1 = length - 1; index_1 >= 0; index_1--) {
        var keyframe = info.keyframes[index_1];
        startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
      }
    } else {
      for (var index_2 = 0; index_2 < length; index_2++) {
        var keyframe = info.keyframes[index_2];
        startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
      }

      for (var index_3 = length - 1; index_3 > 0; index_3--) {
        var a1 = animations[index_3];
        var a2 = animations[index_3 - 1];

        if (a2["curve"] !== undefined) {
          a1["curve"] = a2["curve"];
          a2["curve"] = undefined;
        }
      }
    }

    animations.map(function (a) {
      return a["curve"] ? a : Object.assign(a, {
        curve: info.curve
      });
    });
    var animation = new KeyframeAnimation();
    animation.delay = info.delay;
    animation.iterations = info.iterations;
    animation.animations = animations;
    animation._isForwards = info.isForwards;
    return animation;
  };

  KeyframeAnimation.parseKeyframe = function (info, keyframe, animations, startDuration) {
    var animation = {};

    for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
      var declaration = _a[_i];
      animation[declaration.property] = declaration.value;
    }

    var duration = keyframe.duration;

    if (duration === 0) {
      duration = 0.01;
    } else {
      duration = info.duration * duration - startDuration;
      startDuration += duration;
    }

    animation.duration = info.isReverse ? info.duration - duration : duration;
    animation.curve = keyframe.curve;
    animation.forceLayer = true;
    animation.valueSource = "keyframe";
    animations.push(animation);
    return startDuration;
  };

  Object.defineProperty(KeyframeAnimation.prototype, "isPlaying", {
    get: function () {
      return this._isPlaying;
    },
    enumerable: true,
    configurable: true
  });

  KeyframeAnimation.prototype.cancel = function () {
    if (!this.isPlaying) {
      trace_1.write("Keyframe animation is already playing.", trace_1.categories.Animation, trace_1.messageType.warn);
      return;
    }

    this._isPlaying = false;

    for (var i = this._nativeAnimations.length - 1; i >= 0; i--) {
      var animation = this._nativeAnimations[i];

      if (animation.isPlaying) {
        animation.cancel();
      }
    }

    if (this._nativeAnimations.length > 0) {
      var animation = this._nativeAnimations[0];

      this._resetAnimationValues(this._target, animation);
    }

    this._resetAnimations();
  };

  KeyframeAnimation.prototype.play = function (view) {
    var _this = this;

    if (this._isPlaying) {
      trace_1.write("Keyframe animation is already playing.", trace_1.categories.Animation, trace_1.messageType.warn);
      return new Promise(function (resolve) {
        resolve();
      });
    }

    var animationFinishedPromise = new Promise(function (resolve) {
      _this._resolve = resolve;
    });
    this._isPlaying = true;
    this._nativeAnimations = new Array();
    this._target = view;

    if (this.delay !== 0) {
      setTimeout(function () {
        return _this.animate(view, 0, _this.iterations);
      }, this.delay);
    } else {
      this.animate(view, 0, this.iterations);
    }

    return animationFinishedPromise;
  };

  KeyframeAnimation.prototype.animate = function (view, index, iterations) {
    var _this = this;

    if (!this._isPlaying) {
      return;
    }

    if (index === 0) {
      var animation = this.animations[0];

      if ("backgroundColor" in animation) {
        view.style[style_properties_1.backgroundColorProperty.keyframe] = animation.backgroundColor;
      }

      if ("scale" in animation) {
        view.style[style_properties_1.scaleXProperty.keyframe] = animation.scale.x;
        view.style[style_properties_1.scaleYProperty.keyframe] = animation.scale.y;
      }

      if ("translate" in animation) {
        view.style[style_properties_1.translateXProperty.keyframe] = animation.translate.x;
        view.style[style_properties_1.translateYProperty.keyframe] = animation.translate.y;
      }

      if ("rotate" in animation) {
        view.style[style_properties_1.rotateProperty.keyframe] = animation.rotate;
      }

      if ("opacity" in animation) {
        view.style[style_properties_1.opacityProperty.keyframe] = animation.opacity;
      }

      setTimeout(function () {
        return _this.animate(view, 1, iterations);
      }, 1);
    } else if (index < 0 || index >= this.animations.length) {
      iterations -= 1;

      if (iterations > 0) {
        this.animate(view, 0, iterations);
      } else {
        if (this._isForwards === false) {
          var animation = this.animations[this.animations.length - 1];

          this._resetAnimationValues(view, animation);
        }

        this._resolveAnimationFinishedPromise();
      }
    } else {
      var animation = void 0;
      var cachedAnimation = this._nativeAnimations[index - 1];

      if (cachedAnimation) {
        animation = cachedAnimation;
      } else {
        var animationDef = this.animations[index];
        animationDef.target = view;
        animation = new animation_1.Animation([animationDef]);

        this._nativeAnimations.push(animation);
      }

      var isLastIteration = iterations - 1 <= 0;
      animation.play(isLastIteration).then(function () {
        _this.animate(view, index + 1, iterations);
      }, function (error) {
        trace_1.write(typeof error === "string" ? error : error.message, trace_1.categories.Animation, trace_1.messageType.warn);
      }).catch(function (error) {
        trace_1.write(typeof error === "string" ? error : error.message, trace_1.categories.Animation, trace_1.messageType.warn);
      });
    }
  };

  KeyframeAnimation.prototype._resolveAnimationFinishedPromise = function () {
    this._nativeAnimations = new Array();
    this._isPlaying = false;
    this._target = null;

    this._resolve();
  };

  KeyframeAnimation.prototype._resetAnimations = function () {
    this._nativeAnimations = new Array();
    this._isPlaying = false;
    this._target = null;
  };

  KeyframeAnimation.prototype._resetAnimationValues = function (view, animation) {
    if ("backgroundColor" in animation) {
      view.style[style_properties_1.backgroundColorProperty.keyframe] = properties_1.unsetValue;
    }

    if ("scale" in animation) {
      view.style[style_properties_1.scaleXProperty.keyframe] = properties_1.unsetValue;
      view.style[style_properties_1.scaleYProperty.keyframe] = properties_1.unsetValue;
    }

    if ("translate" in animation) {
      view.style[style_properties_1.translateXProperty.keyframe] = properties_1.unsetValue;
      view.style[style_properties_1.translateYProperty.keyframe] = properties_1.unsetValue;
    }

    if ("rotate" in animation) {
      view.style[style_properties_1.rotateProperty.keyframe] = properties_1.unsetValue;
    }

    if ("opacity" in animation) {
      view.style[style_properties_1.opacityProperty.keyframe] = properties_1.unsetValue;
    }
  };

  return KeyframeAnimation;
}();

exports.KeyframeAnimation = KeyframeAnimation;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/binding-builder.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;

(function (bindingConstants) {
  bindingConstants.sourceProperty = "sourceProperty";
  bindingConstants.targetProperty = "targetProperty";
  bindingConstants.expression = "expression";
  bindingConstants.twoWay = "twoWay";
  bindingConstants.source = "source";
  bindingConstants.bindingValueKey = "$value";
  bindingConstants.parentValueKey = "$parent";
  bindingConstants.parentsValueKey = "$parents";
  bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));

;
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;

function isNamedParam(value) {
  var equalSignIndex = value.search(hasEqualSignRegex);

  if (equalSignIndex > -1) {
    var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);

    if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
      return true;
    }
  }

  return false;
}

function areNamedParams(params) {
  var i;

  for (i = 0; i < params.length; i++) {
    if (isNamedParam(params[i])) {
      return true;
    }
  }

  return false;
}

var namedParamConstants = {
  propName: "propName",
  propValue: "propValue"
};

function getPropertyNameValuePair(param, knownOptions, callback) {
  var nameValuePair = {};
  var propertyName = param.substr(0, param.indexOf("=")).trim();
  var propertyValue = param.substr(param.indexOf("=") + 1).trim();

  if (knownOptions) {
    if (!propertyName) {
      propertyName = knownOptions.defaultProperty;
    } else {
      propertyName = propertyName in knownOptions ? propertyName : null;
    }
  }

  if (propertyName) {
    if (callback) {
      nameValuePair = callback(propertyName, propertyValue);
    } else {
      nameValuePair[namedParamConstants.propName] = propertyName;
      nameValuePair[namedParamConstants.propValue] = propertyValue;
    }

    return nameValuePair;
  }

  return null;
}

function parseNamedProperties(parameterList, knownOptions, callback) {
  var result = {};
  var i;

  for (i = 0; i < parameterList.length; i++) {
    var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);

    if (nameValuePair) {
      result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
    }
  }

  return result;
}

function getParamsArray(value) {
  var result = [];
  var i;
  var skipComma = 0;
  var indexReached = 0;
  var singleQuoteBlock,
      doubleQuoteBlock = false;

  for (i = 0; i < value.length; i++) {
    if (value[i] === "\"") {
      doubleQuoteBlock = !doubleQuoteBlock;
    }

    if (value[i] === "'") {
      singleQuoteBlock = !singleQuoteBlock;
    }

    if (value[i] === "(" || value[i] === "[") {
      skipComma++;
    }

    if (value[i] === ")" || value[i] === "]") {
      skipComma--;
    }

    if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
      result.push(value.substr(indexReached, i - indexReached));
      indexReached = i + 1;
    }
  }

  result.push(value.substr(indexReached));
  return result;
}

function isExpression(expression) {
  if (expression.search(expressionSymbolsRegex) > -1) {
    var parentsMatches = expression.match(exports.parentsRegex);

    if (parentsMatches) {
      var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);

      if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
        return false;
      }
    }

    return true;
  }

  return false;
}

function getBindingOptions(name, value) {
  var namedParams = [];
  var params = getParamsArray(value);

  if (!areNamedParams(params)) {
    if (params.length === 1) {
      var trimmedValue = params[0].trim();
      var sourceProp;

      if (isExpression(trimmedValue)) {
        sourceProp = bindingConstants.bindingValueKey;
        namedParams.push(bindingConstants.expression + " = " + trimmedValue);
      } else {
        sourceProp = trimmedValue;
      }

      namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
      namedParams.push(bindingConstants.twoWay + " = true");
    } else {
      namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
      namedParams.push(bindingConstants.expression + " = " + params[1].trim());
      var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
      namedParams.push(bindingConstants.twoWay + " = " + twoWay);
    }
  } else {
    namedParams = params;
  }

  var bindingPropertyHandler = function (prop, value) {
    var result = {};
    result[namedParamConstants.propName] = prop;

    if (prop === bindingConstants.twoWay) {
      if (value === "true") {
        result[namedParamConstants.propValue] = true;
      } else {
        result[namedParamConstants.propValue] = false;
      }
    } else {
      result[namedParamConstants.propValue] = value;
    }

    return result;
  };

  var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
  var bindOptions = {
    targetProperty: name
  };

  for (var prop in bindingOptionsParameters) {
    if (bindingOptionsParameters.hasOwnProperty(prop)) {
      bindOptions[prop] = bindingOptionsParameters[prop];
    }
  }

  if (bindOptions[bindingConstants.twoWay] === undefined) {
    bindOptions[bindingConstants.twoWay] = true;
  }

  return bindOptions;
}

exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
  sourceProperty: true,
  expression: true,
  twoWay: true,
  source: true,
  defaultProperty: bindingConstants.sourceProperty
};

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/builder.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var debug_1 = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

var xml = __webpack_require__("../node_modules/tns-core-modules/xml/xml.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var component_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var file_name_resolver_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var ios = platform_1.platformNames.ios.toLowerCase();
var android = platform_1.platformNames.android.toLowerCase();
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;

function ensureTrace() {
  if (!trace) {
    trace = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");
  }
}

function parse(value, context) {
  if (typeof value === "function") {
    return value();
  } else {
    var exports_1 = context ? getExports(context) : undefined;
    var componentModule = parseInternal(value, exports_1);
    return componentModule && componentModule.component;
  }
}

exports.parse = parse;

function parseMultipleTemplates(value, context) {
  var dummyComponent = "<ListView><ListView.itemTemplates>" + value + "</ListView.itemTemplates></ListView>";
  return parseInternal(dummyComponent, context).component["itemTemplates"];
}

exports.parseMultipleTemplates = parseMultipleTemplates;

function load(pathOrOptions, context) {
  var componentModule;

  if (!context) {
    if (typeof pathOrOptions === "string") {
      componentModule = loadInternal(pathOrOptions);
    } else {
      componentModule = loadCustomComponent(pathOrOptions.path, pathOrOptions.name, pathOrOptions.attributes, pathOrOptions.exports, pathOrOptions.page, true);
    }
  } else {
    var path_1 = pathOrOptions;
    componentModule = loadInternal(path_1, context);
  }

  return componentModule && componentModule.component;
}

exports.load = load;

function loadPage(moduleNamePath, fileName, context) {
  var componentModule = loadInternal(fileName, context, moduleNamePath);
  return componentModule && componentModule.component;
}

exports.loadPage = loadPage;
var loadModule = profiling_1.profile("loadModule", function (moduleNamePath, entry) {
  if (global.moduleExists(entry.moduleName)) {
    return global.loadModule(entry.moduleName);
  } else {
    var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");

    if (moduleExportsResolvedPath) {
      moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
      return global.loadModule(moduleExportsResolvedPath);
    }
  }

  return null;
});
var viewFromBuilder = profiling_1.profile("viewFromBuilder", function (moduleNamePath, moduleExports) {
  var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
  return loadPage(moduleNamePath, fileName, moduleExports);
});
exports.createViewFromEntry = profiling_1.profile("createViewFromEntry", function (entry) {
  if (entry.create) {
    return createView(entry);
  } else if (entry.moduleName) {
    var currentAppPath = file_system_1.knownFolders.currentApp().path;
    var moduleNamePath = file_system_1.path.join(currentAppPath, entry.moduleName);
    var moduleExports = loadModule(moduleNamePath, entry);

    if (moduleExports && moduleExports.createPage) {
      return moduleCreateView(moduleNamePath, moduleExports);
    } else {
      return viewFromBuilder(moduleNamePath, moduleExports);
    }
  }

  throw new Error("Failed to load page XML file for module: " + entry.moduleName);
});
var createView = profiling_1.profile("entry.create", function (entry) {
  var view = entry.create();

  if (!view) {
    throw new Error("Failed to create Page with entry.create() function.");
  }

  return view;
});
var moduleCreateView = profiling_1.profile("module.createView", function (moduleNamePath, moduleExports) {
  var view = moduleExports.createPage();
  var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");

  if (cssFileName) {
    view.addCssFile(cssFileName);
  }

  return view;
});

function loadInternal(fileName, context, moduleNamePath) {
  var componentModule;
  var appPath = file_system_1.knownFolders.currentApp().path;
  var filePathRelativeToApp = (moduleNamePath && moduleNamePath.startsWith(appPath) ? "./" + moduleNamePath.substr(appPath.length + 1) : moduleNamePath) + ".xml";

  if (global.moduleExists(filePathRelativeToApp)) {
    var text = global.loadModule(filePathRelativeToApp);
    componentModule = parseInternal(text, context, fileName, moduleNamePath);
  } else if (fileName && file_system_1.File.exists(fileName)) {
    var file = file_system_1.File.fromPath(fileName);
    var text_1 = file.readTextSync(function (error) {
      throw new Error("Error loading file " + fileName + " :" + error.message);
    });
    componentModule = parseInternal(text_1, context, fileName, moduleNamePath);
  }

  if (componentModule && componentModule.component) {
    componentModule.component.exports = context;
  }

  return componentModule;
}

function loadCustomComponent(componentPath, componentName, attributes, context, parentPage, isRootComponent, moduleNamePath) {
  if (isRootComponent === void 0) {
    isRootComponent = true;
  }

  if (!parentPage && context) {
    parentPage = context["_parentPage"];
    delete context["_parentPage"];
  }

  var result;
  componentPath = componentPath.replace("~/", "");
  var moduleName = componentPath + "/" + componentName;
  var xmlModuleName = moduleName + ".xml";
  var fullComponentPathFilePathWithoutExt = componentPath;

  if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
    fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
  }

  var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");

  if (xmlFilePath || global.moduleExists(xmlModuleName)) {
    var subExports = context;

    if (global.moduleExists(moduleName)) {
      subExports = global.loadModule(moduleName);
    } else {
      var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");

      if (jsFilePath) {
        subExports = global.loadModule(jsFilePath);
      }
    }

    if (!subExports) {
      subExports = {};
    }

    subExports["_parentPage"] = parentPage;
    result = xmlFilePath ? loadInternal(xmlFilePath, subExports) : loadInternal(xmlFilePath, subExports, moduleName);

    if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
      for (var attr in attributes) {
        component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
      }
    }
  } else {
    result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context, moduleNamePath, isRootComponent);
  }

  var cssModulePath = fullComponentPathFilePathWithoutExt + ".css";

  if (cssModulePath.startsWith("/")) {
    var app = file_system_1.knownFolders.currentApp().path + "/";

    if (cssModulePath.startsWith(app)) {
      cssModulePath = "./" + cssModulePath.substr(app.length);
    }
  }

  if (global.moduleExists(cssModulePath)) {
    parentPage.addCssFile(cssModulePath);
  } else {
    var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");

    if (cssFilePath) {
      if (parentPage && typeof parentPage.addCssFile === "function") {
        parentPage.addCssFile(cssFilePath);
      } else {
        ensureTrace();
        trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
      }
    }
  }

  return result;
}

function getExports(instance) {
  var isView = !!instance._domId;

  if (!isView) {
    return instance.exports || instance;
  }

  var exportObject = instance.exports;
  var parent = instance.parent;

  while (exportObject === undefined && parent) {
    exportObject = parent.exports;
    parent = parent.parent;
  }

  return exportObject;
}

function parseInternal(value, context, uri, moduleNamePath) {
  var start;
  var ui;
  var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
  var componentSourceTracker = debug_1.debug && uri ? xml2ui.ComponentSourceTracker(uri) : function () {};
  (start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat, componentSourceTracker, moduleNamePath)));
  start.parse(value);
  return ui.rootComponentModule;
}

var xml2ui;

(function (xml2ui) {
  var XmlProducerBase = function () {
    function XmlProducerBase() {}

    XmlProducerBase.prototype.pipe = function (next) {
      this._next = next;
      return next;
    };

    XmlProducerBase.prototype.next = function (args) {
      this._next.parse(args);
    };

    return XmlProducerBase;
  }();

  xml2ui.XmlProducerBase = XmlProducerBase;

  var XmlStringParser = function (_super) {
    __extends(XmlStringParser, _super);

    function XmlStringParser(error) {
      var _this = _super.call(this) || this;

      _this.error = error || PositionErrorFormat;
      return _this;
    }

    XmlStringParser.prototype.parse = function (value) {
      var _this = this;

      var xmlParser = new xml.XmlParser(function (args) {
        try {
          _this.next(args);
        } catch (e) {
          throw _this.error(e, args.position);
        }
      }, function (e, p) {
        throw _this.error(e, p);
      }, true);

      if (types_1.isString(value)) {
        xmlParser.parse(value);
      }
    };

    return XmlStringParser;
  }(XmlProducerBase);

  xml2ui.XmlStringParser = XmlStringParser;

  function PositionErrorFormat(e, p) {
    return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
  }

  xml2ui.PositionErrorFormat = PositionErrorFormat;

  function SourceErrorFormat(uri) {
    return function (e, p) {
      var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
      e = new debug_1.SourceError(e, source, "Building UI from XML.");
      return e;
    };
  }

  xml2ui.SourceErrorFormat = SourceErrorFormat;

  function ComponentSourceTracker(uri) {
    return function (component, p) {
      if (!debug_1.Source.get(component)) {
        var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
        debug_1.Source.set(component, source);
      }
    };
  }

  xml2ui.ComponentSourceTracker = ComponentSourceTracker;

  var PlatformFilter = function (_super) {
    __extends(PlatformFilter, _super);

    function PlatformFilter() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    PlatformFilter.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement) {
        if (PlatformFilter.isPlatform(args.elementName)) {
          if (this.currentPlatformContext) {
            throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
          }

          this.currentPlatformContext = args.elementName;
          return;
        }
      }

      if (args.eventType === xml.ParserEventType.EndElement) {
        if (PlatformFilter.isPlatform(args.elementName)) {
          this.currentPlatformContext = undefined;
          return;
        }
      }

      if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
        return;
      }

      this.next(args);
    };

    PlatformFilter.isPlatform = function (value) {
      if (value) {
        var toLower = value.toLowerCase();
        return toLower === android || toLower === ios;
      }

      return false;
    };

    PlatformFilter.isCurentPlatform = function (value) {
      return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
    };

    return PlatformFilter;
  }(XmlProducerBase);

  xml2ui.PlatformFilter = PlatformFilter;

  var XmlArgsReplay = function (_super) {
    __extends(XmlArgsReplay, _super);

    function XmlArgsReplay(args, errorFormat) {
      var _this = _super.call(this) || this;

      _this.args = args;
      _this.error = errorFormat;
      return _this;
    }

    XmlArgsReplay.prototype.replay = function () {
      var _this = this;

      this.args.forEach(function (args) {
        try {
          _this.next(args);
        } catch (e) {
          throw _this.error(e, args.position);
        }
      });
    };

    return XmlArgsReplay;
  }(XmlProducerBase);

  xml2ui.XmlArgsReplay = XmlArgsReplay;

  var XmlStateParser = function () {
    function XmlStateParser(state) {
      this.state = state;
    }

    XmlStateParser.prototype.parse = function (args) {
      this.state = this.state.parse(args);
    };

    return XmlStateParser;
  }();

  xml2ui.XmlStateParser = XmlStateParser;

  var TemplateParser = function () {
    function TemplateParser(parent, templateProperty, setTemplateProperty) {
      if (setTemplateProperty === void 0) {
        setTemplateProperty = true;
      }

      this.parent = parent;
      this._context = templateProperty.context;
      this._recordedXmlStream = new Array();
      this._templateProperty = templateProperty;
      this._nestingLevel = 0;
      this._state = 0;
      this._setTemplateProperty = setTemplateProperty;
    }

    TemplateParser.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement) {
        this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
      } else if (args.eventType === xml.ParserEventType.EndElement) {
        this.parseEndElement(args.prefix, args.elementName);
      }

      this._recordedXmlStream.push(args);

      return this._state === 2 ? this.parent : this;
    };

    Object.defineProperty(TemplateParser.prototype, "elementName", {
      get: function () {
        return this._templateProperty.elementName;
      },
      enumerable: true,
      configurable: true
    });

    TemplateParser.prototype.parseStartElement = function (prefix, namespace, elementName, attributes) {
      if (this._state === 0) {
        this._state = 1;
      } else if (this._state === 2) {
        throw new Error("Template must have exactly one root element but multiple elements were found.");
      }

      this._nestingLevel++;
    };

    TemplateParser.prototype.parseEndElement = function (prefix, elementName) {
      if (this._state === 0) {
        throw new Error("Template must have exactly one root element but none was found.");
      } else if (this._state === 2) {
        throw new Error("No more closing elements expected for this template.");
      }

      this._nestingLevel--;

      if (this._nestingLevel === 0) {
        this._state = 2;

        if (this._setTemplateProperty && this._templateProperty.name in this._templateProperty.parent.component) {
          var template = this.buildTemplate();
          this._templateProperty.parent.component[this._templateProperty.name] = template;
        }
      }
    };

    TemplateParser.prototype.buildTemplate = function () {
      var _this = this;

      var context = this._context;
      var errorFormat = this._templateProperty.errorFormat;
      var sourceTracker = this._templateProperty.sourceTracker;
      var template = profiling_1.profile("Template()", function () {
        var start;
        var ui;
        (start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat, sourceTracker)));
        start.replay();
        return ui.rootComponentModule.component;
      });
      return template;
    };

    return TemplateParser;
  }();

  xml2ui.TemplateParser = TemplateParser;

  var MultiTemplateParser = function () {
    function MultiTemplateParser(parent, templateProperty) {
      this.parent = parent;
      this.templateProperty = templateProperty;
      this._childParsers = new Array();
    }

    Object.defineProperty(MultiTemplateParser.prototype, "value", {
      get: function () {
        return this._value;
      },
      enumerable: true,
      configurable: true
    });

    MultiTemplateParser.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement && args.elementName === "template") {
        var childParser = new TemplateParser(this, this.templateProperty, false);
        childParser["key"] = args.attributes["key"];

        this._childParsers.push(childParser);

        return childParser;
      }

      if (args.eventType === xml.ParserEventType.EndElement) {
        var name_1 = ComponentParser.getComplexPropertyName(args.elementName);

        if (name_1 === this.templateProperty.name) {
          var templates = new Array();

          for (var i = 0; i < this._childParsers.length; i++) {
            templates.push({
              key: this._childParsers[i]["key"],
              createView: this._childParsers[i].buildTemplate()
            });
          }

          this._value = templates;
          return this.parent.parse(args);
        }
      }

      return this;
    };

    return MultiTemplateParser;
  }();

  xml2ui.MultiTemplateParser = MultiTemplateParser;

  var ComponentParser = function () {
    function ComponentParser(context, errorFormat, sourceTracker, moduleNamePath) {
      this.moduleNamePath = moduleNamePath;
      this.parents = new Array();
      this.complexProperties = new Array();
      this.context = context;
      this.error = errorFormat;
      this.sourceTracker = sourceTracker;
    }

    ComponentParser.prototype.buildComponent = function (args) {
      if (args.prefix && args.namespace) {
        return loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentRootView, !this.currentRootView, this.moduleNamePath);
      } else {
        var namespace = args.namespace;

        if (defaultNameSpaceMatcher.test(namespace || "")) {
          namespace = undefined;
        }

        return component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context, this.moduleNamePath, !this.currentRootView);
      }
    };

    ComponentParser.prototype.parse = function (args) {
      var parent = this.parents[this.parents.length - 1];
      var complexProperty = this.complexProperties[this.complexProperties.length - 1];

      if (args.eventType === xml.ParserEventType.StartElement) {
        if (ComponentParser.isComplexProperty(args.elementName)) {
          var name = ComponentParser.getComplexPropertyName(args.elementName);
          var complexProperty_1 = {
            parent: parent,
            name: name,
            items: []
          };
          this.complexProperties.push(complexProperty_1);

          if (ComponentParser.isKnownTemplate(name, parent.exports)) {
            return new TemplateParser(this, {
              context: (parent ? getExports(parent.component) : null) || this.context,
              parent: parent,
              name: name,
              elementName: args.elementName,
              templateItems: [],
              errorFormat: this.error,
              sourceTracker: this.sourceTracker
            });
          }

          if (ComponentParser.isKnownMultiTemplate(name, parent.exports)) {
            var parser = new MultiTemplateParser(this, {
              context: (parent ? getExports(parent.component) : null) || this.context,
              parent: parent,
              name: name,
              elementName: args.elementName,
              templateItems: [],
              errorFormat: this.error,
              sourceTracker: this.sourceTracker
            });
            complexProperty_1.parser = parser;
            return parser;
          }
        } else {
          var componentModule = this.buildComponent(args);

          if (componentModule) {
            this.sourceTracker(componentModule.component, args.position);

            if (parent) {
              if (complexProperty) {
                ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
              } else if (parent.component._addChildFromBuilder) {
                parent.component._addChildFromBuilder(args.elementName, componentModule.component);
              }
            } else if (this.parents.length === 0) {
              this.rootComponentModule = componentModule;

              if (this.rootComponentModule) {
                this.currentRootView = this.rootComponentModule.component;

                if (this.currentRootView.exports) {
                  this.context = this.currentRootView.exports;
                }
              }
            }

            this.parents.push(componentModule);
          }
        }
      } else if (args.eventType === xml.ParserEventType.EndElement) {
        if (ComponentParser.isComplexProperty(args.elementName)) {
          if (complexProperty) {
            if (complexProperty.parser) {
              parent.component[complexProperty.name] = complexProperty.parser.value;
            } else if (parent && parent.component._addArrayFromBuilder) {
              parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);

              complexProperty.items = [];
            }
          }

          this.complexProperties.pop();
        } else {
          this.parents.pop();
        }
      }

      return this;
    };

    ComponentParser.isComplexProperty = function (name) {
      return types_1.isString(name) && name.indexOf(".") !== -1;
    };

    ComponentParser.getComplexPropertyName = function (fullName) {
      var name;

      if (types_1.isString(fullName)) {
        var names = fullName.split(".");
        name = names[names.length - 1];
      }

      return name;
    };

    ComponentParser.isKnownTemplate = function (name, exports) {
      return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
    };

    ComponentParser.isKnownMultiTemplate = function (name, exports) {
      return ComponentParser.KNOWNMULTITEMPLATES in exports && exports[ComponentParser.KNOWNMULTITEMPLATES] && name in exports[ComponentParser.KNOWNMULTITEMPLATES];
    };

    ComponentParser.addToComplexProperty = function (parent, complexProperty, elementModule) {
      var parentComponent = parent.component;

      if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
        complexProperty.items.push(elementModule.component);
      } else if (parentComponent._addChildFromBuilder) {
        parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
      } else {
        parentComponent[complexProperty.name] = elementModule.component;
      }
    };

    ComponentParser.isKnownCollection = function (name, context) {
      return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
    };

    ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
    ComponentParser.KNOWNTEMPLATES = "knownTemplates";
    ComponentParser.KNOWNMULTITEMPLATES = "knownMultiTemplates";

    __decorate([profiling_1.profile], ComponentParser.prototype, "buildComponent", null);

    return ComponentParser;
  }();

  xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var bindable_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var binding_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/binding-builder.js");

var file_name_resolver_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var filesystem = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var UI_PATH = "ui/";
var MODULES = {
  "TabViewItem": "ui/tab-view",
  "FormattedString": "text/formatted-string",
  "Span": "text/span",
  "ActionItem": "ui/action-bar",
  "NavigationButton": "ui/action-bar",
  "SegmentedBarItem": "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var IMPORT = "import";
var createComponentInstance = profiling_1.profile("createComponentInstance", function (elementName, namespace) {
  var instance;
  var instanceModule;
  var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();

  try {
    if (typeof namespace === "string") {
      if (global.moduleExists(namespace)) {
        moduleId = namespace;
      } else {
        var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);

        try {
          instanceModule = global.require(pathInsideTNSModules);
          moduleId = pathInsideTNSModules;
        } catch (e) {
          moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
        }
      }
    }

    if (!instanceModule) {
      instanceModule = global.loadModule(moduleId);
    }

    var instanceType = instanceModule[elementName] || Object;
    instance = new instanceType();
  } catch (ex) {
    var debug = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

    throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
  }

  return {
    instance: instance,
    instanceModule: instanceModule
  };
});
var getComponentModuleExports = profiling_1.profile("getComponentModuleExports", function (instance, moduleExports, attributes) {
  if (attributes) {
    if (attributes[IMPORT]) {
      var importPath = attributes[IMPORT].trim();

      if (importPath.indexOf("~/") === 0) {
        importPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, importPath.replace("~/", ""));
      }

      moduleExports = global.loadModule(importPath);
      instance.exports = moduleExports;
    }

    if (attributes[CODEFILE]) {
      var codeFilePath = attributes[CODEFILE].trim();

      if (codeFilePath.indexOf("~/") === 0) {
        codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
      }

      var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";

      if (file_system_1.File.exists(codeFilePathWithExt)) {
        moduleExports = global.loadModule(codeFilePath);
        instance.exports = moduleExports;
      } else {
        throw new Error("Code file with path \"" + codeFilePathWithExt + "\" cannot be found!");
      }
    }
  }

  return moduleExports;
});
var applyComponentCss = profiling_1.profile("applyComponentCss", function (instance, moduleNamePath, attributes) {
  var cssApplied = false;

  if (attributes) {
    if (attributes[CSSFILE] && typeof instance.addCssFile === "function") {
      var cssFilePath = attributes[CSSFILE].trim();

      if (cssFilePath.indexOf("~/") === 0) {
        cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
      }

      if (file_system_1.File.exists(cssFilePath)) {
        instance.addCssFile(cssFilePath);
        cssApplied = true;
      } else {
        throw new Error("Css file with path \"" + cssFilePath + "\" cannot be found!");
      }
    }
  }

  if (typeof instance.addCssFile === "function") {
    if (moduleNamePath && !cssApplied) {
      var appPath = filesystem.knownFolders.currentApp().path;
      var cssPathRelativeToApp = (moduleNamePath.startsWith(appPath) ? "./" + moduleNamePath.substr(appPath.length + 1) : moduleNamePath) + ".css";

      if (global.moduleExists(cssPathRelativeToApp)) {
        instance.addCssFile(cssPathRelativeToApp);
      }

      var cssFilePath = file_name_resolver_1.resolveFileName(moduleNamePath, "css");

      if (cssFilePath) {
        instance.addCssFile(cssFilePath);
        cssApplied = true;
      }
    }
  }
});
var applyComponentAttributes = profiling_1.profile("applyComponentAttributes", function (instance, instanceModule, moduleExports, attributes) {
  if (instance && instanceModule) {
    for (var attr in attributes) {
      var attrValue = attributes[attr];

      if (attr.indexOf(":") !== -1) {
        var platformName = attr.split(":")[0].trim();

        if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
          attr = attr.split(":")[1].trim();
        } else {
          continue;
        }
      }

      if (attr.indexOf(".") !== -1) {
        var subObj = instance;
        var properties = attr.split(".");
        var subPropName = properties[properties.length - 1];

        for (var i = 0; i < properties.length - 1; i++) {
          if (subObj !== undefined && subObj !== null) {
            subObj = subObj[properties[i]];
          }
        }

        if (subObj !== undefined && subObj !== null) {
          setPropertyValue(subObj, instanceModule, moduleExports, subPropName, attrValue);
        }
      } else {
        setPropertyValue(instance, instanceModule, moduleExports, attr, attrValue);
      }
    }
  }
});

function getComponentModule(elementName, namespace, attributes, moduleExports, moduleNamePath, isRootComponent) {
  elementName = elementName.split("-").map(function (s) {
    return s[0].toUpperCase() + s.substring(1);
  }).join("");

  var _a = createComponentInstance(elementName, namespace),
      instance = _a.instance,
      instanceModule = _a.instanceModule;

  moduleExports = getComponentModuleExports(instance, moduleExports, attributes);

  if (isRootComponent) {
    applyComponentCss(instance, moduleNamePath, attributes);
  }

  applyComponentAttributes(instance, instanceModule, moduleExports, attributes);
  var componentModule;

  if (instance && instanceModule) {
    componentModule = {
      component: instance,
      exports: instanceModule
    };
  }

  return componentModule;
}

exports.getComponentModule = getComponentModule;

function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
  if (isBinding(propertyValue) && instance.bind) {
    var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
    instance.bind({
      sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
      targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
      expression: bindOptions[binding_builder_1.bindingConstants.expression],
      twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
    }, bindOptions[binding_builder_1.bindingConstants.source]);
  } else if (bindable_1.isEventOrGesture(propertyName, instance)) {
    var handler = exports && exports[propertyValue];

    if (typeof handler === "function") {
      instance.on(propertyName, handler);
    }
  } else if (isKnownFunction(propertyName, instance) && exports && typeof exports[propertyValue] === "function") {
    instance[propertyName] = exports[propertyValue];
  } else {
    instance[propertyName] = propertyValue;
  }
}

exports.setPropertyValue = setPropertyValue;

function getBindingExpressionFromAttribute(value) {
  return value.replace("{{", "").replace("}}", "").trim();
}

function isBinding(value) {
  var isBinding;

  if (typeof value === "string") {
    var str = value.trim();
    isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
  }

  return isBinding;
}

var KNOWN_FUNCTIONS = "knownFunctions";

function isKnownFunction(name, instance) {
  return instance.constructor && KNOWN_FUNCTIONS in instance.constructor && instance.constructor[KNOWN_FUNCTIONS].indexOf(name) !== -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/button/button-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var ButtonBase = function (_super) {
  __extends(ButtonBase, _super);

  function ButtonBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ButtonBase.prototype, "textWrap", {
    get: function () {
      return this.style.whiteSpace === "normal";
    },
    set: function (value) {
      if (typeof value === "string") {
        value = text_base_1.booleanConverter(value);
      }

      this.style.whiteSpace = value ? "normal" : "nowrap";
    },
    enumerable: true,
    configurable: true
  });
  ButtonBase.tapEvent = "tap";
  ButtonBase = __decorate([text_base_1.CSSType("Button")], ButtonBase);
  return ButtonBase;
}(text_base_1.TextBase);

exports.ButtonBase = ButtonBase;
ButtonBase.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/button/button.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var button_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/button/button-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var gestures_1 = __webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/button/button-common.js"));

var ClickListener;
var APILEVEL;
var AndroidButton;

function initializeClickListener() {
  if (ClickListener) {
    return;
  }

  var ClickListenerImpl = function (_super) {
    __extends(ClickListenerImpl, _super);

    function ClickListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    ClickListenerImpl.prototype.onClick = function (v) {
      var owner = this.owner;

      if (owner) {
        owner._emit(button_common_1.ButtonBase.tapEvent);
      }
    };

    ClickListenerImpl = __decorate([Interfaces([android.view.View.OnClickListener])], ClickListenerImpl);
    return ClickListenerImpl;
  }(java.lang.Object);

  ClickListener = ClickListenerImpl;
}

var Button = function (_super) {
  __extends(Button, _super);

  function Button() {
    var _this = _super.call(this) || this;

    if (!APILEVEL) {
      APILEVEL = android.os.Build.VERSION.SDK_INT;
    }

    return _this;
  }

  Button.prototype.createNativeView = function () {
    if (!AndroidButton) {
      AndroidButton = android.widget.Button;
    }

    return new AndroidButton(this._context);
  };

  Button.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    initializeClickListener();
    var clickListener = new ClickListener(this);
    nativeView.setOnClickListener(clickListener);
    nativeView.clickListener = clickListener;
  };

  Button.prototype.disposeNativeView = function () {
    if (this.nativeViewProtected) {
      this.nativeViewProtected.clickListener.owner = null;
    }

    _super.prototype.disposeNativeView.call(this);
  };

  Button.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    if (this._stateListAnimator && APILEVEL >= 21) {
      this.nativeViewProtected.setStateListAnimator(this._stateListAnimator);
      this._stateListAnimator = undefined;
    }
  };

  Button.prototype._updateHandler = function (subscribe) {
    var _this = this;

    if (subscribe) {
      this._highlightedHandler = this._highlightedHandler || function (args) {
        switch (args.action) {
          case gestures_1.TouchAction.up:
            _this._goToVisualState("normal");

            break;

          case gestures_1.TouchAction.down:
            _this._goToVisualState("highlighted");

            break;
        }
      };

      this.on(gestures_1.GestureTypes.touch, this._highlightedHandler);
    } else {
      this.off(gestures_1.GestureTypes.touch, this._highlightedHandler);
    }
  };

  Button.prototype[button_common_1.paddingTopProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingTop,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingTopProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeViewProtected, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
  };

  Button.prototype[button_common_1.paddingRightProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingRight,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingRightProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeViewProtected, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
  };

  Button.prototype[button_common_1.paddingBottomProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingBottom,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingBottomProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeViewProtected, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
  };

  Button.prototype[button_common_1.paddingLeftProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingLeft,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingLeftProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeViewProtected, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
  };

  Button.prototype[button_common_1.zIndexProperty.setNative] = function (value) {
    if (APILEVEL >= 21) {
      var nativeView = this.nativeViewProtected;

      if (!this._stateListAnimator) {
        this._stateListAnimator = nativeView.getStateListAnimator();
      }

      nativeView.setStateListAnimator(null);
    }

    org.nativescript.widgets.ViewHelper.setZIndex(this.nativeViewProtected, value);
  };

  Button.prototype[button_common_1.textAlignmentProperty.setNative] = function (value) {
    var newValue = value === "initial" ? "center" : value;

    _super.prototype[button_common_1.textAlignmentProperty.setNative].call(this, newValue);
  };

  __decorate([profiling_1.profile], Button.prototype, "createNativeView", null);

  __decorate([button_common_1.PseudoClassHandler("normal", "highlighted", "pressed", "active")], Button.prototype, "_updateHandler", null);

  return Button;
}(button_common_1.ButtonBase);

exports.Button = Button;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/bindable/bindable.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

exports.Observable = observable_1.Observable;
exports.WrappedValue = observable_1.WrappedValue;

var weak_event_listener_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js");

var binding_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/binding-builder.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceError = trace_1.error;
exports.traceCategories = trace_1.categories;
exports.traceNotifyEvent = trace_1.notifyEvent;
exports.isCategorySet = trace_1.isCategorySet;
exports.traceMessageType = trace_1.messageType;

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var applicationCommon = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var polymerExpressions = __webpack_require__("../node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js");

var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = binding_builder_1.bindingConstants;
var emptyArray = [];
var propertiesCache = {};

function getProperties(property) {
  if (!property) {
    return emptyArray;
  }

  var result = propertiesCache[property];

  if (result) {
    return result;
  }

  var parentsMatches = property.match(binding_builder_1.parentsRegex);
  result = property.replace(binding_builder_1.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
  var parentsMatchesCounter = 0;

  for (var i = 0, resultLength = result.length; i < resultLength; i++) {
    if (result[i] === "parentsMatch") {
      result[i] = parentsMatches[parentsMatchesCounter++];
    }
  }

  propertiesCache[property] = result;
  return result;
}

function getEventOrGestureName(name) {
  return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}

exports.getEventOrGestureName = getEventOrGestureName;

function isGesture(eventOrGestureName) {
  var t = eventOrGestureName.trim().toLowerCase();
  return t === "tap" || t === "doubletap" || t === "pinch" || t === "pan" || t === "swipe" || t === "rotation" || t === "longpress" || t === "touch";
}

exports.isGesture = isGesture;

function isEventOrGesture(name, view) {
  if (typeof name === "string") {
    var eventOrGestureName = getEventOrGestureName(name);
    var evt = eventOrGestureName + "Event";
    return view.constructor && evt in view.constructor || isGesture(eventOrGestureName.toLowerCase());
  }

  return false;
}

exports.isEventOrGesture = isEventOrGesture;

var Binding = function () {
  function Binding(target, options) {
    this.propertyChangeListeners = new Map();
    this.target = new WeakRef(target);
    this.options = options;
    this.sourceProperties = getProperties(options.sourceProperty);
    this.targetOptions = this.resolveOptions(target, getProperties(options.targetProperty));

    if (!this.targetOptions) {
      throw new Error("Invalid property: " + options.targetProperty + " for target: " + target);
    }

    if (options.twoWay) {
      var target_1 = this.targetOptions.instance.get();

      if (target_1 instanceof observable_1.Observable) {
        target_1.on(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
      }
    }
  }

  Binding.prototype.onTargetPropertyChanged = function (data) {
    this.updateTwoWay(data.value);
  };

  Binding.prototype.loadedHandlerVisualTreeBinding = function (args) {
    var target = args.object;
    target.off("loaded", this.loadedHandlerVisualTreeBinding, this);
    var context = target.bindingContext;

    if (context !== undefined && context !== null) {
      this.update(context);
    }
  };

  ;

  Binding.prototype.clearSource = function () {
    var _this = this;

    this.propertyChangeListeners.forEach(function (observable, index, map) {
      weak_event_listener_1.removeWeakEventListener(observable, observable_1.Observable.propertyChangeEvent, _this.onSourcePropertyChanged, _this);
    });
    this.propertyChangeListeners.clear();

    if (this.source) {
      this.source.clear();
    }

    if (this.sourceOptions) {
      this.sourceOptions.instance.clear();
      this.sourceOptions = undefined;
    }
  };

  Binding.prototype.sourceAsObject = function (source) {
    var objectType = typeof source;

    if (objectType === "number") {
      source = new Number(source);
    } else if (objectType === "boolean") {
      source = new Boolean(source);
    } else if (objectType === "string") {
      source = new String(source);
    }

    return source;
  };

  Binding.prototype.bindingContextChanged = function (data) {
    var target = this.targetOptions.instance.get();

    if (!target) {
      this.unbind();
      return;
    }

    var value = data.value;

    if (value !== null && value !== undefined) {
      this.update(value);
    } else {
      this.clearBinding();
    }
  };

  Binding.prototype.bind = function (source) {
    var target = this.targetOptions.instance.get();

    if (this.sourceIsBindingContext && target instanceof observable_1.Observable && this.targetOptions.property !== "bindingContext") {
      target.on("bindingContextChange", this.bindingContextChanged, this);
    }

    this.update(source);
  };

  Binding.prototype.update = function (source) {
    this.clearSource();
    source = this.sourceAsObject(source);

    if (!types.isNullOrUndefined(source)) {
      this.source = new WeakRef(source);
      this.sourceOptions = this.resolveOptions(source, this.sourceProperties);
      var sourceValue = this.getSourcePropertyValue();
      this.updateTarget(sourceValue);
      this.addPropertyChangeListeners(this.source, this.sourceProperties);
    } else if (!this.sourceIsBindingContext) {
      var sourceValue = this.getSourcePropertyValue();
      this.updateTarget(sourceValue ? sourceValue : source);
    }
  };

  Binding.prototype.unbind = function () {
    var target = this.targetOptions.instance.get();

    if (target instanceof observable_1.Observable) {
      if (this.options.twoWay) {
        target.off(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
      }

      if (this.sourceIsBindingContext && this.targetOptions.property !== "bindingContext") {
        target.off("bindingContextChange", this.bindingContextChanged, this);
      }
    }

    if (this.targetOptions) {
      this.targetOptions = undefined;
    }

    this.sourceProperties = undefined;

    if (!this.source) {
      return;
    }

    this.clearSource();
  };

  Binding.prototype.resolveObjectsAndProperties = function (source, properties) {
    var result = [];
    var currentObject = source;
    var currentObjectChanged = false;

    for (var i = 0, propsArrayLength = properties.length; i < propsArrayLength; i++) {
      var property = properties[i];

      if (property === bc.bindingValueKey) {
        currentObjectChanged = true;
      }

      if (property === bc.parentValueKey || property.indexOf(bc.parentsValueKey) === 0) {
        var parentView = this.getParentView(this.target.get(), property).view;

        if (parentView) {
          currentObject = parentView.bindingContext;
        } else {
          var targetInstance = this.target.get();
          targetInstance.off("loaded", this.loadedHandlerVisualTreeBinding, this);
          targetInstance.on("loaded", this.loadedHandlerVisualTreeBinding, this);
        }

        currentObjectChanged = true;
      }

      if (currentObject) {
        result.push({
          instance: currentObject,
          property: property
        });
      } else {
        break;
      }

      if (!currentObjectChanged && i < propsArrayLength - 1) {
        currentObject = currentObject ? currentObject[properties[i]] : null;
      }

      currentObjectChanged = false;
    }

    return result;
  };

  Binding.prototype.addPropertyChangeListeners = function (source, sourceProperty, parentProperies) {
    var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
    var prop = parentProperies || "";

    for (var i = 0, length_1 = objectsAndProperties.length; i < length_1; i++) {
      var propName = objectsAndProperties[i].property;
      prop += "$" + propName;
      var currentObject = objectsAndProperties[i].instance;

      if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable && currentObject._isViewBase) {
        weak_event_listener_1.addWeakEventListener(currentObject, propName + "Change", this.onSourcePropertyChanged, this);
        weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
        this.propertyChangeListeners.set(prop, currentObject);
      } else if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable) {
        weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
        this.propertyChangeListeners.set(prop, currentObject);
      }
    }
  };

  Binding.prototype.prepareExpressionForUpdate = function () {
    var escapedSourceProperty = utils_1.escapeRegexSymbols(this.options.sourceProperty);
    var expRegex = new RegExp(escapedSourceProperty, "g");
    var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
    return resultExp;
  };

  Binding.prototype.updateTwoWay = function (value) {
    if (this.updating || !this.options.twoWay) {
      return;
    }

    var newValue = value;

    if (this.options.expression) {
      var changedModel = {};
      changedModel[bc.bindingValueKey] = value;
      changedModel[bc.newPropertyValueKey] = value;
      var sourcePropertyName = "";

      if (this.sourceOptions) {
        sourcePropertyName = this.sourceOptions.property;
      } else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
        sourcePropertyName = this.options.sourceProperty;
      }

      if (sourcePropertyName !== "") {
        changedModel[sourcePropertyName] = value;
      }

      var updateExpression = this.prepareExpressionForUpdate();
      this.prepareContextForExpression(changedModel, updateExpression, undefined);

      var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      }

      newValue = expressionValue;
    }

    this.updateSource(newValue);
  };

  Binding.prototype._getExpressionValue = function (expression, isBackConvert, changedModel) {
    try {
      var exp_1 = polymerExpressions.PolymerExpressions.getExpression(expression);

      if (exp_1) {
        var context_1 = this.source && this.source.get && this.source.get() || global;
        var model = {};
        var addedProps = [];
        var resources = applicationCommon.getResources();

        for (var prop in resources) {
          if (resources.hasOwnProperty(prop) && !context_1.hasOwnProperty(prop)) {
            context_1[prop] = resources[prop];
            addedProps.push(prop);
          }
        }

        this.prepareContextForExpression(context_1, expression, addedProps);
        model[contextKey] = context_1;
        var result = exp_1.getValue(model, isBackConvert, changedModel ? changedModel : model);
        var addedPropsLength = addedProps.length;

        for (var i = 0; i < addedPropsLength; i++) {
          delete context_1[addedProps[i]];
        }

        addedProps.length = 0;
        return result;
      }

      return new Error(expression + " is not a valid expression.");
    } catch (e) {
      var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
      return new Error(errorMessage);
    }
  };

  Binding.prototype.onSourcePropertyChanged = function (data) {
    var sourceProps = this.sourceProperties;
    var sourcePropsLength = sourceProps.length;
    var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
    var parentProps = "";

    if (changedPropertyIndex > -1) {
      parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");

      while (this.propertyChangeListeners.get(parentProps) !== data.object) {
        changedPropertyIndex += sourceProps.slice(changedPropertyIndex + 1).indexOf(data.propertyName) + 1;
        parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
      }
    }

    if (this.options.expression) {
      var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      } else {
        this.updateTarget(expressionValue);
      }
    } else {
      if (changedPropertyIndex > -1) {
        var props = sourceProps.slice(changedPropertyIndex + 1);
        var propsLength = props.length;

        if (propsLength > 0) {
          var value = data.value;

          for (var i = 0; i < propsLength; i++) {
            value = value[props[i]];
          }

          this.updateTarget(value);
        } else if (data.propertyName === this.sourceOptions.property) {
          this.updateTarget(data.value);
        }
      }
    }

    if (changedPropertyIndex > -1 && changedPropertyIndex < sourcePropsLength - 1) {
      var probablyChangedObject = this.propertyChangeListeners.get(parentProps);

      if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
        for (var i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
          var prop = "$" + sourceProps.slice(0, i + 1).join("$");

          if (this.propertyChangeListeners.has(prop)) {
            weak_event_listener_1.removeWeakEventListener(this.propertyChangeListeners.get(prop), observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
            this.propertyChangeListeners.delete(prop);
          }
        }

        var newProps = sourceProps.slice(changedPropertyIndex + 1);
        var newObject = data.object[sourceProps[changedPropertyIndex]];

        if (!types.isNullOrUndefined(newObject) && typeof newObject === "object") {
          this.addPropertyChangeListeners(new WeakRef(newObject), newProps, parentProps);
        }
      }
    }
  };

  Binding.prototype.prepareContextForExpression = function (model, expression, newProps) {
    var parentViewAndIndex;
    var parentView;
    var addedProps = newProps || [];

    if (expression.indexOf(bc.bindingValueKey) > -1) {
      model[bc.bindingValueKey] = model;
      addedProps.push(bc.bindingValueKey);
    }

    if (expression.indexOf(bc.parentValueKey) > -1) {
      parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;

      if (parentView) {
        model[bc.parentValueKey] = parentView.bindingContext;
        addedProps.push(bc.parentValueKey);
      }
    }

    var parentsArray = expression.match(binding_builder_1.parentsRegex);

    if (parentsArray) {
      for (var i = 0; i < parentsArray.length; i++) {
        parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);

        if (parentViewAndIndex.view) {
          model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
          model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
          addedProps.push(bc.parentsValueKey);
        }
      }
    }
  };

  Binding.prototype.getSourcePropertyValue = function () {
    if (this.options.expression) {
      var changedModel = {};
      changedModel[bc.bindingValueKey] = this.source ? this.source.get() : undefined;

      var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      } else {
        return expressionValue;
      }
    }

    if (this.sourceOptions) {
      var sourceOptionsInstance = this.sourceOptions.instance.get();

      if (this.sourceOptions.property === bc.bindingValueKey) {
        return sourceOptionsInstance;
      } else if (sourceOptionsInstance instanceof observable_1.Observable && this.sourceOptions.property && this.sourceOptions.property !== "") {
        return sourceOptionsInstance.get(this.sourceOptions.property);
      } else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property !== "" && this.sourceOptions.property in sourceOptionsInstance) {
        return sourceOptionsInstance[this.sourceOptions.property];
      } else {
        trace_1.write("Property: '" + this.sourceOptions.property + "' is invalid or does not exist. SourceProperty: '" + this.options.sourceProperty + "'", trace_1.categories.Binding, trace_1.messageType.error);
      }
    }

    return null;
  };

  Binding.prototype.clearBinding = function () {
    this.clearSource();
    this.updateTarget(properties_1.unsetValue);
  };

  Binding.prototype.updateTarget = function (value) {
    if (this.updating) {
      return;
    }

    this.updateOptions(this.targetOptions, types.isNullOrUndefined(value) ? properties_1.unsetValue : value);
  };

  Binding.prototype.updateSource = function (value) {
    if (this.updating || !this.source || !this.source.get()) {
      return;
    }

    this.updateOptions(this.sourceOptions, value);
  };

  Binding.prototype.getParentView = function (target, property) {
    if (!target) {
      return {
        view: null,
        index: null
      };
    }

    var result;

    if (property === bc.parentValueKey) {
      result = target.parent;
    }

    var index = null;

    if (property.indexOf(bc.parentsValueKey) === 0) {
      result = target.parent;
      var indexParams = paramsRegex.exec(property);

      if (indexParams && indexParams.length > 1) {
        index = indexParams[2];
      }

      if (!isNaN(index)) {
        var indexAsInt = parseInt(index);

        while (indexAsInt > 0) {
          result = result.parent;
          indexAsInt--;
        }
      } else if (types.isString(index)) {
        while (result && result.typeName !== index) {
          result = result.parent;
        }
      }
    }

    return {
      view: result,
      index: index
    };
  };

  Binding.prototype.resolveOptions = function (obj, properties) {
    var objectsAndProperties = this.resolveObjectsAndProperties(obj, properties);

    if (objectsAndProperties.length > 0) {
      var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
      var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
      return {
        instance: new WeakRef(this.sourceAsObject(resolvedObj)),
        property: prop
      };
    }

    return null;
  };

  Binding.prototype.updateOptions = function (options, value) {
    var optionsInstance;

    if (options && options.instance) {
      optionsInstance = options.instance.get();
    }

    if (!optionsInstance) {
      return;
    }

    this.updating = true;

    try {
      if (isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
        optionsInstance.off(options.property, null, optionsInstance.bindingContext);
        optionsInstance.on(options.property, value, optionsInstance.bindingContext);
      } else if (optionsInstance instanceof observable_1.Observable) {
        optionsInstance.set(options.property, value);
      } else {
        optionsInstance[options.property] = value;
      }
    } catch (ex) {
      trace_1.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace_1.categories.Binding, trace_1.messageType.error);
    }

    this.updating = false;
  };

  return Binding;
}();

exports.Binding = Binding;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/properties/properties.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var style_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style/style.js");

exports.Style = style_1.Style;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

exports.unsetValue = new Object();
var cssPropertyNames = [];
var symbolPropertyMap = {};
var cssSymbolPropertyMap = {};
var inheritableProperties = new Array();
var inheritableCssProperties = new Array();

function print(map) {
  var symbols = Object.getOwnPropertySymbols(map);

  for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
    var symbol = symbols_1[_i];
    var prop = map[symbol];

    if (!prop.registered) {
      console.log("Property " + prop.name + " not Registered!!!!!");
    }
  }
}

function _printUnregisteredProperties() {
  print(symbolPropertyMap);
  print(cssSymbolPropertyMap);
}

exports._printUnregisteredProperties = _printUnregisteredProperties;

function _getProperties() {
  return getPropertiesFromMap(symbolPropertyMap);
}

exports._getProperties = _getProperties;

function _getStyleProperties() {
  return getPropertiesFromMap(cssSymbolPropertyMap);
}

exports._getStyleProperties = _getStyleProperties;

function getPropertiesFromMap(map) {
  var props = [];
  Object.getOwnPropertySymbols(map).forEach(function (symbol) {
    return props.push(map[symbol]);
  });
  return props;
}

var Property = function () {
  function Property(options) {
    this.enumerable = true;
    this.configurable = true;
    var propertyName = options.name;
    this.name = propertyName;
    var key = Symbol(propertyName + ":propertyKey");
    this.key = key;
    var getDefault = Symbol(propertyName + ":getDefault");
    this.getDefault = getDefault;
    var setNative = Symbol(propertyName + ":setNative");
    this.setNative = setNative;
    var defaultValueKey = Symbol(propertyName + ":nativeDefaultValue");
    this.defaultValueKey = defaultValueKey;
    var defaultValue = options.defaultValue;
    this.defaultValue = defaultValue;
    var eventName = propertyName + "Change";
    var equalityComparer = options.equalityComparer;
    var affectsLayout = options.affectsLayout;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = this;

    this.set = function (boxedValue) {
      var reset = boxedValue === exports.unsetValue;
      var value;
      var wrapped;

      if (reset) {
        value = defaultValue;
      } else {
        wrapped = boxedValue && boxedValue.wrapped;
        value = wrapped ? observable_1.WrappedValue.unwrap(boxedValue) : boxedValue;

        if (valueConverter && typeof value === "string") {
          value = valueConverter(value);
        }
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (wrapped || changed) {
        if (affectsLayout) {
          this.requestLayout();
        }

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                this[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                this[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
              }

              this[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (this.domNode) {
          if (reset) {
            this.domNode.attributeRemoved(propertyName);
          } else {
            this.domNode.attributeModified(propertyName, value);
          }
        }
      }
    };

    this.get = function () {
      return key in this ? this[key] : defaultValue;
    };

    this.nativeValueChange = function (owner, value) {
      var oldValue = key in owner ? owner[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        owner[key] = value;

        if (valueChanged) {
          valueChanged(owner, oldValue, value);
        }

        if (owner.nativeViewProtected && !(defaultValueKey in owner)) {
          owner[defaultValueKey] = owner[getDefault] ? owner[getDefault]() : defaultValue;
        }

        if (owner.hasListeners(eventName)) {
          owner.notify({
            object: owner,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          owner.requestLayout();
        }

        if (owner.domNode) {
          owner.domNode.attributeModified(propertyName, value);
        }
      }
    };

    symbolPropertyMap[key] = this;
  }

  Property.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this);
  };

  Property.prototype.isSet = function (instance) {
    return this.key in instance;
  };

  return Property;
}();

exports.Property = Property;
Property.prototype.isStyleProperty = false;

var CoercibleProperty = function (_super) {
  __extends(CoercibleProperty, _super);

  function CoercibleProperty(options) {
    var _this = _super.call(this, options) || this;

    var propertyName = options.name;
    var key = _this.key;
    var getDefault = _this.getDefault;
    var setNative = _this.setNative;
    var defaultValueKey = _this.defaultValueKey;
    var defaultValue = _this.defaultValue;
    var coerceKey = Symbol(propertyName + ":coerceKey");
    var eventName = propertyName + "Change";
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var coerceCallback = options.coerceValue;
    var property = _this;

    _this.coerce = function (target) {
      var originalValue = coerceKey in target ? target[coerceKey] : defaultValue;
      target[propertyName] = originalValue;
    };

    _this.set = function (boxedValue) {
      var reset = boxedValue === exports.unsetValue;
      var value;
      var wrapped;

      if (reset) {
        value = defaultValue;
        delete this[coerceKey];
      } else {
        wrapped = boxedValue && boxedValue.wrapped;
        value = wrapped ? observable_1.WrappedValue.unwrap(boxedValue) : boxedValue;

        if (valueConverter && typeof value === "string") {
          value = valueConverter(value);
        }

        this[coerceKey] = value;
        value = coerceCallback(this, value);
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (wrapped || changed) {
        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                this[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                this[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
              }

              this[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          this.requestLayout();
        }

        if (this.domNode) {
          if (reset) {
            this.domNode.attributeRemoved(propertyName);
          } else {
            this.domNode.attributeModified(propertyName, value);
          }
        }
      }
    };

    return _this;
  }

  return CoercibleProperty;
}(Property);

exports.CoercibleProperty = CoercibleProperty;

var InheritedProperty = function (_super) {
  __extends(InheritedProperty, _super);

  function InheritedProperty(options) {
    var _this = _super.call(this, options) || this;

    var name = options.name;
    var key = _this.key;
    var defaultValue = options.defaultValue;
    var sourceKey = Symbol(name + ":valueSourceKey");
    _this.sourceKey = sourceKey;
    var setBase = _this.set;

    var setFunc = function (valueSource) {
      return function (value) {
        var that = this;
        var unboxedValue;
        var newValueSource;

        if (value === exports.unsetValue) {
          var parent_1 = that.parent;

          if (parent_1 && parent_1[sourceKey] !== 0) {
            unboxedValue = parent_1[name];
            newValueSource = 1;
          } else {
            unboxedValue = defaultValue;
            newValueSource = 0;
          }
        } else {
          unboxedValue = value;
          newValueSource = valueSource;
        }

        var currentValue = that[key];
        setBase.call(that, unboxedValue);
        var newValue = that[key];
        that[sourceKey] = newValueSource;

        if (currentValue !== newValue) {
          var reset_1 = newValueSource === 0;
          that.eachChild(function (child) {
            var childValueSource = child[sourceKey] || 0;

            if (reset_1) {
              if (childValueSource === 1) {
                setFunc.call(child, exports.unsetValue);
              }
            } else {
              if (childValueSource <= 1) {
                setInheritedValue.call(child, newValue);
              }
            }

            return true;
          });
        }
      };
    };

    var setInheritedValue = setFunc(1);
    _this.setInheritedValue = setInheritedValue;
    _this.set = setFunc(3);
    inheritableProperties.push(_this);
    return _this;
  }

  return InheritedProperty;
}(Property);

exports.InheritedProperty = InheritedProperty;

var CssProperty = function () {
  function CssProperty(options) {
    var propertyName = options.name;
    this.name = propertyName;
    cssPropertyNames.push(options.cssName);
    this.cssName = "css:" + options.cssName;
    this.cssLocalName = options.cssName;
    var key = Symbol(propertyName + ":propertyKey");
    this.key = key;
    var sourceKey = Symbol(propertyName + ":valueSourceKey");
    this.sourceKey = sourceKey;
    var getDefault = Symbol(propertyName + ":getDefault");
    this.getDefault = getDefault;
    var setNative = Symbol(propertyName + ":setNative");
    this.setNative = setNative;
    var defaultValueKey = Symbol(propertyName + ":nativeDefaultValue");
    this.defaultValueKey = defaultValueKey;
    var defaultValue = options.defaultValue;
    this.defaultValue = defaultValue;
    var eventName = propertyName + "Change";
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = this;

    function setLocalValue(newValue) {
      var reset = newValue === exports.unsetValue || newValue === "";
      var value;

      if (reset) {
        value = defaultValue;
        delete this[sourceKey];
      } else {
        this[sourceKey] = 3;
        value = valueConverter && typeof newValue === "string" ? valueConverter(newValue) : newValue;
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        var view = this.view;

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                view[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                view[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
              }

              view[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          view.requestLayout();
        }
      }
    }

    function setCssValue(newValue) {
      var currentValueSource = this[sourceKey] || 0;

      if (currentValueSource === 3) {
        return;
      }

      var reset = newValue === exports.unsetValue || newValue === "";
      var value;

      if (reset) {
        value = defaultValue;
        delete this[sourceKey];
      } else {
        value = valueConverter && typeof newValue === "string" ? valueConverter(newValue) : newValue;
        this[sourceKey] = 2;
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        var view = this.view;

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                view[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                view[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
              }

              view[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          view.requestLayout();
        }
      }
    }

    function get() {
      return key in this ? this[key] : defaultValue;
    }

    this.cssValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: get,
      set: setCssValue
    };
    this.localValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: get,
      set: setLocalValue
    };
    cssSymbolPropertyMap[key] = this;
  }

  CssProperty.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
    Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);

    if (this.cssLocalName !== this.cssName) {
      Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
    }
  };

  CssProperty.prototype.isSet = function (instance) {
    return this.key in instance;
  };

  return CssProperty;
}();

exports.CssProperty = CssProperty;
CssProperty.prototype.isStyleProperty = true;

var CssAnimationProperty = function () {
  function CssAnimationProperty(options) {
    var valueConverter = options.valueConverter,
        equalityComparer = options.equalityComparer,
        valueChanged = options.valueChanged,
        defaultValue = options.defaultValue;
    var propertyName = options.name;
    this.name = propertyName;
    cssPropertyNames.push(options.cssName);
    CssAnimationProperty.properties[propertyName] = this;

    if (options.cssName && options.cssName !== propertyName) {
      CssAnimationProperty.properties[options.cssName] = this;
    }

    this._valueConverter = options.valueConverter;
    var cssLocalName = options.cssName || propertyName;
    this.cssLocalName = cssLocalName;
    var cssName = "css:" + cssLocalName;
    this.cssName = cssName;
    var keyframeName = "keyframe:" + propertyName;
    this.keyframe = keyframeName;
    var defaultName = "default:" + propertyName;
    var defaultValueKey = Symbol(defaultName);
    this.defaultValueKey = defaultValueKey;
    this.defaultValue = defaultValue;
    var cssValue = Symbol(cssName);
    var styleValue = Symbol("local:" + propertyName);
    var keyframeValue = Symbol(keyframeName);
    var computedValue = Symbol("computed-value:" + propertyName);
    this.key = computedValue;
    var computedSource = Symbol("computed-source:" + propertyName);
    this.source = computedSource;
    this.getDefault = Symbol(propertyName + ":getDefault");
    var getDefault = this.getDefault;
    var setNative = this.setNative = Symbol(propertyName + ":setNative");
    var eventName = propertyName + "Change";
    var property = this;

    function descriptor(symbol, propertySource, enumerable, configurable, getsComputed) {
      return {
        enumerable: enumerable,
        configurable: configurable,
        get: getsComputed ? function () {
          return this[computedValue];
        } : function () {
          return this[symbol];
        },
        set: function (boxedValue) {
          var oldValue = this[computedValue];
          var oldSource = this[computedSource];
          var wasSet = oldSource !== 0;
          var reset = boxedValue === exports.unsetValue || boxedValue === "";

          if (reset) {
            this[symbol] = exports.unsetValue;

            if (this[computedSource] === propertySource) {
              if (this[styleValue] !== exports.unsetValue) {
                this[computedSource] = 3;
                this[computedValue] = this[styleValue];
              } else if (this[cssValue] !== exports.unsetValue) {
                this[computedSource] = 2;
                this[computedValue] = this[cssValue];
              } else {
                delete this[computedSource];
                delete this[computedValue];
              }
            }
          } else {
            if (valueConverter && typeof boxedValue === "string") {
              boxedValue = valueConverter(boxedValue);
            }

            this[symbol] = boxedValue;

            if (this[computedSource] <= propertySource) {
              this[computedSource] = propertySource;
              this[computedValue] = boxedValue;
            }
          }

          var value = this[computedValue];
          var source = this[computedSource];
          var isSet = source !== 0;
          var computedValueChanged = oldValue !== value && (!equalityComparer || !equalityComparer(oldValue, value));

          if (computedValueChanged && valueChanged) {
            valueChanged(this, oldValue, value);
          }

          var view = this.view;

          if (view[setNative] && (computedValueChanged || isSet !== wasSet)) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (isSet) {
                if (!wasSet && !(defaultValueKey in this)) {
                  this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                }

                view[setNative](value);
              } else if (wasSet) {
                if (defaultValueKey in this) {
                  view[setNative](this[defaultValueKey]);
                } else {
                  view[setNative](defaultValue);
                }
              }
            }
          }

          if (computedValueChanged && this.hasListeners(eventName)) {
            this.notify({
              object: this,
              eventName: eventName,
              propertyName: propertyName,
              value: value,
              oldValue: oldValue
            });
          }
        }
      };
    }

    var defaultPropertyDescriptor = descriptor(defaultValueKey, 0, false, false, false);
    var cssPropertyDescriptor = descriptor(cssValue, 2, false, false, false);
    var stylePropertyDescriptor = descriptor(styleValue, 3, true, true, true);
    var keyframePropertyDescriptor = descriptor(keyframeValue, 4, false, false, false);
    symbolPropertyMap[computedValue] = this;
    cssSymbolPropertyMap[computedValue] = this;

    this.register = function (cls) {
      cls.prototype[computedValue] = options.defaultValue;
      cls.prototype[computedSource] = 0;
      cls.prototype[cssValue] = exports.unsetValue;
      cls.prototype[styleValue] = exports.unsetValue;
      cls.prototype[keyframeValue] = exports.unsetValue;
      Object.defineProperty(cls.prototype, defaultName, defaultPropertyDescriptor);
      Object.defineProperty(cls.prototype, cssName, cssPropertyDescriptor);
      Object.defineProperty(cls.prototype, propertyName, stylePropertyDescriptor);

      if (options.cssName && options.cssName !== options.name) {
        Object.defineProperty(cls.prototype, options.cssName, stylePropertyDescriptor);
      }

      Object.defineProperty(cls.prototype, keyframeName, keyframePropertyDescriptor);
    };
  }

  CssAnimationProperty.prototype._initDefaultNativeValue = function (target) {
    var defaultValueKey = this.defaultValueKey;

    if (!(defaultValueKey in target)) {
      var view = target.view;
      var getDefault = this.getDefault;
      target[defaultValueKey] = view[getDefault] ? view[getDefault]() : this.defaultValue;
    }
  };

  CssAnimationProperty._getByCssName = function (name) {
    return this.properties[name];
  };

  CssAnimationProperty._getPropertyNames = function () {
    return Object.keys(CssAnimationProperty.properties);
  };

  CssAnimationProperty.prototype.isSet = function (instance) {
    return instance[this.source] !== 0;
  };

  CssAnimationProperty.properties = {};
  return CssAnimationProperty;
}();

exports.CssAnimationProperty = CssAnimationProperty;
CssAnimationProperty.prototype.isStyleProperty = true;

var InheritedCssProperty = function (_super) {
  __extends(InheritedCssProperty, _super);

  function InheritedCssProperty(options) {
    var _this = _super.call(this, options) || this;

    var propertyName = options.name;
    var key = _this.key;
    var sourceKey = _this.sourceKey;
    var getDefault = _this.getDefault;
    var setNative = _this.setNative;
    var defaultValueKey = _this.defaultValueKey;
    var eventName = propertyName + "Change";
    var defaultValue = options.defaultValue;
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = _this;

    var setFunc = function (valueSource) {
      return function (boxedValue) {
        var reset = boxedValue === exports.unsetValue || boxedValue === "";
        var currentValueSource = this[sourceKey] || 0;

        if (reset) {
          if (valueSource === 2 && currentValueSource === 3) {
            return;
          }
        } else {
          if (currentValueSource > valueSource) {
            return;
          }
        }

        var oldValue = key in this ? this[key] : defaultValue;
        var view = this.view;
        var value;
        var unsetNativeValue = false;

        if (reset) {
          var parent_2 = view.parent;
          var style = parent_2 ? parent_2.style : null;

          if (style && style[sourceKey] > 0) {
            value = style[propertyName];
            this[sourceKey] = 1;
            this[key] = value;
          } else {
            value = defaultValue;
            delete this[sourceKey];
            delete this[key];
            unsetNativeValue = true;
          }
        } else {
          this[sourceKey] = valueSource;

          if (valueConverter && typeof boxedValue === "string") {
            value = valueConverter(boxedValue);
          } else {
            value = boxedValue;
          }

          this[key] = value;
        }

        var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

        if (changed) {
          var view_1 = this.view;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view_1[setNative]) {
            if (view_1._suspendNativeUpdatesCount) {
              if (view_1._suspendedUpdates) {
                view_1._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (unsetNativeValue) {
                if (defaultValueKey in this) {
                  view_1[setNative](this[defaultValueKey]);
                  delete this[defaultValueKey];
                } else {
                  view_1[setNative](defaultValue);
                }
              } else {
                if (!(defaultValueKey in this)) {
                  this[defaultValueKey] = view_1[getDefault] ? view_1[getDefault]() : defaultValue;
                }

                view_1[setNative](value);
              }
            }
          }

          if (this.hasListeners(eventName)) {
            this.notify({
              object: this,
              eventName: eventName,
              propertyName: propertyName,
              value: value,
              oldValue: oldValue
            });
          }

          if (affectsLayout) {
            view_1.requestLayout();
          }

          view_1.eachChild(function (child) {
            var childStyle = child.style;
            var childValueSource = childStyle[sourceKey] || 0;

            if (reset) {
              if (childValueSource === 1) {
                setDefaultFunc.call(childStyle, exports.unsetValue);
              }
            } else {
              if (childValueSource <= 1) {
                setInheritedFunc.call(childStyle, value);
              }
            }

            return true;
          });
        }
      };
    };

    var setDefaultFunc = setFunc(0);
    var setInheritedFunc = setFunc(1);
    _this.setInheritedValue = setInheritedFunc;
    _this.cssValueDescriptor.set = setFunc(2);
    _this.localValueDescriptor.set = setFunc(3);
    inheritableCssProperties.push(_this);
    return _this;
  }

  return InheritedCssProperty;
}(CssProperty);

exports.InheritedCssProperty = InheritedCssProperty;

var ShorthandProperty = function () {
  function ShorthandProperty(options) {
    this.name = options.name;
    var key = Symbol(this.name + ":propertyKey");
    this.key = key;
    this.cssName = "css:" + options.cssName;
    this.cssLocalName = "" + options.cssName;
    var converter = options.converter;

    function setLocalValue(value) {
      var _this = this;

      this.view._batchUpdate(function () {
        for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
          var _b = _a[_i],
              p = _b[0],
              v = _b[1];
          _this[p.name] = v;
        }
      });
    }

    function setCssValue(value) {
      var _this = this;

      this.view._batchUpdate(function () {
        for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
          var _b = _a[_i],
              p = _b[0],
              v = _b[1];
          _this[p.cssName] = v;
        }
      });
    }

    this.cssValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: options.getter,
      set: setCssValue
    };
    this.localValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: options.getter,
      set: setLocalValue
    };
    this.propertyBagDescriptor = {
      enumerable: false,
      configurable: true,
      set: function (value) {
        var _this = this;

        converter(value).forEach(function (_a) {
          var property = _a[0],
              value = _a[1];
          _this[property.cssLocalName] = value;
        });
      }
    };
    cssSymbolPropertyMap[key] = this;
  }

  ShorthandProperty.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
    Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);

    if (this.cssLocalName !== this.cssName) {
      Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
    }

    Object.defineProperty(cls.prototype.PropertyBag, this.cssLocalName, this.propertyBagDescriptor);
  };

  return ShorthandProperty;
}();

exports.ShorthandProperty = ShorthandProperty;

function inheritablePropertyValuesOn(view) {
  var array = new Array();

  for (var _i = 0, inheritableProperties_1 = inheritableProperties; _i < inheritableProperties_1.length; _i++) {
    var prop = inheritableProperties_1[_i];
    var sourceKey = prop.sourceKey;
    var valueSource = view[sourceKey] || 0;

    if (valueSource !== 0) {
      array.push({
        property: prop,
        value: view[prop.name]
      });
    }
  }

  return array;
}

function inheritableCssPropertyValuesOn(style) {
  var array = new Array();

  for (var _i = 0, inheritableCssProperties_1 = inheritableCssProperties; _i < inheritableCssProperties_1.length; _i++) {
    var prop = inheritableCssProperties_1[_i];
    var sourceKey = prop.sourceKey;
    var valueSource = style[sourceKey] || 0;

    if (valueSource !== 0) {
      array.push({
        property: prop,
        value: style[prop.name]
      });
    }
  }

  return array;
}

exports.initNativeView = profiling_1.profile("\"properties\".initNativeView", function initNativeView(view) {
  if (view._suspendedUpdates) {
    applyPendingNativeSetters(view);
  } else {
    applyAllNativeSetters(view);
  }

  view._suspendedUpdates = {};
});

function applyPendingNativeSetters(view) {
  var suspendedUpdates = view._suspendedUpdates;

  for (var propertyName in suspendedUpdates) {
    var property = suspendedUpdates[propertyName];
    var setNative = property.setNative;

    if (view[setNative]) {
      var getDefault = property.getDefault,
          isStyleProperty = property.isStyleProperty,
          defaultValueKey = property.defaultValueKey,
          defaultValue = property.defaultValue;
      var value = void 0;

      if (isStyleProperty) {
        var style = view.style;

        if (property.isSet(view.style)) {
          if (!(defaultValueKey in style)) {
            style[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
          }

          value = view.style[propertyName];
        } else {
          value = style[defaultValueKey];
        }
      } else {
        if (property.isSet(view)) {
          if (!(defaultValueKey in view)) {
            view[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
          }

          value = view[propertyName];
        } else {
          value = view[defaultValueKey];
        }
      }

      view[setNative](value);
    }
  }
}

exports.applyPendingNativeSetters = applyPendingNativeSetters;

function applyAllNativeSetters(view) {
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
    var symbol = symbols_2[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    var setNative = property.setNative;
    var getDefault = property.getDefault;

    if (setNative in view) {
      var defaultValueKey = property.defaultValueKey;

      if (!(defaultValueKey in view)) {
        view[defaultValueKey] = view[getDefault] ? view[getDefault]() : property.defaultValue;
      }

      var value = view[symbol];
      view[setNative](value);
    }
  }

  var style = view.style;
  symbols = Object.getOwnPropertySymbols(style);

  for (var _a = 0, symbols_3 = symbols; _a < symbols_3.length; _a++) {
    var symbol = symbols_3[_a];
    var property = cssSymbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      var defaultValueKey = property.defaultValueKey;

      if (!(defaultValueKey in style)) {
        style[defaultValueKey] = view[property.getDefault] ? view[property.getDefault]() : property.defaultValue;
      }

      var value = style[symbol];
      view[property.setNative](value);
    }
  }
}

exports.applyAllNativeSetters = applyAllNativeSetters;

function resetNativeView(view) {
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_4 = symbols; _i < symbols_4.length; _i++) {
    var symbol = symbols_4[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      if (property.defaultValueKey in view) {
        view[property.setNative](view[property.defaultValueKey]);
        delete view[property.defaultValueKey];
      } else {
        view[property.setNative](property.defaultValue);
      }
    }
  }

  var style = view.style;
  symbols = Object.getOwnPropertySymbols(style);

  for (var _a = 0, symbols_5 = symbols; _a < symbols_5.length; _a++) {
    var symbol = symbols_5[_a];
    var property = cssSymbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      if (property.defaultValueKey in style) {
        view[property.setNative](style[property.defaultValueKey]);
        delete style[property.defaultValueKey];
      } else {
        view[property.setNative](property.defaultValue);
      }
    }
  }
}

exports.resetNativeView = resetNativeView;

function clearInheritedProperties(view) {
  for (var _i = 0, inheritableProperties_2 = inheritableProperties; _i < inheritableProperties_2.length; _i++) {
    var prop = inheritableProperties_2[_i];
    var sourceKey = prop.sourceKey;

    if (view[sourceKey] === 1) {
      prop.set.call(view, exports.unsetValue);
    }
  }

  var style = view.style;

  for (var _a = 0, inheritableCssProperties_2 = inheritableCssProperties; _a < inheritableCssProperties_2.length; _a++) {
    var prop = inheritableCssProperties_2[_a];
    var sourceKey = prop.sourceKey;

    if (style[sourceKey] === 1) {
      prop.setInheritedValue.call(style, exports.unsetValue);
    }
  }
}

exports.clearInheritedProperties = clearInheritedProperties;

function resetCSSProperties(style) {
  var symbols = Object.getOwnPropertySymbols(style);

  for (var _i = 0, symbols_6 = symbols; _i < symbols_6.length; _i++) {
    var symbol = symbols_6[_i];
    var cssProperty = void 0;

    if (cssProperty = cssSymbolPropertyMap[symbol]) {
      style[cssProperty.cssName] = exports.unsetValue;

      if (cssProperty instanceof CssAnimationProperty) {
        style[cssProperty.keyframe] = exports.unsetValue;
      }
    }
  }
}

exports.resetCSSProperties = resetCSSProperties;

function propagateInheritableProperties(view, child) {
  var inheritablePropertyValues = inheritablePropertyValuesOn(view);

  for (var _i = 0, inheritablePropertyValues_1 = inheritablePropertyValues; _i < inheritablePropertyValues_1.length; _i++) {
    var pair = inheritablePropertyValues_1[_i];
    var prop = pair.property;
    var sourceKey = prop.sourceKey;
    var currentValueSource = child[sourceKey] || 0;

    if (currentValueSource <= 1) {
      prop.setInheritedValue.call(child, pair.value);
    }
  }
}

exports.propagateInheritableProperties = propagateInheritableProperties;

function propagateInheritableCssProperties(parentStyle, childStyle) {
  var inheritableCssPropertyValues = inheritableCssPropertyValuesOn(parentStyle);

  for (var _i = 0, inheritableCssPropertyValues_1 = inheritableCssPropertyValues; _i < inheritableCssPropertyValues_1.length; _i++) {
    var pair = inheritableCssPropertyValues_1[_i];
    var prop = pair.property;
    var sourceKey = prop.sourceKey;
    var currentValueSource = childStyle[sourceKey] || 0;

    if (currentValueSource <= 1) {
      prop.setInheritedValue.call(childStyle, pair.value, 1);
    }
  }
}

exports.propagateInheritableCssProperties = propagateInheritableCssProperties;

function makeValidator() {
  var values = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }

  var set = new Set(values);
  return function (value) {
    return set.has(value);
  };
}

exports.makeValidator = makeValidator;

function makeParser(isValid) {
  return function (value) {
    var lower = value && value.toLowerCase();

    if (isValid(lower)) {
      return lower;
    } else {
      throw new Error("Invalid value: " + value);
    }
  };
}

exports.makeParser = makeParser;

function getSetProperties(view) {
  var result = [];
  Object.getOwnPropertyNames(view).forEach(function (prop) {
    result.push([prop, view[prop]]);
  });
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_7 = symbols; _i < symbols_7.length; _i++) {
    var symbol = symbols_7[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    var value = view[property.key];
    result.push([property.name, value]);
  }

  return result;
}

exports.getSetProperties = getSetProperties;

function getComputedCssValues(view) {
  var result = [];
  var style = view.style;

  for (var _i = 0, cssPropertyNames_1 = cssPropertyNames; _i < cssPropertyNames_1.length; _i++) {
    var prop = cssPropertyNames_1[_i];
    result.push([prop, style[prop]]);
  }

  result.push(["top", "auto"]);
  result.push(["left", "auto"]);
  result.push(["bottom", "auto"]);
  result.push(["right", "auto"]);
  return result;
}

exports.getComputedCssValues = getComputedCssValues;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view-base/view-base.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var debug_1 = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

var bindable_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

exports.isIOS = platform_1.isIOS;
exports.isAndroid = platform_1.isAndroid;

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

exports.layout = utils_1.layout;

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

exports.Color = color_1.Color;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js"));

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js"));

var ssm = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");

var domNodeModule;

function ensuredomNodeModule() {
  if (!domNodeModule) {
    domNodeModule = __webpack_require__("../node_modules/tns-core-modules/debugger/dom-node.js");
  }
}

var styleScopeModule;

function ensureStyleScopeModule() {
  if (!styleScopeModule) {
    styleScopeModule = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");
  }
}

var defaultBindingSource = {};

function getAncestor(view, criterion) {
  var matcher = null;

  if (typeof criterion === "string") {
    matcher = function (view) {
      return view.typeName === criterion;
    };
  } else {
    matcher = function (view) {
      return view instanceof criterion;
    };
  }

  for (var parent_1 = view.parent; parent_1 != null; parent_1 = parent_1.parent) {
    if (matcher(parent_1)) {
      return parent_1;
    }
  }

  return null;
}

exports.getAncestor = getAncestor;

function getViewById(view, id) {
  if (!view) {
    return undefined;
  }

  if (view.id === id) {
    return view;
  }

  var retVal;

  var descendantsCallback = function (child) {
    if (child.id === id) {
      retVal = child;
      return false;
    }

    return true;
  };

  eachDescendant(view, descendantsCallback);
  return retVal;
}

exports.getViewById = getViewById;

function eachDescendant(view, callback) {
  if (!callback || !view) {
    return;
  }

  var continueIteration;

  var localCallback = function (child) {
    continueIteration = callback(child);

    if (continueIteration) {
      child.eachChild(localCallback);
    }

    return continueIteration;
  };

  view.eachChild(localCallback);
}

exports.eachDescendant = eachDescendant;
var viewIdCounter = 1;
var Flags;

(function (Flags) {
  Flags["superOnLoadedCalled"] = "Loaded";
  Flags["superOnUnloadedCalled"] = "Unloaded";
})(Flags || (Flags = {}));

var SuspendType;

(function (SuspendType) {
  SuspendType[SuspendType["Incremental"] = 0] = "Incremental";
  SuspendType[SuspendType["Loaded"] = 1048576] = "Loaded";
  SuspendType[SuspendType["NativeView"] = 2097152] = "NativeView";
  SuspendType[SuspendType["UISetup"] = 4194304] = "UISetup";
  SuspendType[SuspendType["IncrementalCountMask"] = -7340033] = "IncrementalCountMask";
})(SuspendType || (SuspendType = {}));

(function (SuspendType) {
  function toString(type) {
    return (type ? "suspended" : "resumed") + "(" + "Incremental: " + (type & SuspendType.IncrementalCountMask) + ", " + "Loaded: " + !(type & SuspendType.Loaded) + ", " + "NativeView: " + !(type & SuspendType.NativeView) + ", " + "UISetup: " + !(type & SuspendType.UISetup) + ")";
  }

  SuspendType.toString = toString;
})(SuspendType || (SuspendType = {}));

var ViewBase = function (_super) {
  __extends(ViewBase, _super);

  function ViewBase() {
    var _this = _super.call(this) || this;

    _this._onLoadedCalled = false;
    _this._onUnloadedCalled = false;
    _this._cssState = new ssm.CssState(_this);
    _this.pseudoClassAliases = {
      "highlighted": ["active", "pressed"]
    };
    _this.cssClasses = new Set();
    _this.cssPseudoClasses = new Set();
    _this._domId = viewIdCounter++;
    _this._style = new properties_1.Style(_this);
    return _this;
  }

  Object.defineProperty(ViewBase.prototype, "parentNode", {
    get: function () {
      return this._templateParent || this.parent;
    },
    set: function (node) {
      this._templateParent = node;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "nativeView", {
    get: function () {
      return this.nativeViewProtected;
    },
    set: function (value) {
      this.setNativeView(value);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "typeName", {
    get: function () {
      return types.getClass(this);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "style", {
    get: function () {
      return this._style;
    },
    set: function (inlineStyle) {
      if (typeof inlineStyle === "string") {
        this.setInlineStyle(inlineStyle);
      } else {
        throw new Error("View.style property is read-only.");
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "android", {
    get: function () {
      return this._androidView;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "ios", {
    get: function () {
      return this._iosView;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "isLoaded", {
    get: function () {
      return this._isLoaded;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "class", {
    get: function () {
      return this.className;
    },
    set: function (v) {
      this.className = v;
    },
    enumerable: true,
    configurable: true
  });

  ViewBase.prototype.getViewById = function (id) {
    return getViewById(this, id);
  };

  Object.defineProperty(ViewBase.prototype, "page", {
    get: function () {
      if (this.parent) {
        return this.parent.page;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });

  ViewBase.prototype.ensureDomNode = function () {
    if (!this.domNode) {
      ensuredomNodeModule();
      this.domNode = new domNodeModule.DOMNode(this);
    }
  };

  ViewBase.prototype.set = function (name, value) {
    this[name] = bindable_1.WrappedValue.unwrap(value);
  };

  ViewBase.prototype.onLoaded = function () {
    var _this = this;

    this.setFlag(Flags.superOnLoadedCalled, true);

    if (this._isLoaded) {
      return;
    }

    this._isLoaded = true;

    this._cssState.onLoaded();

    this._resumeNativeUpdates(SuspendType.Loaded);

    this.eachChild(function (child) {
      _this.loadView(child);

      return true;
    });

    this._emit("loaded");
  };

  ViewBase.prototype.onUnloaded = function () {
    var _this = this;

    this.setFlag(Flags.superOnUnloadedCalled, true);

    if (!this._isLoaded) {
      return;
    }

    this._suspendNativeUpdates(SuspendType.Loaded);

    this.eachChild(function (child) {
      _this.unloadView(child);

      return true;
    });
    this._isLoaded = false;

    this._cssState.onUnloaded();

    this._emit("unloaded");
  };

  ViewBase.prototype._suspendNativeUpdates = function (type) {
    if (type) {
      this._suspendNativeUpdatesCount = this._suspendNativeUpdatesCount | type;
    } else {
      this._suspendNativeUpdatesCount++;
    }
  };

  ViewBase.prototype._resumeNativeUpdates = function (type) {
    if (type) {
      this._suspendNativeUpdatesCount = this._suspendNativeUpdatesCount & ~type;
    } else {
      if ((this._suspendNativeUpdatesCount & SuspendType.IncrementalCountMask) === 0) {
        throw new Error("Invalid call to " + this + "._resumeNativeUpdates");
      }

      this._suspendNativeUpdatesCount--;
    }

    if (!this._suspendNativeUpdatesCount) {
      this.onResumeNativeUpdates();
    }
  };

  ViewBase.prototype._batchUpdate = function (callback) {
    try {
      this._suspendNativeUpdates(SuspendType.Incremental);

      return callback();
    } finally {
      this._resumeNativeUpdates(SuspendType.Incremental);
    }
  };

  ViewBase.prototype.setFlag = function (flag, value) {
    switch (flag) {
      case Flags.superOnLoadedCalled:
        this._onLoadedCalled = value;
        break;

      case Flags.superOnUnloadedCalled:
        this._onUnloadedCalled = value;
        break;
    }
  };

  ViewBase.prototype.isFlagSet = function (flag) {
    switch (flag) {
      case Flags.superOnLoadedCalled:
        return this._onLoadedCalled;

      case Flags.superOnUnloadedCalled:
        return this._onUnloadedCalled;
    }
  };

  ViewBase.prototype.callFunctionWithSuper = function (flag, func) {
    this.setFlag(flag, false);
    func();

    if (!this.isFlagSet(flag)) {
      throw new Error("super." + flag + " not called in " + this);
    }
  };

  ViewBase.prototype.callLoaded = function () {
    var _this = this;

    this.callFunctionWithSuper(Flags.superOnLoadedCalled, function () {
      return _this.onLoaded();
    });
  };

  ViewBase.prototype.callUnloaded = function () {
    var _this = this;

    this.callFunctionWithSuper(Flags.superOnUnloadedCalled, function () {
      return _this.onUnloaded();
    });
  };

  ViewBase.prototype.notifyPseudoClassChanged = function (pseudoClass) {
    this.notify({
      eventName: ":" + pseudoClass,
      object: this
    });
  };

  ViewBase.prototype.getAllAliasedStates = function (name) {
    var allStates = [];
    allStates.push(name);

    if (name in this.pseudoClassAliases) {
      for (var i = 0; i < this.pseudoClassAliases[name].length; i++) {
        allStates.push(this.pseudoClassAliases[name][i]);
      }
    }

    return allStates;
  };

  ViewBase.prototype.addPseudoClass = function (name) {
    var allStates = this.getAllAliasedStates(name);

    for (var i = 0; i < allStates.length; i++) {
      if (!this.cssPseudoClasses.has(allStates[i])) {
        this.cssPseudoClasses.add(allStates[i]);
        this.notifyPseudoClassChanged(allStates[i]);
      }
    }
  };

  ViewBase.prototype.deletePseudoClass = function (name) {
    var allStates = this.getAllAliasedStates(name);

    for (var i = 0; i < allStates.length; i++) {
      if (this.cssPseudoClasses.has(allStates[i])) {
        this.cssPseudoClasses.delete(allStates[i]);
        this.notifyPseudoClassChanged(allStates[i]);
      }
    }
  };

  ViewBase.prototype.bindingContextChanged = function (data) {
    this.bindings.get("bindingContext").bind(data.value);
  };

  ViewBase.prototype.bind = function (options, source) {
    if (source === void 0) {
      source = defaultBindingSource;
    }

    var targetProperty = options.targetProperty;
    this.unbind(targetProperty);

    if (!this.bindings) {
      this.bindings = new Map();
    }

    var binding = new bindable_1.Binding(this, options);
    this.bindings.set(targetProperty, binding);
    var bindingSource = source;

    if (bindingSource === defaultBindingSource) {
      bindingSource = this.bindingContext;
      binding.sourceIsBindingContext = true;

      if (targetProperty === "bindingContext") {
        this.bindingContextBoundToParentBindingContextChanged = true;
        var parent_2 = this.parent;

        if (parent_2) {
          parent_2.on("bindingContextChange", this.bindingContextChanged, this);
        } else {
          this.shouldAddHandlerToParentBindingContextChanged = true;
        }
      }
    }

    binding.bind(bindingSource);
  };

  ViewBase.prototype.unbind = function (property) {
    var bindings = this.bindings;

    if (!bindings) {
      return;
    }

    var binding = bindings.get(property);

    if (binding) {
      binding.unbind();
      bindings.delete(property);

      if (binding.sourceIsBindingContext) {
        if (property === "bindingContext") {
          this.shouldAddHandlerToParentBindingContextChanged = false;
          this.bindingContextBoundToParentBindingContextChanged = false;
          var parent_3 = this.parent;

          if (parent_3) {
            parent_3.off("bindingContextChange", this.bindingContextChanged, this);
          }
        }
      }
    }
  };

  ViewBase.prototype.requestLayout = function () {
    var parent = this.parent;

    if (parent) {
      parent.requestLayout();
    }
  };

  ViewBase.prototype.eachChild = function (callback) {};

  ViewBase.prototype._addView = function (view, atIndex) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + "._addView(" + view + ", " + atIndex + ")", bindable_1.traceCategories.ViewHierarchy);
    }

    if (!view) {
      throw new Error("Expecting a valid View instance.");
    }

    if (!(view instanceof ViewBase)) {
      throw new Error(view + " is not a valid View instance.");
    }

    if (view.parent) {
      throw new Error("View already has a parent. View: " + view + " Parent: " + view.parent);
    }

    view.parent = this;

    this._addViewCore(view, atIndex);

    view._parentChanged(null);

    if (this.domNode) {
      this.domNode.onChildAdded(view);
    }
  };

  ViewBase.prototype._addViewCore = function (view, atIndex) {
    properties_1.propagateInheritableProperties(this, view);

    view._inheritStyleScope(this._styleScope);

    properties_1.propagateInheritableCssProperties(this.style, view.style);

    if (this._context) {
      view._setupUI(this._context, atIndex);
    }

    if (this._isLoaded) {
      this.loadView(view);
    }
  };

  ViewBase.prototype.loadView = function (view) {
    if (view && !view.isLoaded) {
      view.callLoaded();
    }
  };

  ViewBase.prototype.unloadView = function (view) {
    if (view && view.isLoaded) {
      view.callUnloaded();
    }
  };

  ViewBase.prototype._removeView = function (view) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + "._removeView(" + view + ")", bindable_1.traceCategories.ViewHierarchy);
    }

    if (view.parent !== this) {
      throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view.parent + " ExpectedParent: " + this);
    }

    if (this.domNode) {
      this.domNode.onChildRemoved(view);
    }

    this._removeViewCore(view);

    view.parent = undefined;

    view._parentChanged(this);
  };

  ViewBase.prototype._removeViewCore = function (view) {
    this.unloadView(view);

    if (view._context) {
      view._tearDownUI();
    }
  };

  ViewBase.prototype.createNativeView = function () {
    return undefined;
  };

  ViewBase.prototype.disposeNativeView = function () {};

  ViewBase.prototype.initNativeView = function () {};

  ViewBase.prototype.resetNativeView = function () {};

  ViewBase.prototype.resetNativeViewInternal = function () {};

  ViewBase.prototype._setupAsRootView = function (context) {
    this._setupUI(context);
  };

  ViewBase.prototype._setupUI = function (context, atIndex, parentIsLoaded) {
    if (this._context === context) {
      return;
    } else if (this._context) {
      this._tearDownUI(true);
    }

    this._context = context;
    var nativeView = this.nativeViewProtected;

    if (!nativeView) {
      nativeView = this.createNativeView();
    }

    if (platform_1.isAndroid) {
      this._androidView = nativeView;

      if (nativeView) {
        if (this._isPaddingRelative === undefined) {
          this._isPaddingRelative = nativeView.isPaddingRelative();
        }

        var result = nativeView.defaultPaddings;

        if (result === undefined) {
          result = org.nativescript.widgets.ViewHelper.getPadding(nativeView);
          nativeView.defaultPaddings = result;
        }

        this._defaultPaddingTop = result.top;
        this._defaultPaddingRight = result.right;
        this._defaultPaddingBottom = result.bottom;
        this._defaultPaddingLeft = result.left;
        var style = this.style;

        if (!style_properties_1.paddingTopProperty.isSet(style)) {
          this.effectivePaddingTop = this._defaultPaddingTop;
        }

        if (!style_properties_1.paddingRightProperty.isSet(style)) {
          this.effectivePaddingRight = this._defaultPaddingRight;
        }

        if (!style_properties_1.paddingBottomProperty.isSet(style)) {
          this.effectivePaddingBottom = this._defaultPaddingBottom;
        }

        if (!style_properties_1.paddingLeftProperty.isSet(style)) {
          this.effectivePaddingLeft = this._defaultPaddingLeft;
        }
      }
    } else {
      this._iosView = nativeView;
    }

    this.setNativeView(nativeView);

    if (this.parent) {
      var nativeIndex = this.parent._childIndexToNativeChildIndex(atIndex);

      this._isAddedToNativeVisualTree = this.parent._addViewToNativeVisualTree(this, nativeIndex);
    }

    this._resumeNativeUpdates(SuspendType.UISetup);

    this.eachChild(function (child) {
      child._setupUI(context);

      return true;
    });
  };

  ViewBase.prototype.setNativeView = function (value) {
    if (this.__nativeView === value) {
      return;
    }

    if (this.__nativeView) {
      this._suspendNativeUpdates(SuspendType.NativeView);
    }

    this.__nativeView = this.nativeViewProtected = value;

    if (this.__nativeView) {
      this._suspendedUpdates = undefined;
      this.initNativeView();

      this._resumeNativeUpdates(SuspendType.NativeView);
    }
  };

  ViewBase.prototype._tearDownUI = function (force) {
    if (!this._context) {
      return;
    }

    this.resetNativeViewInternal();
    this.eachChild(function (child) {
      child._tearDownUI(force);

      return true;
    });

    if (this.parent) {
      this.parent._removeViewFromNativeVisualTree(this);
    }

    this.disposeNativeView();

    this._suspendNativeUpdates(SuspendType.UISetup);

    if (platform_1.isAndroid) {
      this.setNativeView(null);
      this._androidView = null;
    }

    this._context = null;

    if (this.domNode) {
      this.domNode.dispose();
      this.domNode = undefined;
    }
  };

  ViewBase.prototype._childIndexToNativeChildIndex = function (index) {
    return index;
  };

  ViewBase.prototype._addViewToNativeVisualTree = function (view, atIndex) {
    if (view._isAddedToNativeVisualTree) {
      throw new Error("Child already added to the native visual tree.");
    }

    return true;
  };

  ViewBase.prototype._removeViewFromNativeVisualTree = function (view) {
    view._isAddedToNativeVisualTree = false;
  };

  ViewBase.prototype._goToVisualState = function (state) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + " going to state: " + state, bindable_1.traceCategories.Style);
    }

    if (state === this._visualState) {
      return;
    }

    this.deletePseudoClass(this._visualState);
    this._visualState = state;
    this.addPseudoClass(state);
  };

  ViewBase.prototype._applyXmlAttribute = function (attribute, value) {
    if (attribute === "style" || attribute === "rows" || attribute === "columns" || attribute === "fontAttributes") {
      this[attribute] = value;
      return true;
    }

    return false;
  };

  ViewBase.prototype.setInlineStyle = function (style) {
    if (typeof style !== "string") {
      throw new Error("Parameter should be valid CSS string!");
    }

    ensureStyleScopeModule();
    styleScopeModule.applyInlineStyle(this, style);
  };

  ViewBase.prototype._parentChanged = function (oldParent) {
    var newParent = this.parent;

    if (oldParent) {
      properties_1.clearInheritedProperties(this);

      if (this.bindingContextBoundToParentBindingContextChanged) {
        oldParent.off("bindingContextChange", this.bindingContextChanged, this);
      }
    } else if (this.shouldAddHandlerToParentBindingContextChanged) {
      newParent.on("bindingContextChange", this.bindingContextChanged, this);
      this.bindings.get("bindingContext").bind(newParent.bindingContext);
    }
  };

  ViewBase.prototype.onResumeNativeUpdates = function () {
    properties_1.initNativeView(this);
  };

  ViewBase.prototype.toString = function () {
    var str = this.typeName;

    if (this.id) {
      str += "<" + this.id + ">";
    } else {
      str += "(" + this._domId + ")";
    }

    var source = debug_1.Source.get(this);

    if (source) {
      str += "@" + source + ";";
    }

    return str;
  };

  ViewBase.prototype._onCssStateChange = function () {
    this._cssState.onChange();

    eachDescendant(this, function (child) {
      child._cssState.onChange();

      return true;
    });
  };

  ViewBase.prototype._inheritStyleScope = function (styleScope) {
    if (this._isStyleScopeHost) {
      return;
    }

    if (this._styleScope !== styleScope) {
      this._styleScope = styleScope;

      this._onCssStateChange();

      this.eachChild(function (child) {
        child._inheritStyleScope(styleScope);

        return true;
      });
    }
  };

  ViewBase.prototype.showModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var parent = this.parent;
    return parent && parent.showModal.apply(parent, args);
  };

  ViewBase.prototype.closeModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var parent = this.parent;

    if (parent) {
      parent.closeModal.apply(parent, args);
    }
  };

  ViewBase.prototype._dialogClosed = function () {
    eachDescendant(this, function (child) {
      child._dialogClosed();

      return true;
    });
  };

  ViewBase.prototype._onRootViewReset = function () {
    eachDescendant(this, function (child) {
      child._onRootViewReset();

      return true;
    });
  };

  ViewBase.loadedEvent = "loaded";
  ViewBase.unloadedEvent = "unloaded";

  __decorate([profiling_1.profile], ViewBase.prototype, "onLoaded", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "onUnloaded", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "addPseudoClass", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "deletePseudoClass", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "requestLayout", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_addView", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_setupUI", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_tearDownUI", null);

  return ViewBase;
}(bindable_1.Observable);

exports.ViewBase = ViewBase;
ViewBase.prototype.isCollapsed = false;
ViewBase.prototype._oldLeft = 0;
ViewBase.prototype._oldTop = 0;
ViewBase.prototype._oldRight = 0;
ViewBase.prototype._oldBottom = 0;
ViewBase.prototype.effectiveMinWidth = 0;
ViewBase.prototype.effectiveMinHeight = 0;
ViewBase.prototype.effectiveWidth = 0;
ViewBase.prototype.effectiveHeight = 0;
ViewBase.prototype.effectiveMarginTop = 0;
ViewBase.prototype.effectiveMarginRight = 0;
ViewBase.prototype.effectiveMarginBottom = 0;
ViewBase.prototype.effectiveMarginLeft = 0;
ViewBase.prototype.effectivePaddingTop = 0;
ViewBase.prototype.effectivePaddingRight = 0;
ViewBase.prototype.effectivePaddingBottom = 0;
ViewBase.prototype.effectivePaddingLeft = 0;
ViewBase.prototype.effectiveBorderTopWidth = 0;
ViewBase.prototype.effectiveBorderRightWidth = 0;
ViewBase.prototype.effectiveBorderBottomWidth = 0;
ViewBase.prototype.effectiveBorderLeftWidth = 0;
ViewBase.prototype._defaultPaddingTop = 0;
ViewBase.prototype._defaultPaddingRight = 0;
ViewBase.prototype._defaultPaddingBottom = 0;
ViewBase.prototype._defaultPaddingLeft = 0;
ViewBase.prototype._isViewBase = true;
ViewBase.prototype.recycleNativeView = "never";
ViewBase.prototype._suspendNativeUpdatesCount = SuspendType.Loaded | SuspendType.NativeView | SuspendType.UISetup;
exports.bindingContextProperty = new properties_1.InheritedProperty({
  name: "bindingContext"
});
exports.bindingContextProperty.register(ViewBase);
exports.classNameProperty = new properties_1.Property({
  name: "className",
  valueChanged: function (view, oldValue, newValue) {
    var classes = view.cssClasses;
    classes.clear();

    if (typeof newValue === "string") {
      newValue.split(" ").forEach(function (c) {
        return classes.add(c);
      });
    }

    view._onCssStateChange();
  }
});
exports.classNameProperty.register(ViewBase);
exports.idProperty = new properties_1.Property({
  name: "id",
  valueChanged: function (view, oldValue, newValue) {
    return view._onCssStateChange();
  }
});
exports.idProperty.register(ViewBase);

function booleanConverter(v) {
  var lowercase = (v + "").toLowerCase();

  if (lowercase === "true") {
    return true;
  } else if (lowercase === "false") {
    return false;
  }

  throw new Error("Invalid boolean: " + v);
}

exports.booleanConverter = booleanConverter;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view/view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var gestures_1 = __webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var style_scope_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

exports.LinearGradient = linear_gradient_1.LinearGradient;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js"));

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js"));

var animationModule;

function ensureAnimationModule() {
  if (!animationModule) {
    animationModule = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");
  }
}

function CSSType(type) {
  return function (cls) {
    cls.prototype.cssType = type;
  };
}

exports.CSSType = CSSType;

function PseudoClassHandler() {
  var pseudoClasses = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    pseudoClasses[_i] = arguments[_i];
  }

  var stateEventNames = pseudoClasses.map(function (s) {
    return ":" + s;
  });
  var listeners = Symbol("listeners");
  return function (target, propertyKey, descriptor) {
    function update(change) {
      var prev = this[listeners] || 0;
      var next = prev + change;

      if (prev <= 0 && next > 0) {
        this[propertyKey](true);
      } else if (prev > 0 && next <= 0) {
        this[propertyKey](false);
      }
    }

    stateEventNames.forEach(function (s) {
      return target[s] = update;
    });
  };
}

exports.PseudoClassHandler = PseudoClassHandler;
exports._rootModalViews = new Array();

var ViewCommon = function (_super) {
  __extends(ViewCommon, _super);

  function ViewCommon() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._gestureObservers = {};
    return _this;
  }

  Object.defineProperty(ViewCommon.prototype, "css", {
    get: function () {
      var scope = this._styleScope;
      return scope && scope.css;
    },
    set: function (value) {
      this._updateStyleScope(undefined, undefined, value);
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype.addCss = function (cssString) {
    this._updateStyleScope(undefined, cssString);
  };

  ViewCommon.prototype.addCssFile = function (cssFileName) {
    this._updateStyleScope(cssFileName);
  };

  ViewCommon.prototype._updateStyleScope = function (cssFileName, cssString, css) {
    var scope = this._styleScope;

    if (!scope) {
      scope = new style_scope_1.StyleScope();
      this.setScopeProperty(scope, cssFileName, cssString, css);

      this._inheritStyleScope(scope);

      this._isStyleScopeHost = true;
    } else {
      this.setScopeProperty(scope, cssFileName, cssString, css);

      this._onCssStateChange();
    }
  };

  ViewCommon.prototype.setScopeProperty = function (scope, cssFileName, cssString, css) {
    if (cssFileName !== undefined) {
      scope.addCssFile(cssFileName);
    } else if (cssString !== undefined) {
      scope.addCss(cssString);
    } else if (css !== undefined) {
      scope.css = css;
    }
  };

  ViewCommon.prototype._setupAsRootView = function (context) {
    _super.prototype._setupAsRootView.call(this, context);

    if (!this._styleScope) {
      this._updateStyleScope();
    }
  };

  ViewCommon.prototype.observe = function (type, callback, thisArg) {
    if (!this._gestureObservers[type]) {
      this._gestureObservers[type] = [];
    }

    this._gestureObservers[type].push(gestures_1.observe(this, type, callback, thisArg));
  };

  ViewCommon.prototype.getGestureObservers = function (type) {
    return this._gestureObservers[type];
  };

  ViewCommon.prototype.addEventListener = function (arg, callback, thisArg) {
    if (typeof arg === "string") {
      arg = view_base_1.getEventOrGestureName(arg);
      var gesture = gestures_1.fromString(arg);

      if (gesture && !this._isEvent(arg)) {
        this.observe(gesture, callback, thisArg);
      } else {
        var events = arg.split(",");

        if (events.length > 0) {
          for (var i = 0; i < events.length; i++) {
            var evt = events[i].trim();
            var gst = gestures_1.fromString(evt);

            if (gst && !this._isEvent(arg)) {
              this.observe(gst, callback, thisArg);
            } else {
              _super.prototype.addEventListener.call(this, evt, callback, thisArg);
            }
          }
        } else {
          _super.prototype.addEventListener.call(this, arg, callback, thisArg);
        }
      }
    } else if (typeof arg === "number") {
      this.observe(arg, callback, thisArg);
    }
  };

  ViewCommon.prototype.removeEventListener = function (arg, callback, thisArg) {
    if (typeof arg === "string") {
      var gesture = gestures_1.fromString(arg);

      if (gesture && !this._isEvent(arg)) {
        this._disconnectGestureObservers(gesture);
      } else {
        var events = arg.split(",");

        if (events.length > 0) {
          for (var i = 0; i < events.length; i++) {
            var evt = events[i].trim();
            var gst = gestures_1.fromString(evt);

            if (gst && !this._isEvent(arg)) {
              this._disconnectGestureObservers(gst);
            } else {
              _super.prototype.removeEventListener.call(this, evt, callback, thisArg);
            }
          }
        } else {
          _super.prototype.removeEventListener.call(this, arg, callback, thisArg);
        }
      }
    } else if (typeof arg === "number") {
      this._disconnectGestureObservers(arg);
    }
  };

  ViewCommon.prototype._onLivesync = function () {
    exports._rootModalViews.forEach(function (v) {
      return v.closeModal();
    });

    exports._rootModalViews.length = 0;
    return false;
  };

  ViewCommon.prototype.onBackPressed = function () {
    return false;
  };

  ViewCommon.prototype._getFragmentManager = function () {
    return undefined;
  };

  ViewCommon.prototype.getModalOptions = function (args) {
    if (args.length === 0) {
      throw new Error("showModal without parameters is deprecated. Please call showModal on a view instance instead.");
    } else {
      var options = null;

      if (args.length === 2) {
        options = args[1];
      } else {
        options = {
          context: args[1],
          closeCallback: args[2],
          fullscreen: args[3],
          animated: args[4],
          stretched: args[5]
        };
      }

      var firstArgument = args[0];
      var view = firstArgument instanceof ViewCommon ? firstArgument : builder_1.createViewFromEntry({
        moduleName: firstArgument
      });
      return {
        view: view,
        options: options
      };
    }
  };

  ViewCommon.prototype.showModal = function () {
    var _a = this.getModalOptions(arguments),
        view = _a.view,
        options = _a.options;

    view._showNativeModalView(this, options);

    return view;
  };

  ViewCommon.prototype.closeModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var closeCallback = this._closeModalCallback;

    if (closeCallback) {
      closeCallback.apply(undefined, arguments);
    } else {
      var parent_1 = this.parent;

      if (parent_1) {
        parent_1.closeModal.apply(parent_1, args);
      }
    }
  };

  Object.defineProperty(ViewCommon.prototype, "modal", {
    get: function () {
      return this._modal;
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype._showNativeModalView = function (parent, options) {
    exports._rootModalViews.push(this);

    parent._modal = this;
    this._modalParent = parent;
    this._modalContext = options.context;
    var that = this;

    this._closeModalCallback = function () {
      var originalArgs = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        originalArgs[_i] = arguments[_i];
      }

      if (that._closeModalCallback) {
        var modalIndex = exports._rootModalViews.indexOf(that);

        exports._rootModalViews.splice(modalIndex);

        that._modalParent = null;
        that._modalContext = null;
        that._closeModalCallback = null;

        that._dialogClosed();

        parent._modal = null;

        var whenClosedCallback = function () {
          if (typeof options.closeCallback === "function") {
            options.closeCallback.apply(undefined, originalArgs);
          }
        };

        that._hideNativeModalView(parent, whenClosedCallback);
      }
    };
  };

  ViewCommon.prototype._raiseLayoutChangedEvent = function () {
    var args = {
      eventName: ViewCommon.layoutChangedEvent,
      object: this
    };
    this.notify(args);
  };

  ViewCommon.prototype._raiseShownModallyEvent = function () {
    var args = {
      eventName: ViewCommon.shownModallyEvent,
      object: this,
      context: this._modalContext,
      closeCallback: this._closeModalCallback
    };
    this.notify(args);
  };

  ViewCommon.prototype._raiseShowingModallyEvent = function () {
    var args = {
      eventName: ViewCommon.showingModallyEvent,
      object: this,
      context: this._modalContext,
      closeCallback: this._closeModalCallback
    };
    this.notify(args);
  };

  ViewCommon.prototype._isEvent = function (name) {
    return this.constructor && name + "Event" in this.constructor;
  };

  ViewCommon.prototype._disconnectGestureObservers = function (type) {
    var observers = this.getGestureObservers(type);

    if (observers) {
      for (var i = 0; i < observers.length; i++) {
        observers[i].disconnect();
      }
    }
  };

  Object.defineProperty(ViewCommon.prototype, "borderColor", {
    get: function () {
      return this.style.borderColor;
    },
    set: function (value) {
      this.style.borderColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopColor", {
    get: function () {
      return this.style.borderTopColor;
    },
    set: function (value) {
      this.style.borderTopColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRightColor", {
    get: function () {
      return this.style.borderRightColor;
    },
    set: function (value) {
      this.style.borderRightColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomColor", {
    get: function () {
      return this.style.borderBottomColor;
    },
    set: function (value) {
      this.style.borderBottomColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderLeftColor", {
    get: function () {
      return this.style.borderLeftColor;
    },
    set: function (value) {
      this.style.borderLeftColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderWidth", {
    get: function () {
      return this.style.borderWidth;
    },
    set: function (value) {
      this.style.borderWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopWidth", {
    get: function () {
      return this.style.borderTopWidth;
    },
    set: function (value) {
      this.style.borderTopWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRightWidth", {
    get: function () {
      return this.style.borderRightWidth;
    },
    set: function (value) {
      this.style.borderRightWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomWidth", {
    get: function () {
      return this.style.borderBottomWidth;
    },
    set: function (value) {
      this.style.borderBottomWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderLeftWidth", {
    get: function () {
      return this.style.borderLeftWidth;
    },
    set: function (value) {
      this.style.borderLeftWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRadius", {
    get: function () {
      return this.style.borderRadius;
    },
    set: function (value) {
      this.style.borderRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopLeftRadius", {
    get: function () {
      return this.style.borderTopLeftRadius;
    },
    set: function (value) {
      this.style.borderTopLeftRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopRightRadius", {
    get: function () {
      return this.style.borderTopRightRadius;
    },
    set: function (value) {
      this.style.borderTopRightRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomRightRadius", {
    get: function () {
      return this.style.borderBottomRightRadius;
    },
    set: function (value) {
      this.style.borderBottomRightRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomLeftRadius", {
    get: function () {
      return this.style.borderBottomLeftRadius;
    },
    set: function (value) {
      this.style.borderBottomLeftRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "color", {
    get: function () {
      return this.style.color;
    },
    set: function (value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "background", {
    get: function () {
      return this.style.background;
    },
    set: function (value) {
      this.style.background = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundColor", {
    get: function () {
      return this.style.backgroundColor;
    },
    set: function (value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundImage", {
    get: function () {
      return this.style.backgroundImage;
    },
    set: function (value) {
      this.style.backgroundImage = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "minWidth", {
    get: function () {
      return this.style.minWidth;
    },
    set: function (value) {
      this.style.minWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "minHeight", {
    get: function () {
      return this.style.minHeight;
    },
    set: function (value) {
      this.style.minHeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "width", {
    get: function () {
      return this.style.width;
    },
    set: function (value) {
      this.style.width = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "height", {
    get: function () {
      return this.style.height;
    },
    set: function (value) {
      this.style.height = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "margin", {
    get: function () {
      return this.style.margin;
    },
    set: function (value) {
      this.style.margin = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginLeft", {
    get: function () {
      return this.style.marginLeft;
    },
    set: function (value) {
      this.style.marginLeft = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginTop", {
    get: function () {
      return this.style.marginTop;
    },
    set: function (value) {
      this.style.marginTop = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginRight", {
    get: function () {
      return this.style.marginRight;
    },
    set: function (value) {
      this.style.marginRight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginBottom", {
    get: function () {
      return this.style.marginBottom;
    },
    set: function (value) {
      this.style.marginBottom = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "horizontalAlignment", {
    get: function () {
      return this.style.horizontalAlignment;
    },
    set: function (value) {
      this.style.horizontalAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "verticalAlignment", {
    get: function () {
      return this.style.verticalAlignment;
    },
    set: function (value) {
      this.style.verticalAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "visibility", {
    get: function () {
      return this.style.visibility;
    },
    set: function (value) {
      this.style.visibility = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "opacity", {
    get: function () {
      return this.style.opacity;
    },
    set: function (value) {
      this.style.opacity = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "rotate", {
    get: function () {
      return this.style.rotate;
    },
    set: function (value) {
      this.style.rotate = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "translateX", {
    get: function () {
      return this.style.translateX;
    },
    set: function (value) {
      this.style.translateX = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "translateY", {
    get: function () {
      return this.style.translateY;
    },
    set: function (value) {
      this.style.translateY = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "scaleX", {
    get: function () {
      return this.style.scaleX;
    },
    set: function (value) {
      this.style.scaleX = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "scaleY", {
    get: function () {
      return this.style.scaleY;
    },
    set: function (value) {
      this.style.scaleY = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "isLayoutValid", {
    get: function () {
      return this._isLayoutValid;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "cssType", {
    get: function () {
      if (!this._cssType) {
        this._cssType = this.typeName.toLowerCase();
      }

      return this._cssType;
    },
    set: function (type) {
      this._cssType = type.toLowerCase();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "isLayoutRequired", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
    this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
  };

  ViewCommon.prototype.layout = function (left, top, right, bottom) {
    this._setCurrentLayoutBounds(left, top, right, bottom);
  };

  ViewCommon.prototype.getMeasuredWidth = function () {
    return this._measuredWidth & view_base_1.layout.MEASURED_SIZE_MASK || 0;
  };

  ViewCommon.prototype.getMeasuredHeight = function () {
    return this._measuredHeight & view_base_1.layout.MEASURED_SIZE_MASK || 0;
  };

  ViewCommon.prototype.getMeasuredState = function () {
    return this._measuredWidth & view_base_1.layout.MEASURED_STATE_MASK | this._measuredHeight >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT & view_base_1.layout.MEASURED_STATE_MASK >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT;
  };

  ViewCommon.prototype.setMeasuredDimension = function (measuredWidth, measuredHeight) {
    this._measuredWidth = measuredWidth;
    this._measuredHeight = measuredHeight;

    if (view_base_1.traceEnabled()) {
      view_base_1.traceWrite(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, view_base_1.traceCategories.Layout);
    }
  };

  ViewCommon.prototype.requestLayout = function () {
    this._isLayoutValid = false;

    _super.prototype.requestLayout.call(this);
  };

  ViewCommon.resolveSizeAndState = function (size, specSize, specMode, childMeasuredState) {
    var result = size;

    switch (specMode) {
      case view_base_1.layout.UNSPECIFIED:
        result = Math.ceil(size);
        break;

      case view_base_1.layout.AT_MOST:
        if (specSize < size) {
          result = Math.ceil(specSize) | view_base_1.layout.MEASURED_STATE_TOO_SMALL;
        }

        break;

      case view_base_1.layout.EXACTLY:
        result = Math.ceil(specSize);
        break;
    }

    return result | childMeasuredState & view_base_1.layout.MEASURED_STATE_MASK;
  };

  ViewCommon.combineMeasuredStates = function (curState, newState) {
    return curState | newState;
  };

  ViewCommon.layoutChild = function (parent, child, left, top, right, bottom, setFrame) {
    if (setFrame === void 0) {
      setFrame = true;
    }

    if (!child || child.isCollapsed) {
      return;
    }

    var childStyle = child.style;
    var childTop;
    var childLeft;
    var childWidth = child.getMeasuredWidth();
    var childHeight = child.getMeasuredHeight();
    var effectiveMarginTop = child.effectiveMarginTop;
    var effectiveMarginBottom = child.effectiveMarginBottom;
    var vAlignment;

    if (child.effectiveHeight >= 0 && childStyle.verticalAlignment === "stretch") {
      vAlignment = "middle";
    } else {
      vAlignment = childStyle.verticalAlignment;
    }

    switch (vAlignment) {
      case "top":
        childTop = top + effectiveMarginTop;
        break;

      case "middle":
        childTop = top + (bottom - top - childHeight + (effectiveMarginTop - effectiveMarginBottom)) / 2;
        break;

      case "bottom":
        childTop = bottom - childHeight - effectiveMarginBottom;
        break;

      case "stretch":
      default:
        childTop = top + effectiveMarginTop;
        childHeight = bottom - top - (effectiveMarginTop + effectiveMarginBottom);
        break;
    }

    var effectiveMarginLeft = child.effectiveMarginLeft;
    var effectiveMarginRight = child.effectiveMarginRight;
    var hAlignment;

    if (child.effectiveWidth >= 0 && childStyle.horizontalAlignment === "stretch") {
      hAlignment = "center";
    } else {
      hAlignment = childStyle.horizontalAlignment;
    }

    switch (hAlignment) {
      case "left":
        childLeft = left + effectiveMarginLeft;
        break;

      case "center":
        childLeft = left + (right - left - childWidth + (effectiveMarginLeft - effectiveMarginRight)) / 2;
        break;

      case "right":
        childLeft = right - childWidth - effectiveMarginRight;
        break;

      case "stretch":
      default:
        childLeft = left + effectiveMarginLeft;
        childWidth = right - left - (effectiveMarginLeft + effectiveMarginRight);
        break;
    }

    var childRight = Math.round(childLeft + childWidth);
    var childBottom = Math.round(childTop + childHeight);
    childLeft = Math.round(childLeft);
    childTop = Math.round(childTop);

    if (view_base_1.traceEnabled()) {
      view_base_1.traceWrite(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, view_base_1.traceCategories.Layout);
    }

    child.layout(childLeft, childTop, childRight, childBottom, setFrame);
  };

  ViewCommon.measureChild = function (parent, child, widthMeasureSpec, heightMeasureSpec) {
    var measureWidth = 0;
    var measureHeight = 0;

    if (child && !child.isCollapsed) {
      var widthSpec = parent ? parent._currentWidthMeasureSpec : widthMeasureSpec;
      var heightSpec = parent ? parent._currentHeightMeasureSpec : heightMeasureSpec;
      var width = view_base_1.layout.getMeasureSpecSize(widthSpec);
      var widthMode = view_base_1.layout.getMeasureSpecMode(widthSpec);
      var height = view_base_1.layout.getMeasureSpecSize(heightSpec);
      var heightMode = view_base_1.layout.getMeasureSpecMode(heightSpec);

      child._updateEffectiveLayoutValues(width, widthMode, height, heightMode);

      var style = child.style;
      var horizontalMargins = child.effectiveMarginLeft + child.effectiveMarginRight;
      var verticalMargins = child.effectiveMarginTop + child.effectiveMarginBottom;
      var childWidthMeasureSpec = ViewCommon.getMeasureSpec(widthMeasureSpec, horizontalMargins, child.effectiveWidth, style.horizontalAlignment === "stretch");
      var childHeightMeasureSpec = ViewCommon.getMeasureSpec(heightMeasureSpec, verticalMargins, child.effectiveHeight, style.verticalAlignment === "stretch");

      if (view_base_1.traceEnabled()) {
        view_base_1.traceWrite(child.parent + " :measureChild: " + child + " " + view_base_1.layout.measureSpecToString(childWidthMeasureSpec) + ", " + view_base_1.layout.measureSpecToString(childHeightMeasureSpec) + "}", view_base_1.traceCategories.Layout);
      }

      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
      measureWidth = Math.round(child.getMeasuredWidth() + horizontalMargins);
      measureHeight = Math.round(child.getMeasuredHeight() + verticalMargins);
    }

    return {
      measuredWidth: measureWidth,
      measuredHeight: measureHeight
    };
  };

  ViewCommon.getMeasureSpec = function (parentSpec, margins, childLength, stretched) {
    var parentLength = view_base_1.layout.getMeasureSpecSize(parentSpec);
    var parentSpecMode = view_base_1.layout.getMeasureSpecMode(parentSpec);
    var resultSize;
    var resultMode;

    if (childLength >= 0) {
      resultSize = parentSpecMode === view_base_1.layout.UNSPECIFIED ? childLength : Math.min(parentLength, childLength);
      resultMode = view_base_1.layout.EXACTLY;
    } else {
      switch (parentSpecMode) {
        case view_base_1.layout.EXACTLY:
          resultSize = Math.max(0, parentLength - margins);
          resultMode = stretched ? view_base_1.layout.EXACTLY : view_base_1.layout.AT_MOST;
          break;

        case view_base_1.layout.AT_MOST:
          resultSize = Math.max(0, parentLength - margins);
          resultMode = view_base_1.layout.AT_MOST;
          break;

        case view_base_1.layout.UNSPECIFIED:
          resultSize = 0;
          resultMode = view_base_1.layout.UNSPECIFIED;
          break;
      }
    }

    return view_base_1.layout.makeMeasureSpec(resultSize, resultMode);
  };

  ViewCommon.prototype._setCurrentMeasureSpecs = function (widthMeasureSpec, heightMeasureSpec) {
    var changed = this._currentWidthMeasureSpec !== widthMeasureSpec || this._currentHeightMeasureSpec !== heightMeasureSpec;
    this._currentWidthMeasureSpec = widthMeasureSpec;
    this._currentHeightMeasureSpec = heightMeasureSpec;
    return changed;
  };

  ViewCommon.prototype._getCurrentLayoutBounds = function () {
    return {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
  };

  ViewCommon.prototype._setCurrentLayoutBounds = function (left, top, right, bottom) {
    this._isLayoutValid = true;
    var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
    var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
    this._oldLeft = left;
    this._oldTop = top;
    this._oldRight = right;
    this._oldBottom = bottom;
    return {
      boundsChanged: boundsChanged,
      sizeChanged: sizeChanged
    };
  };

  ViewCommon.prototype.eachChild = function (callback) {
    this.eachChildView(callback);
  };

  ViewCommon.prototype.eachChildView = function (callback) {};

  ViewCommon.prototype._getNativeViewsCount = function () {
    return this._isAddedToNativeVisualTree ? 1 : 0;
  };

  ViewCommon.prototype._eachLayoutView = function (callback) {
    return callback(this);
  };

  ViewCommon.prototype.focus = function () {
    return undefined;
  };

  ViewCommon.prototype.getSafeAreaInsets = function () {
    return {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
  };

  ViewCommon.prototype.getLocationInWindow = function () {
    return undefined;
  };

  ViewCommon.prototype.getLocationOnScreen = function () {
    return undefined;
  };

  ViewCommon.prototype.getLocationRelativeTo = function (otherView) {
    return undefined;
  };

  ViewCommon.prototype.getActualSize = function () {
    var currentBounds = this._getCurrentLayoutBounds();

    if (!currentBounds) {
      return undefined;
    }

    return {
      width: view_base_1.layout.toDeviceIndependentPixels(currentBounds.right - currentBounds.left),
      height: view_base_1.layout.toDeviceIndependentPixels(currentBounds.bottom - currentBounds.top)
    };
  };

  ViewCommon.prototype.animate = function (animation) {
    return this.createAnimation(animation).play();
  };

  ViewCommon.prototype.createAnimation = function (animation) {
    ensureAnimationModule();

    if (!this._localAnimations) {
      this._localAnimations = new Set();
    }

    animation.target = this;
    var anim = new animationModule.Animation([animation]);

    this._localAnimations.add(anim);

    return anim;
  };

  ViewCommon.prototype._removeAnimation = function (animation) {
    var localAnimations = this._localAnimations;

    if (localAnimations && localAnimations.has(animation)) {
      localAnimations.delete(animation);

      if (animation.isPlaying) {
        animation.cancel();
      }

      return true;
    }

    return false;
  };

  ViewCommon.prototype.resetNativeView = function () {
    var _this = this;

    if (this._localAnimations) {
      this._localAnimations.forEach(function (a) {
        return _this._removeAnimation(a);
      });
    }

    _super.prototype.resetNativeView.call(this);
  };

  ViewCommon.prototype._setNativeViewFrame = function (nativeView, frame) {};

  ViewCommon.prototype._getValue = function () {
    throw new Error("The View._getValue is obsolete. There is a new property system.");
  };

  ViewCommon.prototype._setValue = function () {
    throw new Error("The View._setValue is obsolete. There is a new property system.");
  };

  ViewCommon.prototype._updateEffectiveLayoutValues = function (parentWidthMeasureSize, parentWidthMeasureMode, parentHeightMeasureSize, parentHeightMeasureMode) {
    var style = this.style;
    var availableWidth = parentWidthMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentWidthMeasureSize;
    this.effectiveWidth = style_properties_1.PercentLength.toDevicePixels(style.width, -2, availableWidth);
    this.effectiveMarginLeft = style_properties_1.PercentLength.toDevicePixels(style.marginLeft, 0, availableWidth);
    this.effectiveMarginRight = style_properties_1.PercentLength.toDevicePixels(style.marginRight, 0, availableWidth);
    var availableHeight = parentHeightMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentHeightMeasureSize;
    this.effectiveHeight = style_properties_1.PercentLength.toDevicePixels(style.height, -2, availableHeight);
    this.effectiveMarginTop = style_properties_1.PercentLength.toDevicePixels(style.marginTop, 0, availableHeight);
    this.effectiveMarginBottom = style_properties_1.PercentLength.toDevicePixels(style.marginBottom, 0, availableHeight);
  };

  ViewCommon.prototype._setNativeClipToBounds = function () {};

  ViewCommon.prototype._redrawNativeBackground = function (value) {};

  ViewCommon.prototype._onAttachedToWindow = function () {};

  ViewCommon.prototype._onDetachedFromWindow = function () {};

  ViewCommon.prototype._hasAncestorView = function (ancestorView) {
    var matcher = function (view) {
      return view === ancestorView;
    };

    for (var parent_2 = this.parent; parent_2 != null; parent_2 = parent_2.parent) {
      if (matcher(parent_2)) {
        return true;
      }
    }

    return false;
  };

  ViewCommon.layoutChangedEvent = "layoutChanged";
  ViewCommon.shownModallyEvent = "shownModally";
  ViewCommon.showingModallyEvent = "showingModally";
  return ViewCommon;
}(view_base_1.ViewBase);

exports.ViewCommon = ViewCommon;
exports.automationTextProperty = new view_base_1.Property({
  name: "automationText"
});
exports.automationTextProperty.register(ViewCommon);
exports.originXProperty = new view_base_1.Property({
  name: "originX",
  defaultValue: 0.5,
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.originXProperty.register(ViewCommon);
exports.originYProperty = new view_base_1.Property({
  name: "originY",
  defaultValue: 0.5,
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.originYProperty.register(ViewCommon);
exports.isEnabledProperty = new view_base_1.Property({
  name: "isEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter,
  valueChanged: function (target, oldValue, newValue) {
    target._goToVisualState(newValue ? "normal" : "disabled");
  }
});
exports.isEnabledProperty.register(ViewCommon);
exports.isUserInteractionEnabledProperty = new view_base_1.Property({
  name: "isUserInteractionEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter
});
exports.isUserInteractionEnabledProperty.register(ViewCommon);
exports.iosOverflowSafeAreaProperty = new view_base_1.Property({
  name: "iosOverflowSafeArea",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});
exports.iosOverflowSafeAreaProperty.register(ViewCommon);
exports.iosOverflowSafeAreaEnabledProperty = new view_base_1.InheritedProperty({
  name: "iosOverflowSafeAreaEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter
});
exports.iosOverflowSafeAreaEnabledProperty.register(ViewCommon);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view/view.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var background_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/background.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var frame_stack_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-stack.js");

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js"));

var DOMID = "_domId";
var androidBackPressedEvent = "androidBackPressed";
var modalMap = new Map();
var TouchListener;
var DialogFragment;

function initializeTouchListener() {
  if (TouchListener) {
    return;
  }

  var TouchListenerImpl = function (_super) {
    __extends(TouchListenerImpl, _super);

    function TouchListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    TouchListenerImpl.prototype.onTouch = function (view, event) {
      var owner = this.owner;
      owner.handleGestureTouch(event);
      var nativeView = owner.nativeViewProtected;

      if (!nativeView || !nativeView.onTouchEvent) {
        return false;
      }

      return nativeView.onTouchEvent(event);
    };

    TouchListenerImpl = __decorate([Interfaces([android.view.View.OnTouchListener])], TouchListenerImpl);
    return TouchListenerImpl;
  }(java.lang.Object);

  TouchListener = TouchListenerImpl;
}

function initializeDialogFragment() {
  if (DialogFragment) {
    return;
  }

  var DialogImpl = function (_super) {
    __extends(DialogImpl, _super);

    function DialogImpl(fragment, context, themeResId) {
      var _this = _super.call(this, context, themeResId) || this;

      _this.fragment = fragment;
      return global.__native(_this);
    }

    DialogImpl.prototype.onDetachedFromWindow = function () {
      _super.prototype.onDetachedFromWindow.call(this);

      this.fragment = null;
    };

    ;

    DialogImpl.prototype.onBackPressed = function () {
      var view = this.fragment.owner;
      var args = {
        eventName: "activityBackPressed",
        object: view,
        activity: view._context,
        cancel: false
      };
      application_1.android.notify(args);

      if (args.cancel) {
        return;
      }

      view.notify(args);

      if (!args.cancel && !view.onBackPressed()) {
        _super.prototype.onBackPressed.call(this);
      }
    };

    return DialogImpl;
  }(android.app.Dialog);

  var DialogFragmentImpl = function (_super) {
    __extends(DialogFragmentImpl, _super);

    function DialogFragmentImpl() {
      var _this = _super.call(this) || this;

      return global.__native(_this);
    }

    DialogFragmentImpl.prototype.onCreateDialog = function (savedInstanceState) {
      var ownerId = this.getArguments().getInt(DOMID);
      var options = getModalOptions(ownerId);
      this.owner = options.owner;
      this._fullscreen = options.fullscreen;
      this._cancelable = options.cancelable;
      this._stretched = options.stretched;
      this._dismissCallback = options.dismissCallback;
      this._shownCallback = options.shownCallback;
      this.setStyle(android.support.v4.app.DialogFragment.STYLE_NO_TITLE, 0);
      var theme = this.getTheme();

      if (this._fullscreen) {
        theme = this.getActivity().getApplicationInfo().theme;
      }

      var dialog = new DialogImpl(this, this.getActivity(), theme);

      if (!this._fullscreen && !this._stretched) {
        this.owner.horizontalAlignment = "center";
        this.owner.verticalAlignment = "middle";
      } else {
        this.owner.horizontalAlignment = "stretch";
        this.owner.verticalAlignment = "stretch";
      }

      dialog.setCanceledOnTouchOutside(this._cancelable);
      return dialog;
    };

    DialogFragmentImpl.prototype.onCreateView = function (inflater, container, savedInstanceState) {
      var owner = this.owner;

      owner._setupAsRootView(this.getActivity());

      owner._isAddedToNativeVisualTree = true;
      return owner.nativeViewProtected;
    };

    DialogFragmentImpl.prototype.onStart = function () {
      _super.prototype.onStart.call(this);

      if (this._fullscreen) {
        var window_1 = this.getDialog().getWindow();
        var length_1 = android.view.ViewGroup.LayoutParams.MATCH_PARENT;
        window_1.setLayout(length_1, length_1);
        window_1.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
      }

      var owner = this.owner;

      if (owner && !owner.isLoaded) {
        owner.callLoaded();
      }

      this._shownCallback();
    };

    DialogFragmentImpl.prototype.onDismiss = function (dialog) {
      _super.prototype.onDismiss.call(this, dialog);

      var manager = this.getFragmentManager();

      if (manager) {
        removeModal(this.owner._domId);

        this._dismissCallback();
      }

      var owner = this.owner;

      if (owner && owner.isLoaded) {
        owner.callUnloaded();
      }
    };

    DialogFragmentImpl.prototype.onDestroy = function () {
      _super.prototype.onDestroy.call(this);

      var owner = this.owner;

      if (owner) {
        if (owner.isLoaded) {
          owner.callUnloaded();
        }

        owner._isAddedToNativeVisualTree = false;

        owner._tearDownUI(true);
      }
    };

    return DialogFragmentImpl;
  }(android.support.v4.app.DialogFragment);

  DialogFragment = DialogFragmentImpl;
}

function saveModal(options) {
  modalMap.set(options.owner._domId, options);
}

function removeModal(domId) {
  modalMap.delete(domId);
}

function getModalOptions(domId) {
  return modalMap.get(domId);
}

var View = function (_super) {
  __extends(View, _super);

  function View() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  View.prototype.observe = function (type, callback, thisArg) {
    _super.prototype.observe.call(this, type, callback, thisArg);

    if (this.isLoaded && !this.touchListenerIsSet) {
      this.setOnTouchListener();
    }
  };

  View.prototype.on = function (eventNames, callback, thisArg) {
    _super.prototype.on.call(this, eventNames, callback, thisArg);

    var isLayoutEvent = typeof eventNames === "string" ? eventNames.indexOf(view_common_1.ViewCommon.layoutChangedEvent) !== -1 : false;

    if (this.isLoaded && !this.layoutChangeListenerIsSet && isLayoutEvent) {
      this.setOnLayoutChangeListener();
    }
  };

  View.prototype.off = function (eventNames, callback, thisArg) {
    _super.prototype.off.call(this, eventNames, callback, thisArg);

    var isLayoutEvent = typeof eventNames === "string" ? eventNames.indexOf(view_common_1.ViewCommon.layoutChangedEvent) !== -1 : false;

    if (this.isLoaded && this.layoutChangeListenerIsSet && isLayoutEvent && !this.hasListeners(view_common_1.ViewCommon.layoutChangedEvent)) {
      this.nativeViewProtected.removeOnLayoutChangeListener(this.layoutChangeListener);
      this.layoutChangeListenerIsSet = false;
    }
  };

  View.prototype._getChildFragmentManager = function () {
    return null;
  };

  View.prototype._getRootFragmentManager = function () {
    if (!this._rootManager && this._context) {
      this._rootManager = this._context.getSupportFragmentManager();
    }

    return this._rootManager;
  };

  View.prototype._getFragmentManager = function () {
    var manager = this._manager;

    if (!manager) {
      var view = this;
      var frameOrTabViewItemFound = false;

      while (view) {
        var dialogFragment = view._dialogFragment;

        if (dialogFragment) {
          manager = dialogFragment.getChildFragmentManager();
          break;
        }

        if (view._hasFragments) {
          if (frameOrTabViewItemFound) {
            manager = view._getChildFragmentManager();
            break;
          }

          frameOrTabViewItemFound = true;
        }

        view = view.parent;
      }

      if (!manager) {
        manager = this._getRootFragmentManager();
      }

      this._manager = manager;
    }

    return manager;
  };

  View.prototype.onLoaded = function () {
    this._manager = null;
    this._rootManager = null;

    _super.prototype.onLoaded.call(this);

    this.setOnTouchListener();
  };

  View.prototype.onUnloaded = function () {
    if (this.touchListenerIsSet) {
      this.nativeViewProtected.setOnTouchListener(null);
      this.touchListenerIsSet = false;
      this.nativeViewProtected.setClickable(this._isClickable);
    }

    this._manager = null;
    this._rootManager = null;

    _super.prototype.onUnloaded.call(this);
  };

  View.prototype.onBackPressed = function () {
    var topmostFrame = frame_stack_1.topmost();

    if (topmostFrame && topmostFrame._hasAncestorView(this)) {
      return topmostFrame.onBackPressed();
    }

    return false;
  };

  View.prototype.handleGestureTouch = function (event) {
    for (var type in this._gestureObservers) {
      var list = this._gestureObservers[type];
      list.forEach(function (element) {
        element.androidOnTouchEvent(event);
      });
    }

    if (this.parent instanceof View) {
      this.parent.handleGestureTouch(event);
    }
  };

  View.prototype.hasGestureObservers = function () {
    return this._gestureObservers && Object.keys(this._gestureObservers).length > 0;
  };

  View.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._isClickable = this.nativeViewProtected.isClickable();

    if (this.hasListeners(view_common_1.ViewCommon.layoutChangedEvent)) {
      this.setOnLayoutChangeListener();
    }
  };

  View.prototype.disposeNativeView = function () {
    _super.prototype.disposeNativeView.call(this);

    if (this.layoutChangeListenerIsSet) {
      this.layoutChangeListenerIsSet = false;
      this.nativeViewProtected.removeOnLayoutChangeListener(this.layoutChangeListener);
    }
  };

  View.prototype.setOnTouchListener = function () {
    if (!this.nativeViewProtected || !this.hasGestureObservers()) {
      return;
    }

    initializeTouchListener();
    this.touchListener = this.touchListener || new TouchListener(this);
    this.nativeViewProtected.setOnTouchListener(this.touchListener);
    this.touchListenerIsSet = true;

    if (this.nativeViewProtected.setClickable) {
      this.nativeViewProtected.setClickable(this.isUserInteractionEnabled);
    }
  };

  View.prototype.setOnLayoutChangeListener = function () {
    if (this.nativeViewProtected) {
      var owner_1 = this;
      this.layoutChangeListenerIsSet = true;
      this.layoutChangeListener = this.layoutChangeListener || new android.view.View.OnLayoutChangeListener({
        onLayoutChange: function (v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom) {
          if (left !== oldLeft || top !== oldTop || right !== oldRight || bottom !== oldBottom) {
            owner_1._raiseLayoutChangedEvent();
          }
        }
      });
      this.nativeViewProtected.addOnLayoutChangeListener(this.layoutChangeListener);
    }
  };

  Object.defineProperty(View.prototype, "isLayoutRequired", {
    get: function () {
      return !this.isLayoutValid;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "isLayoutValid", {
    get: function () {
      if (this.nativeViewProtected) {
        return !this.nativeViewProtected.isLayoutRequested();
      }

      return false;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "_hasFragments", {
    get: function () {
      return false;
    },
    enumerable: true,
    configurable: true
  });

  View.prototype.layoutNativeView = function (left, top, right, bottom) {
    if (this.nativeViewProtected) {
      this.nativeViewProtected.layout(left, top, right, bottom);
    }
  };

  View.prototype.requestLayout = function () {
    _super.prototype.requestLayout.call(this);

    if (this.nativeViewProtected) {
      this.nativeViewProtected.requestLayout();
    }
  };

  View.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
    _super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);

    this.onMeasure(widthMeasureSpec, heightMeasureSpec);
  };

  View.prototype.layout = function (left, top, right, bottom) {
    _super.prototype.layout.call(this, left, top, right, bottom);

    this.onLayout(left, top, right, bottom);
  };

  View.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var view = this.nativeViewProtected;

    if (view) {
      view.measure(widthMeasureSpec, heightMeasureSpec);
      this.setMeasuredDimension(view.getMeasuredWidth(), view.getMeasuredHeight());
    }
  };

  View.prototype.onLayout = function (left, top, right, bottom) {
    var view = this.nativeViewProtected;

    if (view) {
      this.layoutNativeView(left, top, right, bottom);
    }
  };

  View.prototype._getCurrentLayoutBounds = function () {
    if (this.nativeViewProtected && !this.isCollapsed) {
      return {
        left: this.nativeViewProtected.getLeft(),
        top: this.nativeViewProtected.getTop(),
        right: this.nativeViewProtected.getRight(),
        bottom: this.nativeViewProtected.getBottom()
      };
    } else {
      return {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      };
    }
  };

  View.prototype.getMeasuredWidth = function () {
    if (this.nativeViewProtected) {
      return this.nativeViewProtected.getMeasuredWidth();
    }

    return _super.prototype.getMeasuredWidth.call(this);
  };

  View.prototype.getMeasuredHeight = function () {
    if (this.nativeViewProtected) {
      return this.nativeViewProtected.getMeasuredHeight();
    }

    return _super.prototype.getMeasuredHeight.call(this);
  };

  View.prototype.focus = function () {
    if (this.nativeViewProtected) {
      return this.nativeViewProtected.requestFocus();
    }

    return false;
  };

  View.prototype.getLocationInWindow = function () {
    if (!this.nativeViewProtected || !this.nativeViewProtected.getWindowToken()) {
      return undefined;
    }

    var nativeArray = Array.create("int", 2);
    this.nativeViewProtected.getLocationInWindow(nativeArray);
    return {
      x: view_common_1.layout.toDeviceIndependentPixels(nativeArray[0]),
      y: view_common_1.layout.toDeviceIndependentPixels(nativeArray[1])
    };
  };

  View.prototype.getLocationOnScreen = function () {
    if (!this.nativeViewProtected || !this.nativeViewProtected.getWindowToken()) {
      return undefined;
    }

    var nativeArray = Array.create("int", 2);
    this.nativeViewProtected.getLocationOnScreen(nativeArray);
    return {
      x: view_common_1.layout.toDeviceIndependentPixels(nativeArray[0]),
      y: view_common_1.layout.toDeviceIndependentPixels(nativeArray[1])
    };
  };

  View.prototype.getLocationRelativeTo = function (otherView) {
    if (!this.nativeViewProtected || !this.nativeViewProtected.getWindowToken() || !otherView || !otherView.nativeViewProtected || !otherView.nativeViewProtected.getWindowToken() || this.nativeViewProtected.getWindowToken() !== otherView.nativeViewProtected.getWindowToken()) {
      return undefined;
    }

    var myArray = Array.create("int", 2);
    this.nativeViewProtected.getLocationOnScreen(myArray);
    var otherArray = Array.create("int", 2);
    otherView.nativeViewProtected.getLocationOnScreen(otherArray);
    return {
      x: view_common_1.layout.toDeviceIndependentPixels(myArray[0] - otherArray[0]),
      y: view_common_1.layout.toDeviceIndependentPixels(myArray[1] - otherArray[1])
    };
  };

  View.resolveSizeAndState = function (size, specSize, specMode, childMeasuredState) {
    var result = size;

    switch (specMode) {
      case view_common_1.layout.UNSPECIFIED:
        result = size;
        break;

      case view_common_1.layout.AT_MOST:
        if (specSize < size) {
          result = specSize | view_common_1.layout.MEASURED_STATE_TOO_SMALL;
        }

        break;

      case view_common_1.layout.EXACTLY:
        result = specSize;
        break;
    }

    return result | childMeasuredState & view_common_1.layout.MEASURED_STATE_MASK;
  };

  View.prototype._showNativeModalView = function (parent, options) {
    var _this = this;

    _super.prototype._showNativeModalView.call(this, parent, options);

    if (!this.backgroundColor) {
      this.backgroundColor = new view_common_1.Color("White");
    }

    initializeDialogFragment();
    var df = new DialogFragment();
    var args = new android.os.Bundle();
    args.putInt(DOMID, this._domId);
    df.setArguments(args);
    var dialogOptions = {
      owner: this,
      fullscreen: !!options.fullscreen,
      stretched: !!options.stretched,
      cancelable: options.android ? !!options.android.cancelable : true,
      shownCallback: function () {
        return _this._raiseShownModallyEvent();
      },
      dismissCallback: function () {
        return _this.closeModal();
      }
    };
    saveModal(dialogOptions);
    this._dialogFragment = df;

    this._raiseShowingModallyEvent();

    this._dialogFragment.show(parent._getRootFragmentManager(), this._domId.toString());
  };

  View.prototype._hideNativeModalView = function (parent, whenClosedCallback) {
    var manager = this._dialogFragment.getFragmentManager();

    if (manager) {
      this._dialogFragment.dismissAllowingStateLoss();
    }

    this._dialogFragment = null;
    whenClosedCallback();
  };

  View.prototype[view_common_1.isEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.setEnabled(value);
  };

  View.prototype[view_common_1.originXProperty.getDefault] = function () {
    return this.nativeViewProtected.getPivotX();
  };

  View.prototype[view_common_1.originXProperty.setNative] = function (value) {
    org.nativescript.widgets.OriginPoint.setX(this.nativeViewProtected, value);
  };

  View.prototype[view_common_1.originYProperty.getDefault] = function () {
    return this.nativeViewProtected.getPivotY();
  };

  View.prototype[view_common_1.originYProperty.setNative] = function (value) {
    org.nativescript.widgets.OriginPoint.setY(this.nativeViewProtected, value);
  };

  View.prototype[view_common_1.automationTextProperty.getDefault] = function () {
    return this.nativeViewProtected.getContentDescription();
  };

  View.prototype[view_common_1.automationTextProperty.setNative] = function (value) {
    this.nativeViewProtected.setContentDescription(value);
  };

  View.prototype[view_common_1.isUserInteractionEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.setClickable(value);
    this.nativeViewProtected.setFocusable(value);
  };

  View.prototype[style_properties_1.visibilityProperty.getDefault] = function () {
    var nativeVisibility = this.nativeViewProtected.getVisibility();

    switch (nativeVisibility) {
      case android.view.View.VISIBLE:
        return "visible";

      case android.view.View.INVISIBLE:
        return "hidden";

      case android.view.View.GONE:
        return "collapse";

      default:
        throw new Error("Unsupported android.view.View visibility: " + nativeVisibility + ". Currently supported values are android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE.");
    }
  };

  View.prototype[style_properties_1.visibilityProperty.setNative] = function (value) {
    switch (value) {
      case "visible":
        this.nativeViewProtected.setVisibility(android.view.View.VISIBLE);
        break;

      case "hidden":
        this.nativeViewProtected.setVisibility(android.view.View.INVISIBLE);
        break;

      case "collapse":
        this.nativeViewProtected.setVisibility(android.view.View.GONE);
        break;

      default:
        throw new Error("Invalid visibility value: " + value + ". Valid values are: visible, hidden, collapse.");
    }
  };

  View.prototype[style_properties_1.opacityProperty.getDefault] = function () {
    return this.nativeViewProtected.getAlpha();
  };

  View.prototype[style_properties_1.opacityProperty.setNative] = function (value) {
    this.nativeViewProtected.setAlpha(float(value));
  };

  View.prototype[style_properties_1.horizontalAlignmentProperty.getDefault] = function () {
    return org.nativescript.widgets.ViewHelper.getHorizontalAlignment(this.nativeViewProtected);
  };

  View.prototype[style_properties_1.horizontalAlignmentProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;
    var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();

    if (lp.gravity !== undefined) {
      switch (value) {
        case "left":
          lp.gravity = android.view.Gravity.LEFT | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;

          if (lp.weight < 0) {
            lp.weight = -2;
          }

          break;

        case "center":
          lp.gravity = android.view.Gravity.CENTER_HORIZONTAL | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;

          if (lp.weight < 0) {
            lp.weight = -2;
          }

          break;

        case "right":
          lp.gravity = android.view.Gravity.RIGHT | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;

          if (lp.weight < 0) {
            lp.weight = -2;
          }

          break;

        case "stretch":
          lp.gravity = android.view.Gravity.FILL_HORIZONTAL | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;

          if (lp.weight < 0) {
            lp.weight = -1;
          }

          break;
      }

      nativeView.setLayoutParams(lp);
    }
  };

  View.prototype[style_properties_1.verticalAlignmentProperty.getDefault] = function () {
    return org.nativescript.widgets.ViewHelper.getVerticalAlignment(this.nativeViewProtected);
  };

  View.prototype[style_properties_1.verticalAlignmentProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;
    var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();

    if (lp.gravity !== undefined) {
      switch (value) {
        case "top":
          lp.gravity = android.view.Gravity.TOP | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;

          if (lp.height < 0) {
            lp.height = -2;
          }

          break;

        case "middle":
          lp.gravity = android.view.Gravity.CENTER_VERTICAL | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;

          if (lp.height < 0) {
            lp.height = -2;
          }

          break;

        case "bottom":
          lp.gravity = android.view.Gravity.BOTTOM | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;

          if (lp.height < 0) {
            lp.height = -2;
          }

          break;

        case "stretch":
          lp.gravity = android.view.Gravity.FILL_VERTICAL | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;

          if (lp.height < 0) {
            lp.height = -1;
          }

          break;
      }

      nativeView.setLayoutParams(lp);
    }
  };

  View.prototype[style_properties_1.rotateProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setRotate(this.nativeViewProtected, float(value));
  };

  View.prototype[style_properties_1.scaleXProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setScaleX(this.nativeViewProtected, float(value));
  };

  View.prototype[style_properties_1.scaleYProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setScaleY(this.nativeViewProtected, float(value));
  };

  View.prototype[style_properties_1.translateXProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setTranslateX(this.nativeViewProtected, view_common_1.layout.toDevicePixels(value));
  };

  View.prototype[style_properties_1.translateYProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setTranslateY(this.nativeViewProtected, view_common_1.layout.toDevicePixels(value));
  };

  View.prototype[style_properties_1.zIndexProperty.getDefault] = function () {
    return 0;
  };

  View.prototype[style_properties_1.zIndexProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setZIndex(this.nativeViewProtected, value);
  };

  View.prototype[style_properties_1.backgroundInternalProperty.getDefault] = function () {
    var nativeView = this.nativeViewProtected;
    var drawable = nativeView.getBackground();

    if (drawable) {
      var constantState = drawable.getConstantState();

      if (constantState) {
        try {
          return constantState.newDrawable(nativeView.getResources());
        } catch (e) {
          return drawable;
        }
      } else {
        return drawable;
      }
    }

    return null;
  };

  View.prototype[style_properties_1.backgroundInternalProperty.setNative] = function (value) {
    this._redrawNativeBackground(value);
  };

  View.prototype[style_properties_1.minWidthProperty.setNative] = function (value) {
    if (this.parent instanceof CustomLayoutView && this.parent.nativeViewProtected) {
      this.parent._setChildMinWidthNative(this);
    } else {
      this._setMinWidthNative(this.minWidth);
    }
  };

  View.prototype[style_properties_1.minHeightProperty.setNative] = function (value) {
    if (this.parent instanceof CustomLayoutView && this.parent.nativeViewProtected) {
      this.parent._setChildMinHeightNative(this);
    } else {
      this._setMinHeightNative(this.minHeight);
    }
  };

  View.prototype._redrawNativeBackground = function (value) {
    if (value instanceof background_1.Background) {
      background_1.ad.onBackgroundOrBorderPropertyChanged(this);
    } else {
      var nativeView = this.nativeViewProtected;
      nativeView.setBackground(value);
      var style = this.style;
      var paddingTop = view_common_1.paddingTopProperty.isSet(style) ? this.effectivePaddingTop : this._defaultPaddingTop;
      var paddingRight = view_common_1.paddingRightProperty.isSet(style) ? this.effectivePaddingRight : this._defaultPaddingRight;
      var paddingBottom = view_common_1.paddingBottomProperty.isSet(style) ? this.effectivePaddingBottom : this._defaultPaddingBottom;
      var paddingLeft = view_common_1.paddingLeftProperty.isSet(style) ? this.effectivePaddingLeft : this._defaultPaddingLeft;

      if (this._isPaddingRelative) {
        nativeView.setPaddingRelative(paddingLeft, paddingTop, paddingRight, paddingBottom);
      } else {
        nativeView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom);
      }

      nativeView.background = undefined;
    }
  };

  View.androidBackPressedEvent = androidBackPressedEvent;

  __decorate([profiling_1.profile], View.prototype, "onLoaded", null);

  __decorate([profiling_1.profile], View.prototype, "onUnloaded", null);

  __decorate([profiling_1.profile], View.prototype, "requestLayout", null);

  return View;
}(view_common_1.ViewCommon);

exports.View = View;

var ContainerView = function (_super) {
  __extends(ContainerView, _super);

  function ContainerView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return ContainerView;
}(View);

exports.ContainerView = ContainerView;

var CustomLayoutView = function (_super) {
  __extends(CustomLayoutView, _super);

  function CustomLayoutView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  CustomLayoutView.prototype.createNativeView = function () {
    return new org.nativescript.widgets.ContentLayout(this._context);
  };

  CustomLayoutView.prototype._addViewToNativeVisualTree = function (child, atIndex) {
    if (atIndex === void 0) {
      atIndex = Number.MAX_SAFE_INTEGER;
    }

    _super.prototype._addViewToNativeVisualTree.call(this, child);

    if (this.nativeViewProtected && child.nativeViewProtected) {
      if (view_common_1.traceEnabled()) {
        view_common_1.traceWrite(this + ".nativeView.addView(" + child + ".nativeView, " + atIndex + ")", view_common_1.traceCategories.VisualTreeEvents);
      }

      this.nativeViewProtected.addView(child.nativeViewProtected, atIndex);

      if (child instanceof View) {
        this._updateNativeLayoutParams(child);
      }

      return true;
    }

    return false;
  };

  CustomLayoutView.prototype._updateNativeLayoutParams = function (child) {
    this._setChildMinWidthNative(child);

    this._setChildMinHeightNative(child);
  };

  CustomLayoutView.prototype._setChildMinWidthNative = function (child) {
    child._setMinWidthNative(child.minWidth);
  };

  CustomLayoutView.prototype._setChildMinHeightNative = function (child) {
    child._setMinHeightNative(child.minHeight);
  };

  CustomLayoutView.prototype._removeViewFromNativeVisualTree = function (child) {
    _super.prototype._removeViewFromNativeVisualTree.call(this, child);

    var nativeView = this.nativeViewProtected;
    var childView = child.nativeViewProtected;

    if (nativeView && childView) {
      nativeView.removeView(childView);

      if (view_common_1.traceEnabled()) {
        view_common_1.traceWrite(nativeView + ".removeView(" + childView + ")", view_common_1.traceCategories.VisualTreeEvents);
        view_common_1.traceNotifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
      }
    }
  };

  return CustomLayoutView;
}(ContainerView);

exports.CustomLayoutView = CustomLayoutView;

var percentNotSupported = function (view, value) {
  throw new Error("PercentLength is not supported.");
};

function createNativePercentLengthProperty(options) {
  var getter = options.getter,
      setter = options.setter,
      _a = options.auto,
      auto = _a === void 0 ? 0 : _a;
  var setPixels, getPixels, setPercent;

  if (getter) {
    View.prototype[getter] = function () {
      if (options) {
        setPixels = options.setPixels;
        getPixels = options.getPixels;
        setPercent = options.setPercent || percentNotSupported;
        options = null;
      }

      var value = getPixels(this.nativeViewProtected);

      if (value == auto) {
        return "auto";
      } else {
        return {
          value: value,
          unit: "px"
        };
      }
    };
  }

  if (setter) {
    View.prototype[setter] = function (length) {
      if (options) {
        setPixels = options.setPixels;
        getPixels = options.getPixels;
        setPercent = options.setPercent || percentNotSupported;
        options = null;
      }

      if (length == "auto") {
        setPixels(this.nativeViewProtected, auto);
      } else if (typeof length === "number") {
        setPixels(this.nativeViewProtected, view_common_1.layout.round(view_common_1.layout.toDevicePixels(length)));
      } else if (length.unit == "dip") {
        setPixels(this.nativeViewProtected, view_common_1.layout.round(view_common_1.layout.toDevicePixels(length.value)));
      } else if (length.unit == "px") {
        setPixels(this.nativeViewProtected, view_common_1.layout.round(length.value));
      } else if (length.unit == "%") {
        setPercent(this.nativeViewProtected, length.value);
      } else {
        throw new Error("Unsupported PercentLength " + length);
      }
    };
  }
}

createNativePercentLengthProperty({
  setter: style_properties_1.marginTopProperty.setNative,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMarginTop;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setMarginTopPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.marginRightProperty.setNative,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMarginRight;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setMarginRightPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.marginBottomProperty.setNative,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMarginBottom;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setMarginBottomPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.marginLeftProperty.setNative,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMarginLeft;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setMarginLeftPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.widthProperty.setNative,
  auto: -1,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setWidth;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setWidthPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.heightProperty.setNative,
  auto: -1,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setHeight;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setHeightPercent;
  }

});
createNativePercentLengthProperty({
  setter: "_setMinWidthNative",

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMinWidth;
  }

});
createNativePercentLengthProperty({
  setter: "_setMinHeightNative",

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMinHeight;
  }

});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();

var TargetHandlerPair = function () {
  function TargetHandlerPair(target, handler) {
    this.tagetRef = new WeakRef(target);
    this.handler = handler;
  }

  return TargetHandlerPair;
}();

function getHandlerForEventName(eventName) {
  var handler = handlersForEventName.get(eventName);

  if (!handler) {
    handler = function (eventData) {
      var source = eventData.object;
      var sourceEventMap = sourcesMap.get(source);

      if (!sourceEventMap) {
        source.removeEventListener(eventName, handlersForEventName.get(eventName));
        return;
      }

      var targetHandlerPairList = sourceEventMap.get(eventName);

      if (!targetHandlerPairList) {
        return;
      }

      var deadPairsIndexes = [];

      for (var i = 0; i < targetHandlerPairList.length; i++) {
        var pair = targetHandlerPairList[i];
        var target = pair.tagetRef.get();

        if (target) {
          pair.handler.call(target, eventData);
        } else {
          deadPairsIndexes.push(i);
        }
      }

      if (deadPairsIndexes.length === targetHandlerPairList.length) {
        source.removeEventListener(eventName, handlersForEventName.get(eventName));
        sourceEventMap.delete(eventName);
      } else {
        for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
          targetHandlerPairList.splice(deadPairsIndexes[j], 1);
        }
      }
    };

    handlersForEventName.set(eventName, handler);
  }

  return handler;
}

function validateArgs(source, eventName, handler, target) {
  if (!source) {
    throw new Error("source is null or undefined");
  }

  if (!target) {
    throw new Error("target is null or undefined");
  }

  if (typeof eventName !== "string") {
    throw new Error("eventName is not a string");
  }

  if (typeof handler !== "function") {
    throw new Error("handler is not a function");
  }
}

function addWeakEventListener(source, eventName, handler, target) {
  validateArgs(source, eventName, handler, target);
  var shouldAttach = false;
  var sourceEventMap = sourcesMap.get(source);

  if (!sourceEventMap) {
    sourceEventMap = new Map();
    sourcesMap.set(source, sourceEventMap);
    shouldAttach = true;
  }

  var pairList = sourceEventMap.get(eventName);

  if (!pairList) {
    pairList = new Array();
    sourceEventMap.set(eventName, pairList);
    shouldAttach = true;
  }

  pairList.push(new TargetHandlerPair(target, handler));

  if (shouldAttach) {
    source.addEventListener(eventName, getHandlerForEventName(eventName));
  }
}

exports.addWeakEventListener = addWeakEventListener;

function removeWeakEventListener(source, eventName, handler, target) {
  validateArgs(source, eventName, handler, target);
  var handlerForEventWithName = handlersForEventName.get(eventName);

  if (!handlerForEventWithName) {
    return;
  }

  var sourceEventMap = sourcesMap.get(source);

  if (!sourceEventMap) {
    return;
  }

  var targetHandlerPairList = sourceEventMap.get(eventName);

  if (!targetHandlerPairList) {
    return;
  }

  var targetHandlerPairsToRemove = [];

  for (var i = 0; i < targetHandlerPairList.length; i++) {
    var pair = targetHandlerPairList[i];
    var registeredTarget = pair.tagetRef.get();

    if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
      targetHandlerPairsToRemove.push(i);
    }
  }

  if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
    source.removeEventListener(eventName, handlerForEventWithName);
    sourceEventMap.delete(eventName);
  } else {
    for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
      targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
    }
  }
}

exports.removeWeakEventListener = removeWeakEventListener;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

exports.STRING = "string";
exports.PROMPT = "Prompt";
exports.CONFIRM = "Confirm";
exports.ALERT = "Alert";
exports.LOGIN = "Login";
exports.OK = "OK";
exports.CANCEL = "Cancel";
var inputType;

(function (inputType) {
  inputType.text = "text";
  inputType.password = "password";
  inputType.email = "email";
  inputType.number = "number";
  inputType.decimal = "decimal";
  inputType.phone = "phone";
})(inputType = exports.inputType || (exports.inputType = {}));

var capitalizationType;

(function (capitalizationType) {
  capitalizationType.none = "none";
  capitalizationType.all = "all";
  capitalizationType.sentences = "sentences";
  capitalizationType.words = "words";
})(capitalizationType = exports.capitalizationType || (exports.capitalizationType = {}));

var frame;

function getCurrentPage() {
  if (!frame) {
    frame = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");
  }

  var topmostFrame = frame.topmost();

  if (topmostFrame) {
    return topmostFrame.currentPage;
  }

  return undefined;
}

exports.getCurrentPage = getCurrentPage;

function applySelectors(view, callback) {
  var currentPage = getCurrentPage();

  if (currentPage) {
    var styleScope = currentPage._styleScope;

    if (styleScope) {
      view._inheritStyleScope(styleScope);

      view.onLoaded();
      callback(view);
      view.onUnloaded();
    }
  }
}

var button;
var label;
var textField;

function getButtonColors() {
  if (!button) {
    var Button = __webpack_require__("../node_modules/tns-core-modules/ui/button/button.js").Button;

    button = new Button();

    if (platform_1.isIOS) {
      button._setupUI({});
    }
  }

  var buttonColor;
  var buttonBackgroundColor;
  applySelectors(button, function (btn) {
    buttonColor = btn.color;
    buttonBackgroundColor = btn.backgroundColor;
  });
  return {
    color: buttonColor,
    backgroundColor: buttonBackgroundColor
  };
}

exports.getButtonColors = getButtonColors;

function getLabelColor() {
  if (!label) {
    var Label = __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js").Label;

    label = new Label();

    if (platform_1.isIOS) {
      label._setupUI({});
    }
  }

  var labelColor;
  applySelectors(label, function (lbl) {
    labelColor = lbl.color;
  });
  return labelColor;
}

exports.getLabelColor = getLabelColor;

function getTextFieldColor() {
  if (!textField) {
    var TextField = __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field.js").TextField;

    textField = new TextField();

    if (platform_1.isIOS) {
      textField._setupUI({});
    }
  }

  var textFieldColor;
  applySelectors(textField, function (tf) {
    textFieldColor = tf.color;
  });
  return textFieldColor;
}

exports.getTextFieldColor = getTextFieldColor;

function isDialogOptions(arg) {
  return arg && (arg.message || arg.title);
}

exports.isDialogOptions = isDialogOptions;

function parseLoginOptions(args) {
  if (args.length === 1 && types_1.isObject(args[0])) {
    return args[0];
  }

  var options = {
    title: exports.LOGIN,
    okButtonText: exports.OK,
    cancelButtonText: exports.CANCEL
  };

  if (types_1.isString(args[0])) {
    options.message = args[0];
  }

  if (types_1.isString(args[1])) {
    options.userNameHint = args[1];
  }

  if (types_1.isString(args[2])) {
    options.passwordHint = args[2];
  }

  if (types_1.isString(args[3])) {
    options.userName = args[3];
  }

  if (types_1.isString(args[4])) {
    options.password = args[4];
  }

  return options;
}

exports.parseLoginOptions = parseLoginOptions;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/dialogs/dialogs.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dialogs_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js");

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js"));

function isString(value) {
  return typeof value === "string";
}

function createAlertDialog(options) {
  var alert = new android.app.AlertDialog.Builder(application_1.android.foregroundActivity);
  alert.setTitle(options && isString(options.title) ? options.title : "");
  alert.setMessage(options && isString(options.message) ? options.message : "");

  if (options && options.cancelable === false) {
    alert.setCancelable(false);
  }

  return alert;
}

function showDialog(builder) {
  var dlg = builder.show();
  var labelColor = dialogs_common_1.getLabelColor();

  if (labelColor) {
    var textViewId = dlg.getContext().getResources().getIdentifier("android:id/alertTitle", null, null);

    if (textViewId) {
      var tv = dlg.findViewById(textViewId);

      if (tv) {
        tv.setTextColor(labelColor.android);
      }
    }

    var messageTextViewId = dlg.getContext().getResources().getIdentifier("android:id/message", null, null);

    if (messageTextViewId) {
      var messageTextView = dlg.findViewById(messageTextViewId);

      if (messageTextView) {
        messageTextView.setTextColor(labelColor.android);
      }
    }
  }

  var _a = dialogs_common_1.getButtonColors(),
      color = _a.color,
      backgroundColor = _a.backgroundColor;

  if (color) {
    var buttons = [];

    for (var i = 0; i < 3; i++) {
      var id = dlg.getContext().getResources().getIdentifier("android:id/button" + i, null, null);
      buttons[i] = dlg.findViewById(id);
    }

    buttons.forEach(function (button) {
      if (button) {
        if (color) {
          button.setTextColor(color.android);
        }

        if (backgroundColor) {
          button.setBackgroundColor(backgroundColor.android);
        }
      }
    });
  }
}

function addButtonsToAlertDialog(alert, options, callback) {
  if (!options) {
    return;
  }

  if (options.okButtonText) {
    alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
      onClick: function (dialog, id) {
        dialog.cancel();
        callback(true);
      }
    }));
  }

  if (options.cancelButtonText) {
    alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
      onClick: function (dialog, id) {
        dialog.cancel();
        callback(false);
      }
    }));
  }

  if (options.neutralButtonText) {
    alert.setNeutralButton(options.neutralButtonText, new android.content.DialogInterface.OnClickListener({
      onClick: function (dialog, id) {
        dialog.cancel();
        callback(undefined);
      }
    }));
  }

  alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
    onDismiss: function () {
      callback(false);
    }
  }));
}

function alert(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var options = !dialogs_common_1.isDialogOptions(arg) ? {
        title: dialogs_common_1.ALERT,
        okButtonText: dialogs_common_1.OK,
        message: arg + ""
      } : arg;
      var alert_1 = createAlertDialog(options);
      alert_1.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
        onClick: function (dialog, id) {
          dialog.cancel();
          resolve();
        }
      }));
      alert_1.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
        onDismiss: function () {
          resolve();
        }
      }));
      showDialog(alert_1);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.alert = alert;

function confirm(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var options = !dialogs_common_1.isDialogOptions(arg) ? {
        title: dialogs_common_1.CONFIRM,
        okButtonText: dialogs_common_1.OK,
        cancelButtonText: dialogs_common_1.CANCEL,
        message: arg + ""
      } : arg;
      var alert_2 = createAlertDialog(options);
      addButtonsToAlertDialog(alert_2, options, function (result) {
        resolve(result);
      });
      showDialog(alert_2);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.confirm = confirm;

function prompt(arg) {
  var options;
  var defaultOptions = {
    title: dialogs_common_1.PROMPT,
    okButtonText: dialogs_common_1.OK,
    cancelButtonText: dialogs_common_1.CANCEL,
    inputType: dialogs_common_1.inputType.text
  };

  if (arguments.length === 1) {
    if (isString(arg)) {
      options = defaultOptions;
      options.message = arg;
    } else {
      options = arg;
    }
  } else if (arguments.length === 2) {
    if (isString(arguments[0]) && isString(arguments[1])) {
      options = defaultOptions;
      options.message = arguments[0];
      options.defaultText = arguments[1];
    }
  }

  return new Promise(function (resolve, reject) {
    try {
      var alert_3 = createAlertDialog(options);
      var input_1 = new android.widget.EditText(application_1.android.foregroundActivity);

      if (options) {
        if (options.inputType === dialogs_common_1.inputType.password) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
        } else if (options.inputType === dialogs_common_1.inputType.email) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
        } else if (options.inputType === dialogs_common_1.inputType.number) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
        } else if (options.inputType === dialogs_common_1.inputType.decimal) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL);
        } else if (options.inputType === dialogs_common_1.inputType.phone) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_PHONE);
        }

        switch (options.capitalizationType) {
          case dialogs_common_1.capitalizationType.all:
            {
              input_1.setInputType(input_1.getInputType() | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
              break;
            }

          case dialogs_common_1.capitalizationType.sentences:
            {
              input_1.setInputType(input_1.getInputType() | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
              break;
            }

          case dialogs_common_1.capitalizationType.words:
            {
              input_1.setInputType(input_1.getInputType() | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS);
              break;
            }
        }
      }

      input_1.setText(options && options.defaultText || "");
      alert_3.setView(input_1);

      var getText_1 = function () {
        return input_1.getText().toString();
      };

      addButtonsToAlertDialog(alert_3, options, function (r) {
        resolve({
          result: r,
          text: getText_1()
        });
      });
      showDialog(alert_3);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.prompt = prompt;

function login() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var options = dialogs_common_1.parseLoginOptions(args);
  return new Promise(function (resolve, reject) {
    try {
      var context_1 = application_1.android.foregroundActivity;
      var alert_4 = createAlertDialog(options);
      var userNameInput_1 = new android.widget.EditText(context_1);
      userNameInput_1.setHint(options.userNameHint ? options.userNameHint : "");
      userNameInput_1.setText(options.userName ? options.userName : "");
      var passwordInput_1 = new android.widget.EditText(context_1);
      passwordInput_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
      passwordInput_1.setTypeface(android.graphics.Typeface.DEFAULT);
      passwordInput_1.setHint(options.passwordHint ? options.passwordHint : "");
      passwordInput_1.setText(options.password ? options.password : "");
      var layout = new android.widget.LinearLayout(context_1);
      layout.setOrientation(1);
      layout.addView(userNameInput_1);
      layout.addView(passwordInput_1);
      alert_4.setView(layout);
      addButtonsToAlertDialog(alert_4, options, function (r) {
        resolve({
          result: r,
          userName: userNameInput_1.getText().toString(),
          password: passwordInput_1.getText().toString()
        });
      });
      showDialog(alert_4);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.login = login;

function action(arg) {
  var options;
  var defaultOptions = {
    title: null,
    cancelButtonText: dialogs_common_1.CANCEL
  };

  if (arguments.length === 1) {
    if (isString(arguments[0])) {
      options = defaultOptions;
      options.message = arguments[0];
    } else {
      options = arguments[0];
    }
  } else if (arguments.length === 2) {
    if (isString(arguments[0]) && isString(arguments[1])) {
      options = defaultOptions;
      options.message = arguments[0];
      options.cancelButtonText = arguments[1];
    }
  } else if (arguments.length === 3) {
    if (isString(arguments[0]) && isString(arguments[1]) && typeof arguments[2] !== "undefined") {
      options = defaultOptions;
      options.message = arguments[0];
      options.cancelButtonText = arguments[1];
      options.actions = arguments[2];
    }
  }

  return new Promise(function (resolve, reject) {
    try {
      var activity = application_1.android.foregroundActivity || application_1.android.startActivity;
      var alert_5 = new android.app.AlertDialog.Builder(activity);
      var message = options && isString(options.message) ? options.message : "";
      var title = options && isString(options.title) ? options.title : "";

      if (options && options.cancelable === false) {
        alert_5.setCancelable(false);
      }

      if (title) {
        alert_5.setTitle(title);

        if (!options.actions) {
          alert_5.setMessage(message);
        }
      } else {
        alert_5.setTitle(message);
      }

      if (options.actions) {
        alert_5.setItems(options.actions, new android.content.DialogInterface.OnClickListener({
          onClick: function (dialog, which) {
            resolve(options.actions[which]);
          }
        }));
      }

      if (isString(options.cancelButtonText)) {
        alert_5.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
          onClick: function (dialog, id) {
            dialog.cancel();
            resolve(options.cancelButtonText);
          }
        }));
      }

      alert_5.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
        onDismiss: function () {
          if (isString(options.cancelButtonText)) {
            resolve(options.cancelButtonText);
          } else {
            resolve("");
          }
        }
      }));
      showDialog(alert_5);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.action = action;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var EditableTextBase = function (_super) {
  __extends(EditableTextBase, _super);

  function EditableTextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EditableTextBase.blurEvent = "blur";
  EditableTextBase.focusEvent = "focus";
  return EditableTextBase;
}(text_base_1.TextBase);

exports.EditableTextBase = EditableTextBase;
exports.placeholderColorProperty = new text_base_1.CssProperty({
  name: "placeholderColor",
  cssName: "placeholder-color",
  equalityComparer: text_base_1.Color.equals,
  valueConverter: function (v) {
    return new text_base_1.Color(v);
  }
});
exports.placeholderColorProperty.register(text_base_1.Style);
var keyboardTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("datetime", "phone", "number", "url", "email"));
exports.keyboardTypeProperty = new text_base_1.Property({
  name: "keyboardType",
  valueConverter: keyboardTypeConverter
});
exports.keyboardTypeProperty.register(EditableTextBase);
var returnKeyTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("done", "next", "go", "search", "send"));
exports.returnKeyTypeProperty = new text_base_1.Property({
  name: "returnKeyType",
  valueConverter: returnKeyTypeConverter
});
exports.returnKeyTypeProperty.register(EditableTextBase);
exports.editableProperty = new text_base_1.Property({
  name: "editable",
  defaultValue: true,
  valueConverter: text_base_1.booleanConverter
});
exports.editableProperty.register(EditableTextBase);
exports.updateTextTriggerProperty = new text_base_1.Property({
  name: "updateTextTrigger",
  defaultValue: "textChanged"
});
exports.updateTextTriggerProperty.register(EditableTextBase);
var autocapitalizationTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("none", "words", "sentences", "allcharacters"));
exports.autocapitalizationTypeProperty = new text_base_1.Property({
  name: "autocapitalizationType",
  defaultValue: "sentences",
  valueConverter: autocapitalizationTypeConverter
});
exports.autocapitalizationTypeProperty.register(EditableTextBase);
exports.autocorrectProperty = new text_base_1.Property({
  name: "autocorrect",
  valueConverter: text_base_1.booleanConverter
});
exports.autocorrectProperty.register(EditableTextBase);
exports.hintProperty = new text_base_1.Property({
  name: "hint",
  defaultValue: ""
});
exports.hintProperty.register(EditableTextBase);
exports.maxLengthProperty = new text_base_1.Property({
  name: "maxLength",
  defaultValue: Number.POSITIVE_INFINITY,
  valueConverter: parseInt
});
exports.maxLengthProperty.register(EditableTextBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var editable_text_base_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js"));

var EditTextListeners;

function clearDismissTimer() {
  exports.dismissKeyboardOwner = null;

  if (exports.dismissKeyboardTimeoutId) {
    clearTimeout(exports.dismissKeyboardTimeoutId);
    exports.dismissKeyboardTimeoutId = null;
  }
}

function dismissSoftInput(owner) {
  clearDismissTimer();

  if (!exports.dismissKeyboardTimeoutId) {
    exports.dismissKeyboardTimeoutId = setTimeout(function () {
      var owner = exports.dismissKeyboardOwner && exports.dismissKeyboardOwner.get();
      var activity = owner && owner._context;
      var nativeView = owner && owner.nativeViewProtected;
      exports.dismissKeyboardTimeoutId = null;
      exports.dismissKeyboardOwner = null;
      var focused = activity && activity.getCurrentFocus();

      if (!focused || !(focused instanceof android.widget.EditText)) {
        utils_1.ad.dismissSoftInput(nativeView);
      }
    }, 10);
  }
}

function initializeEditTextListeners() {
  if (EditTextListeners) {
    return;
  }

  var EditTextListenersImpl = function (_super) {
    __extends(EditTextListenersImpl, _super);

    function EditTextListenersImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    EditTextListenersImpl.prototype.beforeTextChanged = function (text, start, count, after) {};

    EditTextListenersImpl.prototype.onTextChanged = function (text, start, before, count) {};

    EditTextListenersImpl.prototype.afterTextChanged = function (editable) {
      var owner = this.owner;

      if (!owner || owner._changeFromCode) {
        return;
      }

      switch (owner.updateTextTrigger) {
        case "focusLost":
          owner._dirtyTextAccumulator = editable.toString();
          break;

        case "textChanged":
          editable_text_base_common_1.textProperty.nativeValueChange(owner, editable.toString());
          break;

        default:
          throw new Error("Invalid updateTextTrigger: " + owner.updateTextTrigger);
      }
    };

    EditTextListenersImpl.prototype.onFocusChange = function (view, hasFocus) {
      var owner = this.owner;

      if (!owner) {
        return;
      }

      if (hasFocus) {
        clearDismissTimer();
        owner.notify({
          eventName: EditableTextBase.focusEvent,
          object: owner
        });
      } else {
        if (owner._dirtyTextAccumulator || owner._dirtyTextAccumulator === "") {
          editable_text_base_common_1.textProperty.nativeValueChange(owner, owner._dirtyTextAccumulator);
          owner._dirtyTextAccumulator = undefined;
        }

        owner.notify({
          eventName: EditableTextBase.blurEvent,
          object: owner
        });
        dismissSoftInput(owner);
      }
    };

    EditTextListenersImpl.prototype.onEditorAction = function (textView, actionId, event) {
      var owner = this.owner;

      if (!owner) {
        return false;
      }

      if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_DONE || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED || event && event.getKeyCode() === android.view.KeyEvent.KEYCODE_ENTER) {
        if (textView.getMaxLines() === 1) {
          owner.dismissSoftInput();
        }

        owner._onReturnPress();
      } else if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_NEXT || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS) {
        owner._onReturnPress();
      }

      return false;
    };

    EditTextListenersImpl = __decorate([Interfaces([android.text.TextWatcher, android.view.View.OnFocusChangeListener, android.widget.TextView.OnEditorActionListener])], EditTextListenersImpl);
    return EditTextListenersImpl;
  }(java.lang.Object);

  EditTextListeners = EditTextListenersImpl;
}

var EditableTextBase = function (_super) {
  __extends(EditableTextBase, _super);

  function EditableTextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EditableTextBase.prototype._onReturnPress = function () {};

  EditableTextBase.prototype.createNativeView = function () {
    return new android.widget.EditText(this._context);
  };

  EditableTextBase.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var editText = this.nativeTextViewProtected;

    this._configureEditText(editText);

    initializeEditTextListeners();
    var listeners = new EditTextListeners(this);
    editText.addTextChangedListener(listeners);
    editText.setOnFocusChangeListener(listeners);
    editText.setOnEditorActionListener(listeners);
    editText.listener = listeners;
    this._inputType = editText.getInputType();
  };

  EditableTextBase.prototype.disposeNativeView = function () {
    this.nativeTextViewProtected.listener.owner = null;
    this._keyListenerCache = null;

    _super.prototype.disposeNativeView.call(this);
  };

  EditableTextBase.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    this.nativeTextViewProtected.setInputType(this._inputType);
  };

  EditableTextBase.prototype.onUnloaded = function () {
    this.dismissSoftInput();

    _super.prototype.onUnloaded.call(this);
  };

  EditableTextBase.prototype.dismissSoftInput = function () {
    var nativeView = this.nativeTextViewProtected;

    if (!nativeView) {
      return;
    }

    utils_1.ad.dismissSoftInput(nativeView);
  };

  EditableTextBase.prototype.focus = function () {
    var nativeView = this.nativeTextViewProtected;

    if (!nativeView) {
      return;
    }

    var result = _super.prototype.focus.call(this);

    if (result) {
      utils_1.ad.showSoftInput(this.nativeTextViewProtected);
    }

    return result;
  };

  EditableTextBase.prototype._setInputType = function (inputType) {
    var nativeView = this.nativeTextViewProtected;

    try {
      this._changeFromCode = true;
      nativeView.setInputType(inputType);
    } finally {
      this._changeFromCode = false;
    }

    var listener = nativeView.getKeyListener();

    if (listener) {
      this._keyListenerCache = listener;
    }

    if (!this.editable) {
      nativeView.setKeyListener(null);
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.textProperty.getDefault] = function () {
    return editable_text_base_common_1.resetSymbol;
  };

  EditableTextBase.prototype[editable_text_base_common_1.textProperty.setNative] = function (value) {
    try {
      this._changeFromCode = true;

      this._setNativeText(value === editable_text_base_common_1.resetSymbol);
    } finally {
      this._changeFromCode = false;
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getInputType();
  };

  EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.setNative] = function (value) {
    var newInputType;

    switch (value) {
      case "datetime":
        newInputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
        break;

      case "phone":
        newInputType = android.text.InputType.TYPE_CLASS_PHONE;
        break;

      case "number":
        newInputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
        break;

      case "url":
        newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
        break;

      case "email":
        newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
        break;

      default:
        newInputType = value;
        break;
    }

    this._setInputType(newInputType);
  };

  EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.getDefault] = function () {
    var ime = this.nativeTextViewProtected.getImeOptions();

    switch (ime) {
      case android.view.inputmethod.EditorInfo.IME_ACTION_DONE:
        return "done";

      case android.view.inputmethod.EditorInfo.IME_ACTION_GO:
        return "go";

      case android.view.inputmethod.EditorInfo.IME_ACTION_NEXT:
        return "next";

      case android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH:
        return "search";

      case android.view.inputmethod.EditorInfo.IME_ACTION_SEND:
        return "send";

      default:
        return ime.toString();
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.setNative] = function (value) {
    var newImeOptions;

    switch (value) {
      case "done":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_DONE;
        break;

      case "go":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_GO;
        break;

      case "next":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_NEXT;
        break;

      case "search":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH;
        break;

      case "send":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEND;
        break;

      default:
        var ime = +value;

        if (!isNaN(ime)) {
          newImeOptions = ime;
        } else {
          newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED;
        }

        break;
    }

    this.nativeTextViewProtected.setImeOptions(newImeOptions);
  };

  EditableTextBase.prototype[editable_text_base_common_1.editableProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;

    if (value) {
      nativeView.setKeyListener(this._keyListenerCache);
    } else {
      if (!this._keyListenerCache) {
        this._keyListenerCache = nativeView.getKeyListener();
      }

      nativeView.setKeyListener(null);
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.getDefault] = function () {
    var inputType = this.nativeTextViewProtected.getInputType();

    if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS) === android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS) {
      return "words";
    } else if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) === android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) {
      return "sentences";
    } else if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS) === android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS) {
      return "allcharacters";
    } else {
      return inputType.toString();
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.setNative] = function (value) {
    var inputType = this.nativeTextViewProtected.getInputType();
    inputType = inputType & ~28672;

    switch (value) {
      case "none":
        break;

      case "words":
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
        break;

      case "sentences":
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
        break;

      case "allcharacters":
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
        break;

      default:
        var number = +value;

        if (!isNaN(number)) {
          inputType = number;
        } else {
          inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
        }

        break;
    }

    this._setInputType(inputType);
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.getDefault] = function () {
    var autocorrect = this.nativeTextViewProtected.getInputType();

    if ((autocorrect & android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT) === android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT) {
      return true;
    }

    return false;
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.setNative] = function (value) {
    var inputType = this.nativeTextViewProtected.getInputType();

    switch (value) {
      case true:
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
        inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
        break;

      case false:
        inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
        inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
        break;

      default:
        break;
    }

    this._setInputType(inputType);
  };

  EditableTextBase.prototype[editable_text_base_common_1.hintProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getHint();
  };

  EditableTextBase.prototype[editable_text_base_common_1.hintProperty.setNative] = function (value) {
    var text = value === null || value === undefined ? null : value.toString();
    this.nativeTextViewProtected.setHint(text);
  };

  EditableTextBase.prototype[editable_text_base_common_1.placeholderColorProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getHintTextColors();
  };

  EditableTextBase.prototype[editable_text_base_common_1.placeholderColorProperty.setNative] = function (value) {
    var color = value instanceof editable_text_base_common_1.Color ? value.android : value;
    this.nativeTextViewProtected.setHintTextColor(color);
  };

  EditableTextBase.prototype[editable_text_base_common_1.textTransformProperty.setNative] = function (value) {};

  EditableTextBase.prototype[editable_text_base_common_1.maxLengthProperty.setNative] = function (value) {
    if (value === Number.POSITIVE_INFINITY) {
      this.nativeTextViewProtected.setFilters([]);
    } else {
      var lengthFilter = new android.text.InputFilter.LengthFilter(value);
      var filters = this.nativeTextViewProtected.getFilters();
      var newFilters = [];

      for (var i = 0; i < filters.length; i++) {
        var filter = filters[i];

        if (!(filter instanceof android.text.InputFilter.LengthFilter)) {
          newFilters.push(filter);
        }
      }

      newFilters.push(lengthFilter);
      this.nativeTextViewProtected.setFilters(newFilters);
    }
  };

  return EditableTextBase;
}(editable_text_base_common_1.EditableTextBase);

exports.EditableTextBase = EditableTextBase;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/enums/enums.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var KeyboardType;

(function (KeyboardType) {
  KeyboardType.datetime = "datetime";
  KeyboardType.phone = "phone";
  KeyboardType.number = "number";
  KeyboardType.url = "url";
  KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));

var ReturnKeyType;

(function (ReturnKeyType) {
  ReturnKeyType.done = "done";
  ReturnKeyType.next = "next";
  ReturnKeyType.go = "go";
  ReturnKeyType.search = "search";
  ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));

var TextAlignment;

(function (TextAlignment) {
  TextAlignment.left = "left";
  TextAlignment.center = "center";
  TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));

var TextDecoration;

(function (TextDecoration) {
  TextDecoration.none = "none";
  TextDecoration.underline = "underline";
  TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));

var TextTransform;

(function (TextTransform) {
  TextTransform.none = "none";
  TextTransform.capitalize = "capitalize";
  TextTransform.uppercase = "uppercase";
  TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));

var WhiteSpace;

(function (WhiteSpace) {
  WhiteSpace.normal = "normal";
  WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));

var Orientation;

(function (Orientation) {
  Orientation.horizontal = "horizontal";
  Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));

var DeviceOrientation;

(function (DeviceOrientation) {
  DeviceOrientation.portrait = "portrait";
  DeviceOrientation.landscape = "landscape";
  DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));

var HorizontalAlignment;

(function (HorizontalAlignment) {
  HorizontalAlignment.left = "left";
  HorizontalAlignment.center = "center";
  HorizontalAlignment.right = "right";
  HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));

var VerticalAlignment;

(function (VerticalAlignment) {
  VerticalAlignment.top = "top";
  VerticalAlignment.middle = "middle";
  VerticalAlignment.bottom = "bottom";
  VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));

var Stretch;

(function (Stretch) {
  Stretch.none = "none";
  Stretch.aspectFill = "aspectFill";
  Stretch.aspectFit = "aspectFit";
  Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));

var Visibility;

(function (Visibility) {
  Visibility.visible = "visible";
  Visibility.collapse = "collapse";
  Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));

var FontAttributes;

(function (FontAttributes) {
  FontAttributes.Normal = 0;
  FontAttributes.Bold = 1;
  FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));

var DeviceType;

(function (DeviceType) {
  DeviceType.Phone = "Phone";
  DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));

var UpdateTextTrigger;

(function (UpdateTextTrigger) {
  UpdateTextTrigger.focusLost = "focusLost";
  UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));

var Accuracy;

(function (Accuracy) {
  Accuracy.any = 300;
  Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));

var Dock;

(function (Dock) {
  Dock.left = "left";
  Dock.top = "top";
  Dock.right = "right";
  Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));

var AutocapitalizationType;

(function (AutocapitalizationType) {
  AutocapitalizationType.none = "none";
  AutocapitalizationType.words = "words";
  AutocapitalizationType.sentences = "sentences";
  AutocapitalizationType.allCharacters = "allcharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));

var NavigationBarVisibility;

(function (NavigationBarVisibility) {
  NavigationBarVisibility.auto = "auto";
  NavigationBarVisibility.never = "never";
  NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));

var AndroidActionBarIconVisibility;

(function (AndroidActionBarIconVisibility) {
  AndroidActionBarIconVisibility.auto = "auto";
  AndroidActionBarIconVisibility.never = "never";
  AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));

var AndroidActionItemPosition;

(function (AndroidActionItemPosition) {
  AndroidActionItemPosition.actionBar = "actionBar";
  AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
  AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));

var IOSActionItemPosition;

(function (IOSActionItemPosition) {
  IOSActionItemPosition.left = "left";
  IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));

var ImageFormat;

(function (ImageFormat) {
  ImageFormat.png = "png";
  ImageFormat.jpeg = "jpeg";
  ImageFormat.jpg = "jpg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));

var FontStyle;

(function (FontStyle) {
  FontStyle.normal = "normal";
  FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));

var FontWeight;

(function (FontWeight) {
  FontWeight.thin = "100";
  FontWeight.extraLight = "200";
  FontWeight.light = "300";
  FontWeight.normal = "normal";
  FontWeight.medium = "500";
  FontWeight.semiBold = "600";
  FontWeight.bold = "bold";
  FontWeight.extraBold = "800";
  FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));

var BackgroundRepeat;

(function (BackgroundRepeat) {
  BackgroundRepeat.repeat = "repeat";
  BackgroundRepeat.repeatX = "repeat-x";
  BackgroundRepeat.repeatY = "repeat-y";
  BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));

var animationModule;
var AnimationCurve;

(function (AnimationCurve) {
  AnimationCurve.ease = "ease";
  AnimationCurve.easeIn = "easeIn";
  AnimationCurve.easeOut = "easeOut";
  AnimationCurve.easeInOut = "easeInOut";
  AnimationCurve.linear = "linear";
  AnimationCurve.spring = "spring";

  function cubicBezier(x1, y1, x2, y2) {
    animationModule = animationModule || __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");
    return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
  }

  AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));

var StatusBarStyle;

(function (StatusBarStyle) {
  StatusBarStyle.light = "light";
  StatusBarStyle.dark = "dark";
})(StatusBarStyle = exports.StatusBarStyle || (exports.StatusBarStyle = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/fragment.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var frame_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var FragmentClass = function (_super) {
  __extends(FragmentClass, _super);

  function FragmentClass() {
    var _this = _super.call(this) || this;

    return global.__native(_this);
  }

  FragmentClass.prototype.onHiddenChanged = function (hidden) {
    this._callbacks.onHiddenChanged(this, hidden, _super.prototype.onHiddenChanged);
  };

  FragmentClass.prototype.onCreateAnimator = function (transit, enter, nextAnim) {
    return this._callbacks.onCreateAnimator(this, transit, enter, nextAnim, _super.prototype.onCreateAnimator);
  };

  FragmentClass.prototype.onStop = function () {
    this._callbacks.onStop(this, _super.prototype.onStop);
  };

  FragmentClass.prototype.onCreate = function (savedInstanceState) {
    if (!this._callbacks) {
      frame_1.setFragmentCallbacks(this);
    }

    this.setHasOptionsMenu(true);

    this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
  };

  FragmentClass.prototype.onCreateView = function (inflater, container, savedInstanceState) {
    var result = this._callbacks.onCreateView(this, inflater, container, savedInstanceState, _super.prototype.onCreateView);

    return result;
  };

  FragmentClass.prototype.onSaveInstanceState = function (outState) {
    this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
  };

  FragmentClass.prototype.onDestroyView = function () {
    this._callbacks.onDestroyView(this, _super.prototype.onDestroyView);
  };

  FragmentClass.prototype.onDestroy = function () {
    this._callbacks.onDestroy(this, _super.prototype.onDestroy);
  };

  FragmentClass.prototype.toString = function () {
    var callbacks = this._callbacks;

    if (callbacks) {
      return callbacks.toStringOverride(this, _super.prototype.toString);
    } else {
      _super.prototype.toString.call(this);
    }
  };

  FragmentClass = __decorate([JavaProxy("com.tns.FragmentClass")], FragmentClass);
  return FragmentClass;
}(org.nativescript.widgets.FragmentBase);

frame_1.setFragmentClass(FragmentClass);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/fragment.transitions.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var slide_transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/slide-transition.js");

var fade_transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/fade-transition.js");

var flip_transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/flip-transition.js");

var animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var lazy_1 = __webpack_require__("../node_modules/tns-core-modules/utils/lazy.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var sdkVersion = lazy_1.default(function () {
  return parseInt(platform_1.device.sdkVersion);
});
var intEvaluator = lazy_1.default(function () {
  return new android.animation.IntEvaluator();
});
var defaultInterpolator = lazy_1.default(function () {
  return new android.view.animation.AccelerateDecelerateInterpolator();
});
exports.waitingQueue = new Map();
exports.completedEntries = new Map();
var TransitionListener;
var AnimationListener;

function _setAndroidFragmentTransitions(animated, navigationTransition, currentEntry, newEntry, fragmentTransaction, frameId) {
  var currentFragment = currentEntry ? currentEntry.fragment : null;
  var newFragment = newEntry.fragment;
  var entries = exports.waitingQueue.get(frameId);

  if (entries && entries.size > 0) {
    throw new Error("Calling navigation before previous navigation finish.");
  }

  if (sdkVersion() >= 21) {
    allowTransitionOverlap(currentFragment);
    allowTransitionOverlap(newFragment);
  }

  var name = "";
  var transition;

  if (navigationTransition) {
    transition = navigationTransition.instance;
    name = navigationTransition.name ? navigationTransition.name.toLowerCase() : "";
  }

  var useLollipopTransition = !!(name && (name.indexOf("slide") === 0 || name === "fade" || name === "explode") && sdkVersion() >= 21);

  if (currentFragment && currentFragment.getChildFragmentManager() && currentFragment.getChildFragmentManager().getFragments().toArray().length > 0) {
    useLollipopTransition = false;
  }

  if (!animated) {
    name = "none";
  } else if (transition) {
    name = "custom";
    useLollipopTransition = false;
  } else if (!useLollipopTransition && name.indexOf("slide") !== 0 && name !== "fade" && name.indexOf("flip") !== 0) {
    name = "default";
  }

  var currentFragmentNeedsDifferentAnimation = false;

  if (currentEntry) {
    _updateTransitions(currentEntry);

    if (currentEntry.transitionName !== name || currentEntry.transition !== transition || !useLollipopTransition) {
      clearExitAndReenterTransitions(currentEntry, true);
      currentFragmentNeedsDifferentAnimation = true;
    }
  }

  if (name === "none") {
    transition = new NoTransition(0, null);
  } else if (name === "default") {
    transition = new fade_transition_1.FadeTransition(150, null);
  } else if (useLollipopTransition) {
    if (name.indexOf("slide") === 0) {
      setupNewFragmentSlideTransition(navigationTransition, newEntry, name);

      if (currentFragmentNeedsDifferentAnimation) {
        setupCurrentFragmentSlideTransition(navigationTransition, currentEntry, name);
      }
    } else if (name === "fade") {
      setupNewFragmentFadeTransition(navigationTransition, newEntry);

      if (currentFragmentNeedsDifferentAnimation) {
        setupCurrentFragmentFadeTransition(navigationTransition, currentEntry);
      }
    } else if (name === "explode") {
      setupNewFragmentExplodeTransition(navigationTransition, newEntry);

      if (currentFragmentNeedsDifferentAnimation) {
        setupCurrentFragmentExplodeTransition(navigationTransition, currentEntry);
      }
    }
  } else if (name.indexOf("slide") === 0) {
    var direction = name.substr("slide".length) || "left";
    transition = new slide_transition_1.SlideTransition(direction, navigationTransition.duration, navigationTransition.curve);
  } else if (name === "fade") {
    transition = new fade_transition_1.FadeTransition(navigationTransition.duration, navigationTransition.curve);
  } else if (name.indexOf("flip") === 0) {
    var direction = name.substr("flip".length) || "right";
    transition = new flip_transition_1.FlipTransition(direction, navigationTransition.duration, navigationTransition.curve);
  }

  newEntry.transitionName = name;

  if (name === "custom") {
    newEntry.transition = transition;
  }

  if (transition) {
    fragmentTransaction.setCustomAnimations(-10, -20);
    setupAllAnimation(newEntry, transition);

    if (currentFragmentNeedsDifferentAnimation) {
      setupExitAndPopEnterAnimation(currentEntry, transition);
    }
  }

  if (currentEntry) {
    currentEntry.transitionName = name;

    if (name === "custom") {
      currentEntry.transition = transition;
    }
  }

  setupDefaultAnimations(newEntry, new fade_transition_1.FadeTransition(150, null));
  printTransitions(currentEntry);
  printTransitions(newEntry);
}

exports._setAndroidFragmentTransitions = _setAndroidFragmentTransitions;

function _onFragmentCreateAnimator(entry, fragment, nextAnim, enter) {
  var animator;

  switch (nextAnim) {
    case -10:
      animator = entry.enterAnimator;
      break;

    case -20:
      animator = entry.exitAnimator;
      break;

    case -30:
      animator = entry.popEnterAnimator;
      break;

    case -40:
      animator = entry.popExitAnimator;
      break;
  }

  if (!animator && sdkVersion() >= 21) {
    var view = fragment.getView();
    var jsParent = entry.resolvedPage.parent;
    var parent_1 = view.getParent() || jsParent && jsParent.nativeViewProtected;

    var animatedEntries = _getAnimatedEntries(entry.frameId);

    if (!animatedEntries || !animatedEntries.has(entry)) {
      if (parent_1 && !parent_1.isLaidOut()) {
        animator = enter ? entry.defaultEnterAnimator : entry.defaultExitAnimator;
      }
    }
  }

  return animator;
}

exports._onFragmentCreateAnimator = _onFragmentCreateAnimator;

function _getAnimatedEntries(frameId) {
  return exports.waitingQueue.get(frameId);
}

exports._getAnimatedEntries = _getAnimatedEntries;

function _updateTransitions(entry) {
  var fragment = entry.fragment;
  var enterTransitionListener = entry.enterTransitionListener;

  if (enterTransitionListener) {
    fragment.setEnterTransition(enterTransitionListener.transition);
  }

  var exitTransitionListener = entry.exitTransitionListener;

  if (exitTransitionListener) {
    fragment.setExitTransition(exitTransitionListener.transition);
  }

  var reenterTransitionListener = entry.reenterTransitionListener;

  if (reenterTransitionListener) {
    fragment.setReenterTransition(reenterTransitionListener.transition);
  }

  var returnTransitionListener = entry.returnTransitionListener;

  if (returnTransitionListener) {
    fragment.setReturnTransition(returnTransitionListener.transition);
  }
}

exports._updateTransitions = _updateTransitions;

function _reverseTransitions(previousEntry, currentEntry) {
  var previousFragment = previousEntry.fragment;
  var currentFragment = currentEntry.fragment;
  var transitionUsed = false;

  if (sdkVersion() >= 21) {
    var returnTransitionListener = currentEntry.returnTransitionListener;

    if (returnTransitionListener) {
      transitionUsed = true;
      currentFragment.setExitTransition(returnTransitionListener.transition);
    } else {
      currentFragment.setExitTransition(null);
    }

    var reenterTransitionListener = previousEntry.reenterTransitionListener;

    if (reenterTransitionListener) {
      transitionUsed = true;
      previousFragment.setEnterTransition(reenterTransitionListener.transition);
    } else {
      previousFragment.setEnterTransition(null);
    }
  }

  return transitionUsed;
}

exports._reverseTransitions = _reverseTransitions;

function getTransitionListener(entry, transition) {
  if (!TransitionListener) {
    var TransitionListenerImpl = function (_super) {
      __extends(TransitionListenerImpl, _super);

      function TransitionListenerImpl(entry, transition) {
        var _this = _super.call(this) || this;

        _this.entry = entry;
        _this.transition = transition;
        return global.__native(_this);
      }

      TransitionListenerImpl.prototype.onTransitionStart = function (transition) {
        var entry = this.entry;
        addToWaitingQueue(entry);

        if (trace_1.isEnabled()) {
          trace_1.write("START " + toShortString(transition) + " transition for " + entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      TransitionListenerImpl.prototype.onTransitionEnd = function (transition) {
        var entry = this.entry;

        if (trace_1.isEnabled()) {
          trace_1.write("END " + toShortString(transition) + " transition for " + entry.fragmentTag, trace_1.categories.Transition);
        }

        transitionOrAnimationCompleted(entry);
      };

      TransitionListenerImpl.prototype.onTransitionResume = function (transition) {
        if (trace_1.isEnabled()) {
          var fragment = this.entry.fragmentTag;
          trace_1.write("RESUME " + toShortString(transition) + " transition for " + fragment, trace_1.categories.Transition);
        }
      };

      TransitionListenerImpl.prototype.onTransitionPause = function (transition) {
        if (trace_1.isEnabled()) {
          trace_1.write("PAUSE " + toShortString(transition) + " transition for " + this.entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      TransitionListenerImpl.prototype.onTransitionCancel = function (transition) {
        if (trace_1.isEnabled()) {
          trace_1.write("CANCEL " + toShortString(transition) + " transition for " + this.entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      TransitionListenerImpl = __decorate([Interfaces([android.transition.Transition.TransitionListener])], TransitionListenerImpl);
      return TransitionListenerImpl;
    }(java.lang.Object);

    TransitionListener = TransitionListenerImpl;
  }

  return new TransitionListener(entry, transition);
}

function getAnimationListener() {
  if (!AnimationListener) {
    var AnimationListenerImpl = function (_super) {
      __extends(AnimationListenerImpl, _super);

      function AnimationListenerImpl() {
        var _this = _super.call(this) || this;

        return global.__native(_this);
      }

      AnimationListenerImpl.prototype.onAnimationStart = function (animator) {
        var entry = animator.entry;
        addToWaitingQueue(entry);

        if (trace_1.isEnabled()) {
          trace_1.write("START " + animator.transitionType + " for " + entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      AnimationListenerImpl.prototype.onAnimationRepeat = function (animator) {
        if (trace_1.isEnabled()) {
          trace_1.write("REPEAT " + animator.transitionType + " for " + animator.entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      AnimationListenerImpl.prototype.onAnimationEnd = function (animator) {
        if (trace_1.isEnabled()) {
          trace_1.write("END " + animator.transitionType + " for " + animator.entry.fragmentTag, trace_1.categories.Transition);
        }

        transitionOrAnimationCompleted(animator.entry);
      };

      AnimationListenerImpl.prototype.onAnimationCancel = function (animator) {
        if (trace_1.isEnabled()) {
          trace_1.write("CANCEL " + animator.transitionType + " for " + animator.entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      AnimationListenerImpl = __decorate([Interfaces([android.animation.Animator.AnimatorListener])], AnimationListenerImpl);
      return AnimationListenerImpl;
    }(java.lang.Object);

    AnimationListener = new AnimationListenerImpl();
  }

  return AnimationListener;
}

function addToWaitingQueue(entry) {
  var frameId = entry.frameId;
  var entries = exports.waitingQueue.get(frameId);

  if (!entries) {
    entries = new Set();
    exports.waitingQueue.set(frameId, entries);
  }

  entries.add(entry);
}

function clearAnimationListener(animator, listener) {
  if (!animator) {
    return;
  }

  animator.removeListener(listener);

  if (animator.entry && trace_1.isEnabled()) {
    var entry = animator.entry;
    trace_1.write("Clear " + animator.transitionType + " - " + entry.transition + " for " + entry.fragmentTag, trace_1.categories.Transition);
  }

  animator.entry = null;
}

function clearExitAndReenterTransitions(entry, removeListener) {
  if (sdkVersion() >= 21) {
    var fragment = entry.fragment;
    var exitListener = entry.exitTransitionListener;

    if (exitListener) {
      var exitTransition = fragment.getExitTransition();

      if (exitTransition) {
        if (removeListener) {
          exitTransition.removeListener(exitListener);
        }

        fragment.setExitTransition(null);

        if (trace_1.isEnabled()) {
          trace_1.write("Cleared Exit " + exitTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
        }
      }

      if (removeListener) {
        entry.exitTransitionListener = null;
      }
    }

    var reenterListener = entry.reenterTransitionListener;

    if (reenterListener) {
      var reenterTransition = fragment.getReenterTransition();

      if (reenterTransition) {
        if (removeListener) {
          reenterTransition.removeListener(reenterListener);
        }

        fragment.setReenterTransition(null);

        if (trace_1.isEnabled()) {
          trace_1.write("Cleared Reenter " + reenterTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
        }
      }

      if (removeListener) {
        entry.reenterTransitionListener = null;
      }
    }
  }
}

function _clearFragment(entry) {
  clearEntry(entry, false);
}

exports._clearFragment = _clearFragment;

function _clearEntry(entry) {
  clearEntry(entry, true);
}

exports._clearEntry = _clearEntry;

function clearEntry(entry, removeListener) {
  clearExitAndReenterTransitions(entry, removeListener);

  if (sdkVersion() >= 21) {
    var fragment = entry.fragment;
    var enterListener = entry.enterTransitionListener;

    if (enterListener) {
      var enterTransition = fragment.getEnterTransition();

      if (enterTransition) {
        if (removeListener) {
          enterTransition.removeListener(enterListener);
        }

        fragment.setEnterTransition(null);

        if (trace_1.isEnabled()) {
          trace_1.write("Cleared Enter " + enterTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
        }
      }

      if (removeListener) {
        entry.enterTransitionListener = null;
      }
    }

    var returnListener = entry.returnTransitionListener;

    if (returnListener) {
      var returnTransition = fragment.getReturnTransition();

      if (returnTransition) {
        if (removeListener) {
          returnTransition.removeListener(returnListener);
        }

        fragment.setReturnTransition(null);

        if (trace_1.isEnabled()) {
          trace_1.write("Cleared Return " + returnTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
        }
      }

      if (removeListener) {
        entry.returnTransitionListener = null;
      }
    }
  }

  if (removeListener) {
    var listener = getAnimationListener();
    clearAnimationListener(entry.enterAnimator, listener);
    clearAnimationListener(entry.exitAnimator, listener);
    clearAnimationListener(entry.popEnterAnimator, listener);
    clearAnimationListener(entry.popExitAnimator, listener);
  }
}

function allowTransitionOverlap(fragment) {
  if (fragment) {
    fragment.setAllowEnterTransitionOverlap(true);
    fragment.setAllowReturnTransitionOverlap(true);
  }
}

function setEnterTransition(navigationTransition, entry, transition) {
  setUpNativeTransition(navigationTransition, transition);
  var listener = addNativeTransitionListener(entry, transition);
  entry.enterTransitionListener = listener;
  var fragment = entry.fragment;
  fragment.setEnterTransition(transition);
}

function setExitTransition(navigationTransition, entry, transition) {
  setUpNativeTransition(navigationTransition, transition);
  var listener = addNativeTransitionListener(entry, transition);
  entry.exitTransitionListener = listener;
  var fragment = entry.fragment;
  fragment.setExitTransition(transition);
}

function setReenterTransition(navigationTransition, entry, transition) {
  setUpNativeTransition(navigationTransition, transition);
  var listener = addNativeTransitionListener(entry, transition);
  entry.reenterTransitionListener = listener;
  var fragment = entry.fragment;
  fragment.setReenterTransition(transition);
}

function setReturnTransition(navigationTransition, entry, transition) {
  setUpNativeTransition(navigationTransition, transition);
  var listener = addNativeTransitionListener(entry, transition);
  entry.returnTransitionListener = listener;
  var fragment = entry.fragment;
  fragment.setReturnTransition(transition);
}

function setupNewFragmentSlideTransition(navTransition, entry, name) {
  setupCurrentFragmentSlideTransition(navTransition, entry, name);
  var direction = name.substr("slide".length) || "left";

  switch (direction) {
    case "left":
      setEnterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.RIGHT));
      setReturnTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.RIGHT));
      break;

    case "right":
      setEnterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.LEFT));
      setReturnTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.LEFT));
      break;

    case "top":
      setEnterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.BOTTOM));
      setReturnTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.BOTTOM));
      break;

    case "bottom":
      setEnterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.TOP));
      setReturnTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.TOP));
      break;
  }
}

function setupCurrentFragmentSlideTransition(navTransition, entry, name) {
  var direction = name.substr("slide".length) || "left";

  switch (direction) {
    case "left":
      setExitTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.LEFT));
      setReenterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.LEFT));
      break;

    case "right":
      setExitTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.RIGHT));
      setReenterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.RIGHT));
      break;

    case "top":
      setExitTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.TOP));
      setReenterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.TOP));
      break;

    case "bottom":
      setExitTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.BOTTOM));
      setReenterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.BOTTOM));
      break;
  }
}

function setupNewFragmentFadeTransition(navTransition, entry) {
  setupCurrentFragmentFadeTransition(navTransition, entry);
  var fadeInEnter = new android.transition.Fade(android.transition.Fade.IN);
  setEnterTransition(navTransition, entry, fadeInEnter);
  var fadeOutReturn = new android.transition.Fade(android.transition.Fade.OUT);
  setReturnTransition(navTransition, entry, fadeOutReturn);
}

function setupCurrentFragmentFadeTransition(navTransition, entry) {
  var fadeOutExit = new android.transition.Fade(android.transition.Fade.OUT);
  setExitTransition(navTransition, entry, fadeOutExit);
  var fadeInReenter = new android.transition.Fade(android.transition.Fade.IN);
  setReenterTransition(navTransition, entry, fadeInReenter);
}

function setupCurrentFragmentExplodeTransition(navTransition, entry) {
  setExitTransition(navTransition, entry, new android.transition.Explode());
  setReenterTransition(navTransition, entry, new android.transition.Explode());
}

function setupNewFragmentExplodeTransition(navTransition, entry) {
  setupCurrentFragmentExplodeTransition(navTransition, entry);
  setEnterTransition(navTransition, entry, new android.transition.Explode());
  setReturnTransition(navTransition, entry, new android.transition.Explode());
}

function setupExitAndPopEnterAnimation(entry, transition) {
  var listener = getAnimationListener();
  clearAnimationListener(entry.exitAnimator, listener);
  clearAnimationListener(entry.popEnterAnimator, listener);
  var exitAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.exit);
  exitAnimator.transitionType = transition_1.AndroidTransitionType.exit;
  exitAnimator.entry = entry;
  exitAnimator.addListener(listener);
  entry.exitAnimator = exitAnimator;
  var popEnterAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.popEnter);
  popEnterAnimator.transitionType = transition_1.AndroidTransitionType.popEnter;
  popEnterAnimator.entry = entry;
  popEnterAnimator.addListener(listener);
  entry.popEnterAnimator = popEnterAnimator;
}

function setupAllAnimation(entry, transition) {
  setupExitAndPopEnterAnimation(entry, transition);
  var listener = getAnimationListener();
  var enterAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.enter);
  enterAnimator.transitionType = transition_1.AndroidTransitionType.enter;
  enterAnimator.entry = entry;
  enterAnimator.addListener(listener);
  entry.enterAnimator = enterAnimator;
  var popExitAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.popExit);
  popExitAnimator.transitionType = transition_1.AndroidTransitionType.popExit;
  popExitAnimator.entry = entry;
  popExitAnimator.addListener(listener);
  entry.popExitAnimator = popExitAnimator;
}

function setupDefaultAnimations(entry, transition) {
  var listener = getAnimationListener();
  var enterAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.enter);
  enterAnimator.transitionType = transition_1.AndroidTransitionType.enter;
  enterAnimator.entry = entry;
  enterAnimator.addListener(listener);
  entry.defaultEnterAnimator = enterAnimator;
  var exitAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.exit);
  exitAnimator.transitionType = transition_1.AndroidTransitionType.exit;
  exitAnimator.entry = entry;
  exitAnimator.addListener(listener);
  entry.defaultExitAnimator = exitAnimator;
}

function setUpNativeTransition(navigationTransition, nativeTransition) {
  if (navigationTransition.duration) {
    nativeTransition.setDuration(navigationTransition.duration);
  }

  var interpolator = navigationTransition.curve ? animation_1._resolveAnimationCurve(navigationTransition.curve) : defaultInterpolator();
  nativeTransition.setInterpolator(interpolator);
}

function addNativeTransitionListener(entry, nativeTransition) {
  var listener = getTransitionListener(entry, nativeTransition);
  nativeTransition.addListener(listener);
  return listener;
}

function transitionOrAnimationCompleted(entry) {
  var frameId = entry.frameId;
  var entries = exports.waitingQueue.get(frameId);

  if (!entries) {
    return;
  }

  entries.delete(entry);

  if (entries.size === 0) {
    var frame_1 = entry.resolvedPage.frame;
    var previousCompletedAnimationEntry = exports.completedEntries.get(frameId);
    exports.completedEntries.delete(frameId);
    exports.waitingQueue.delete(frameId);
    var current_1 = frame_1.isCurrent(entry) ? previousCompletedAnimationEntry : entry;
    current_1 = current_1 || entry;

    if (current_1) {
      var isBack_1 = frame_1._isBack;
      setTimeout(function () {
        return frame_1.setCurrent(current_1, isBack_1);
      });
    }
  } else {
    exports.completedEntries.set(frameId, entry);
  }
}

function toShortString(nativeTransition) {
  return nativeTransition.getClass().getSimpleName() + "@" + nativeTransition.hashCode().toString(16);
}

function printTransitions(entry) {
  if (entry && trace_1.isEnabled()) {
    var result = entry.fragmentTag + " Transitions:";

    if (entry.transitionName) {
      result += "transitionName=" + entry.transitionName + ", ";
    }

    if (entry.transition) {
      result += "enterAnimator=" + entry.enterAnimator + ", ";
      result += "exitAnimator=" + entry.exitAnimator + ", ";
      result += "popEnterAnimator=" + entry.popEnterAnimator + ", ";
      result += "popExitAnimator=" + entry.popExitAnimator + ", ";
    }

    if (sdkVersion() >= 21) {
      var fragment = entry.fragment;
      result += "" + (fragment.getEnterTransition() ? " enter=" + toShortString(fragment.getEnterTransition()) : "");
      result += "" + (fragment.getExitTransition() ? " exit=" + toShortString(fragment.getExitTransition()) : "");
      result += "" + (fragment.getReenterTransition() ? " popEnter=" + toShortString(fragment.getReenterTransition()) : "");
      result += "" + (fragment.getReturnTransition() ? " popExit=" + toShortString(fragment.getReturnTransition()) : "");
    }

    trace_1.write(result, trace_1.categories.Transition);
  }
}

function javaObjectArray() {
  var params = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    params[_i] = arguments[_i];
  }

  var nativeArray = Array.create(java.lang.Object, params.length);
  params.forEach(function (value, i) {
    return nativeArray[i] = value;
  });
  return nativeArray;
}

function createDummyZeroDurationAnimator() {
  var animator = android.animation.ValueAnimator.ofObject(intEvaluator(), javaObjectArray(java.lang.Integer.valueOf(0), java.lang.Integer.valueOf(1)));
  animator.setDuration(0);
  return animator;
}

var NoTransition = function (_super) {
  __extends(NoTransition, _super);

  function NoTransition() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoTransition.prototype.createAndroidAnimator = function (transitionType) {
    return createDummyZeroDurationAnimator();
  };

  return NoTransition;
}(transition_1.Transition);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js");

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var frame_stack_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-stack.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

function buildEntryFromArgs(arg) {
  var entry;

  if (typeof arg === "string") {
    entry = {
      moduleName: arg
    };
  } else if (typeof arg === "function") {
    entry = {
      create: arg
    };
  } else {
    entry = arg;
  }

  return entry;
}

var FrameBase = function (_super) {
  __extends(FrameBase, _super);

  function FrameBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._backStack = new Array();
    _this._navigationQueue = new Array();
    _this._isInFrameStack = false;
    return _this;
  }

  FrameBase_1 = FrameBase;

  FrameBase.prototype._addChildFromBuilder = function (name, value) {
    throw new Error("Frame should not have a view. Use 'defaultPage' property instead.");
  };

  FrameBase.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype.canGoBack = function () {
    var _this = this;

    var backstack = this._backStack.length;
    var previousForwardNotInBackstack = false;

    this._navigationQueue.forEach(function (item) {
      var entry = item.entry;

      if (item.isBackNavigation) {
        previousForwardNotInBackstack = false;

        if (!entry) {
          backstack--;
        } else {
          var backstackIndex = _this._backStack.indexOf(entry);

          if (backstackIndex !== -1) {
            backstack = backstackIndex;
          } else {
            backstack--;
          }
        }
      } else if (entry.entry.clearHistory) {
        previousForwardNotInBackstack = false;
        backstack = 0;
      } else {
        backstack++;

        if (previousForwardNotInBackstack) {
          backstack--;
        }

        previousForwardNotInBackstack = entry.entry.backstackVisible === false;
      }
    });

    if (this._navigationQueue.length > 0 && !this._currentEntry) {
      backstack--;
    }

    return backstack > 0;
  };

  FrameBase.prototype.goBack = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("GO BACK", view_1.traceCategories.Navigation);
    }

    if (!this.canGoBack()) {
      return;
    }

    if (backstackEntry) {
      var index_1 = this._backStack.indexOf(backstackEntry);

      if (index_1 < 0) {
        return;
      }
    }

    var navigationContext = {
      entry: backstackEntry,
      isBackNavigation: true
    };

    this._navigationQueue.push(navigationContext);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype._removeEntry = function (removed) {
    var page = removed.resolvedPage;
    var frame = page.frame;
    page._frame = null;

    if (frame) {
      frame._removeView(page);
    } else {
      page._tearDownUI(true);
    }
  };

  FrameBase.prototype.navigate = function (param) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("NAVIGATE", view_1.traceCategories.Navigation);
    }

    var entry = buildEntryFromArgs(param);
    var page = builder_1.createViewFromEntry(entry);

    this._pushInFrameStack();

    var backstackEntry = {
      entry: entry,
      resolvedPage: page,
      navDepth: undefined,
      fragmentTag: undefined
    };
    var navigationContext = {
      entry: backstackEntry,
      isBackNavigation: false
    };

    this._navigationQueue.push(navigationContext);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype.isCurrent = function (entry) {
    return this._currentEntry === entry;
  };

  FrameBase.prototype.setCurrent = function (entry, isBack) {
    var newPage = entry.resolvedPage;

    if (!newPage.frame) {
      this._addView(newPage);

      newPage._frame = this;
    }

    this._currentEntry = entry;

    if (isBack) {
      this._pushInFrameStack();
    }

    newPage.onNavigatedTo(isBack);
    this._executingEntry = null;
  };

  FrameBase.prototype._updateBackstack = function (entry, isBack) {
    var _this = this;

    this.raiseCurrentPageNavigatedEvents(isBack);
    var current = this._currentEntry;

    if (isBack) {
      var index_2 = this._backStack.indexOf(entry);

      this._backStack.splice(index_2 + 1).forEach(function (e) {
        return _this._removeEntry(e);
      });

      this._backStack.pop();
    } else {
      if (entry.entry.clearHistory) {
        this._backStack.forEach(function (e) {
          return _this._removeEntry(e);
        });

        this._backStack.length = 0;
      } else if (FrameBase_1._isEntryBackstackVisible(current)) {
        this._backStack.push(current);
      }
    }

    if (current && this._backStack.indexOf(current) < 0) {
      this._removeEntry(current);
    }
  };

  FrameBase.prototype.isNestedWithin = function (parentFrameCandidate) {
    var frameAncestor = this;

    while (frameAncestor) {
      frameAncestor = view_common_1.getAncestor(frameAncestor, FrameBase_1);

      if (frameAncestor === parentFrameCandidate) {
        return true;
      }
    }

    return false;
  };

  FrameBase.prototype.raiseCurrentPageNavigatedEvents = function (isBack) {
    var page = this.currentPage;

    if (page) {
      if (page.isLoaded) {
        page.callUnloaded();
      }

      page.onNavigatedFrom(isBack);
    }
  };

  FrameBase.prototype._processNavigationQueue = function (page) {
    if (this._navigationQueue.length === 0) {
      return;
    }

    var entry = this._navigationQueue[0].entry;
    var currentNavigationPage = entry.resolvedPage;

    if (page !== currentNavigationPage) {
      return;
    }

    this._navigationQueue.shift();

    this._processNextNavigationEntry();

    this._updateActionBar();
  };

  FrameBase.prototype._findEntryForTag = function (fragmentTag) {
    var entry;

    if (this._currentEntry && this._currentEntry.fragmentTag === fragmentTag) {
      entry = this._currentEntry;
    } else {
      entry = this._backStack.find(function (value) {
        return value.fragmentTag === fragmentTag;
      });

      if (!entry) {
        var navigationItem = this._navigationQueue.find(function (value) {
          return value.entry.fragmentTag === fragmentTag;
        });

        entry = navigationItem ? navigationItem.entry : undefined;
      }
    }

    return entry;
  };

  FrameBase.prototype.navigationQueueIsEmpty = function () {
    return this._navigationQueue.length === 0;
  };

  FrameBase._isEntryBackstackVisible = function (entry) {
    if (!entry) {
      return false;
    }

    var backstackVisibleValue = entry.entry.backstackVisible;
    var backstackHidden = backstackVisibleValue !== undefined && !backstackVisibleValue;
    return !backstackHidden;
  };

  FrameBase.prototype._updateActionBar = function (page, disableNavBarAnimation) {};

  FrameBase.prototype._processNextNavigationEntry = function () {
    if (!this.isLoaded || this._executingEntry) {
      return;
    }

    if (this._navigationQueue.length > 0) {
      var navigationContext = this._navigationQueue[0];

      if (navigationContext.isBackNavigation) {
        this.performGoBack(navigationContext);
      } else {
        this.performNavigation(navigationContext);
      }
    }
  };

  FrameBase.prototype.performNavigation = function (navigationContext) {
    var navContext = navigationContext.entry;
    this._executingEntry = navContext;

    this._onNavigatingTo(navContext, navigationContext.isBackNavigation);

    this._navigateCore(navContext);
  };

  FrameBase.prototype.performGoBack = function (navigationContext) {
    var backstackEntry = navigationContext.entry;
    var backstack = this._backStack;

    if (!backstackEntry) {
      backstackEntry = backstack[backstack.length - 1];
      navigationContext.entry = backstackEntry;
    }

    this._executingEntry = backstackEntry;

    this._onNavigatingTo(backstackEntry, true);

    this._goBackCore(backstackEntry);
  };

  FrameBase.prototype._goBackCore = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("GO BACK CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
    }
  };

  FrameBase.prototype._navigateCore = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("NAVIGATE CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
    }
  };

  FrameBase.prototype._onNavigatingTo = function (backstackEntry, isBack) {
    if (this.currentPage) {
      this.currentPage.onNavigatingFrom(isBack);
    }

    backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack, backstackEntry.entry.bindingContext);
  };

  Object.defineProperty(FrameBase.prototype, "animated", {
    get: function () {
      return this._animated;
    },
    set: function (value) {
      this._animated = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "transition", {
    get: function () {
      return this._transition;
    },
    set: function (value) {
      this._transition = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "backStack", {
    get: function () {
      return this._backStack.slice();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "currentPage", {
    get: function () {
      if (this._currentEntry) {
        return this._currentEntry.resolvedPage;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "currentEntry", {
    get: function () {
      if (this._currentEntry) {
        return this._currentEntry.entry;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype._pushInFrameStackRecursive = function () {
    this._pushInFrameStack();

    var framesToPush = [];

    for (var _i = 0, frameStack_1 = frame_stack_1.frameStack; _i < frameStack_1.length; _i++) {
      var frame = frameStack_1[_i];

      if (frame.isNestedWithin(this)) {
        framesToPush.push(frame);
      }
    }

    for (var _a = 0, framesToPush_1 = framesToPush; _a < framesToPush_1.length; _a++) {
      var frame = framesToPush_1[_a];

      frame._pushInFrameStack();
    }
  };

  FrameBase.prototype._pushInFrameStack = function () {
    frame_stack_1._pushInFrameStack(this);
  };

  FrameBase.prototype._popFromFrameStack = function () {
    frame_stack_1._popFromFrameStack(this);
  };

  FrameBase.prototype._removeFromFrameStack = function () {
    frame_stack_1._removeFromFrameStack(this);
  };

  FrameBase.prototype._dialogClosed = function () {
    this._removeFromFrameStack();
  };

  FrameBase.prototype._onRootViewReset = function () {
    _super.prototype._onRootViewReset.call(this);

    this._removeFromFrameStack();
  };

  Object.defineProperty(FrameBase.prototype, "_childrenCount", {
    get: function () {
      if (this.currentPage) {
        return 1;
      }

      return 0;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype.eachChildView = function (callback) {
    var page = this.currentPage;

    if (page) {
      callback(page);
    }
  };

  FrameBase.prototype._getIsAnimatedNavigation = function (entry) {
    if (entry && entry.animated !== undefined) {
      return entry.animated;
    }

    if (this.animated !== undefined) {
      return this.animated;
    }

    return FrameBase_1.defaultAnimatedNavigation;
  };

  FrameBase.prototype._getNavigationTransition = function (entry) {
    if (entry) {
      if (view_1.isIOS && entry.transitioniOS !== undefined) {
        return entry.transitioniOS;
      }

      if (view_1.isAndroid && entry.transitionAndroid !== undefined) {
        return entry.transitionAndroid;
      }

      if (entry.transition !== undefined) {
        return entry.transition;
      }
    }

    if (this.transition !== undefined) {
      return this.transition;
    }

    return FrameBase_1.defaultTransition;
  };

  Object.defineProperty(FrameBase.prototype, "navigationBarHeight", {
    get: function () {
      return 0;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype._getNavBarVisible = function (page) {
    throw new Error();
  };

  FrameBase.prototype._addViewToNativeVisualTree = function (child) {
    return true;
  };

  FrameBase.prototype._removeViewFromNativeVisualTree = function (child) {
    child._isAddedToNativeVisualTree = false;
  };

  FrameBase.prototype._printFrameBackStack = function () {
    var length = this.backStack.length;
    var i = length - 1;
    console.log("Frame Back Stack: ");

    while (i >= 0) {
      var backstackEntry = this.backStack[i--];
      console.log("\t" + backstackEntry.resolvedPage);
    }
  };

  FrameBase.prototype._backstackEntryTrace = function (b) {
    var result = "" + b.resolvedPage;

    var backstackVisible = FrameBase_1._isEntryBackstackVisible(b);

    if (!backstackVisible) {
      result += " | INVISIBLE";
    }

    if (b.entry.clearHistory) {
      result += " | CLEAR HISTORY";
    }

    var animated = this._getIsAnimatedNavigation(b.entry);

    if (!animated) {
      result += " | NOT ANIMATED";
    }

    var t = this._getNavigationTransition(b.entry);

    if (t) {
      result += " | Transition[" + JSON.stringify(t) + "]";
    }

    return result;
  };

  FrameBase.prototype._onLivesync = function () {
    _super.prototype._onLivesync.call(this);

    if (!this._currentEntry || !this._currentEntry.entry) {
      return false;
    }

    var currentEntry = this._currentEntry.entry;
    var newEntry = {
      animated: false,
      clearHistory: true,
      context: currentEntry.context,
      create: currentEntry.create,
      moduleName: currentEntry.moduleName,
      backstackVisible: currentEntry.backstackVisible
    };

    if (newEntry.create) {
      var page = newEntry.create();

      if (page === this.currentPage) {
        return false;
      }
    }

    this.navigate(newEntry);
    return true;
  };

  var FrameBase_1;
  FrameBase.androidOptionSelectedEvent = "optionSelected";
  FrameBase.defaultAnimatedNavigation = true;

  __decorate([profiling_1.profile], FrameBase.prototype, "onLoaded", null);

  __decorate([profiling_1.profile], FrameBase.prototype, "performNavigation", null);

  __decorate([profiling_1.profile], FrameBase.prototype, "performGoBack", null);

  FrameBase = FrameBase_1 = __decorate([view_1.CSSType("Frame")], FrameBase);
  return FrameBase;
}(view_1.CustomLayoutView);

exports.FrameBase = FrameBase;

function getFrameById(id) {
  return frame_stack_1.frameStack.find(function (frame) {
    return frame.id && frame.id === id;
  });
}

exports.getFrameById = getFrameById;

function topmost() {
  return frame_stack_1.topmost();
}

exports.topmost = topmost;

function goBack() {
  var top = topmost();

  if (top && top.canGoBack()) {
    top.goBack();
    return true;
  } else if (top) {
    var parentFrameCanGoBack = false;
    var parentFrame = view_common_1.getAncestor(top, "Frame");

    while (parentFrame && !parentFrameCanGoBack) {
      if (parentFrame && parentFrame.canGoBack()) {
        parentFrameCanGoBack = true;
      } else {
        parentFrame = view_common_1.getAncestor(parentFrame, "Frame");
      }
    }

    if (parentFrame && parentFrameCanGoBack) {
      parentFrame.goBack();
      return true;
    }
  }

  if (frame_stack_1.frameStack.length > 1) {
    top._popFromFrameStack();
  }

  return false;
}

exports.goBack = goBack;

function stack() {
  return frame_stack_1.frameStack;
}

exports.stack = stack;
exports.defaultPage = new view_1.Property({
  name: "defaultPage",
  valueChanged: function (frame, oldValue, newValue) {
    frame.navigate({
      moduleName: newValue
    });
  }
});
exports.defaultPage.register(FrameBase);
exports.actionBarVisibilityProperty = new view_1.Property({
  name: "actionBarVisibility",
  defaultValue: "auto",
  affectsLayout: view_1.isIOS
});
exports.actionBarVisibilityProperty.register(FrameBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame-stack.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.frameStack = [];

function topmost() {
  if (exports.frameStack.length > 0) {
    return exports.frameStack[exports.frameStack.length - 1];
  }

  return undefined;
}

exports.topmost = topmost;

function _pushInFrameStack(frame) {
  if (frame._isInFrameStack && exports.frameStack[exports.frameStack.length - 1] === frame) {
    return;
  }

  if (frame._isInFrameStack) {
    var indexOfFrame = exports.frameStack.indexOf(frame);
    exports.frameStack.splice(indexOfFrame, 1);
  }

  exports.frameStack.push(frame);
  frame._isInFrameStack = true;
}

exports._pushInFrameStack = _pushInFrameStack;

function _popFromFrameStack(frame) {
  if (!frame._isInFrameStack) {
    return;
  }

  var top = topmost();

  if (top !== frame) {
    throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
  }

  exports.frameStack.pop();
  frame._isInFrameStack = false;
}

exports._popFromFrameStack = _popFromFrameStack;

function _removeFromFrameStack(frame) {
  if (!frame._isInFrameStack) {
    return;
  }

  var index = exports.frameStack.indexOf(frame);
  exports.frameStack.splice(index, 1);
  frame._isInFrameStack = false;
}

exports._removeFromFrameStack = _removeFromFrameStack;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var frame_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-common.js");

var fragment_transitions_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/fragment.transitions.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-common.js"));

var INTENT_EXTRA = "com.tns.activity";
var ROOT_VIEW_ID_EXTRA = "com.tns.activity.rootViewId";
var FRAMEID = "_frameId";
var CALLBACKS = "_callbacks";
var ownerSymbol = Symbol("_owner");
var activityRootViewsMap = new Map();
var navDepth = -1;
var fragmentId = -1;

if (global && global.__inspector) {
  var devtools = __webpack_require__("tns-core-modules/debugger/devtools-elements.js");

  devtools.attachDOMInspectorEventCallbacks(global.__inspector);
  devtools.attachDOMInspectorCommandCallbacks(global.__inspector);
}

function getAttachListener() {
  if (!exports.attachStateChangeListener) {
    var AttachListener = function (_super) {
      __extends(AttachListener, _super);

      function AttachListener() {
        var _this = _super.call(this) || this;

        return global.__native(_this);
      }

      AttachListener.prototype.onViewAttachedToWindow = function (view) {
        var owner = view[ownerSymbol];

        if (owner) {
          owner._onAttachedToWindow();
        }
      };

      AttachListener.prototype.onViewDetachedFromWindow = function (view) {
        var owner = view[ownerSymbol];

        if (owner) {
          owner._onDetachedFromWindow();
        }
      };

      AttachListener = __decorate([Interfaces([android.view.View.OnAttachStateChangeListener])], AttachListener);
      return AttachListener;
    }(java.lang.Object);

    exports.attachStateChangeListener = new AttachListener();
  }

  return exports.attachStateChangeListener;
}

function reloadPage() {
  var activity = application.android.foregroundActivity;
  var callbacks = activity[CALLBACKS];

  if (callbacks) {
    var rootView = callbacks.getRootView();

    if (!rootView || !rootView._onLivesync()) {
      callbacks.resetActivityContent(activity);
    }
  } else {
    frame_common_1.traceError(activity + "[CALLBACKS] is null or undefined");
  }
}

exports.reloadPage = reloadPage;
global.__onLiveSyncCore = reloadPage;

var Frame = function (_super) {
  __extends(Frame, _super);

  function Frame() {
    var _this = _super.call(this) || this;

    _this._containerViewId = -1;
    _this._tearDownPending = false;
    _this._attachedToWindow = false;
    _this._isBack = true;
    _this._android = new AndroidFrame(_this);
    return _this;
  }

  Object.defineProperty(Frame, "defaultAnimatedNavigation", {
    get: function () {
      return frame_common_1.FrameBase.defaultAnimatedNavigation;
    },
    set: function (value) {
      frame_common_1.FrameBase.defaultAnimatedNavigation = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame, "defaultTransition", {
    get: function () {
      return frame_common_1.FrameBase.defaultTransition;
    },
    set: function (value) {
      frame_common_1.FrameBase.defaultTransition = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame.prototype, "containerViewId", {
    get: function () {
      return this._containerViewId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame.prototype, "android", {
    get: function () {
      return this._android;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame.prototype, "_hasFragments", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  Frame.prototype._onAttachedToWindow = function () {
    _super.prototype._onAttachedToWindow.call(this);

    this._attachedToWindow = true;

    this._processNextNavigationEntry();
  };

  Frame.prototype._onDetachedFromWindow = function () {
    _super.prototype._onDetachedFromWindow.call(this);

    this._attachedToWindow = false;
  };

  Frame.prototype._processNextNavigationEntry = function () {
    if (!this.isLoaded || this._executingEntry || !this._attachedToWindow) {
      return;
    }

    var animatedEntries = fragment_transitions_1._getAnimatedEntries(this._android.frameId);

    if (animatedEntries) {
      if (animatedEntries.size > 0) {
        return;
      }
    }

    var manager = this._getFragmentManager();

    var entry = this._currentEntry;

    if (entry && manager && !manager.findFragmentByTag(entry.fragmentTag)) {
      this._cachedAnimatorState = getAnimatorState(this._currentEntry);
      this._currentEntry = null;

      this._navigateCore(entry);

      this._currentEntry = entry;
    } else {
      _super.prototype._processNextNavigationEntry.call(this);
    }
  };

  Frame.prototype._getChildFragmentManager = function () {
    var backstackEntry = this._executingEntry || this._currentEntry;

    if (backstackEntry && backstackEntry.fragment && backstackEntry.fragment.isAdded()) {
      return backstackEntry.fragment.getChildFragmentManager();
    }

    return null;
  };

  Frame.prototype._onRootViewReset = function () {
    _super.prototype._onRootViewReset.call(this);

    this.disposeCurrentFragment();
  };

  Frame.prototype.onUnloaded = function () {
    _super.prototype.onUnloaded.call(this);

    this.disposeCurrentFragment();
  };

  Frame.prototype.disposeCurrentFragment = function () {
    if (!this._currentEntry || !this._currentEntry.fragment || !this._currentEntry.fragment.isAdded()) {
      return;
    }

    var manager = this._getFragmentManager();

    var transaction = manager.beginTransaction();
    transaction.remove(this._currentEntry.fragment);
    transaction.commitNowAllowingStateLoss();
  };

  Frame.prototype.createFragment = function (backstackEntry, fragmentTag) {
    ensureFragmentClass();
    var newFragment = new fragmentClass();
    var args = new android.os.Bundle();
    args.putInt(FRAMEID, this._android.frameId);
    newFragment.setArguments(args);
    setFragmentCallbacks(newFragment);
    var callbacks = newFragment[CALLBACKS];
    callbacks.frame = this;
    callbacks.entry = backstackEntry;
    backstackEntry.fragment = newFragment;
    backstackEntry.fragmentTag = fragmentTag;
    backstackEntry.navDepth = navDepth;
    return newFragment;
  };

  Frame.prototype.setCurrent = function (entry, isBack) {
    var current = this._currentEntry;
    var currentEntryChanged = current !== entry;

    if (currentEntryChanged) {
      this._updateBackstack(entry, isBack);

      if (this._tearDownPending) {
        this._tearDownPending = false;

        if (!entry.recreated) {
          clearEntry(entry);
        }

        if (current && !current.recreated) {
          clearEntry(current);
        }

        var context_1 = this._context;

        if (context_1 && !entry.recreated) {
          entry.fragment = this.createFragment(entry, entry.fragmentTag);

          entry.resolvedPage._setupUI(context_1);
        }

        entry.recreated = false;

        if (current) {
          current.recreated = false;
        }
      }

      _super.prototype.setCurrent.call(this, entry, isBack);

      this._processNavigationQueue(entry.resolvedPage);
    } else {
      this._processNextNavigationEntry();
    }

    if (this._cachedAnimatorState) {
      restoreAnimatorState(this._currentEntry, this._cachedAnimatorState);
      this._cachedAnimatorState = null;
    }
  };

  Frame.prototype.onBackPressed = function () {
    if (this.canGoBack()) {
      this.goBack();
      return true;
    }

    if (!this.navigationQueueIsEmpty()) {
      var manager = this._getFragmentManager();

      if (manager) {
        manager.executePendingTransactions();
        return true;
      }
    }

    return false;
  };

  Frame.prototype._navigateCore = function (newEntry) {
    _super.prototype._navigateCore.call(this, newEntry);

    this._isBack = false;
    newEntry.frameId = this._android.frameId;
    var activity = this._android.activity;

    if (!activity) {
      var currentActivity = this._android.currentActivity;

      if (currentActivity) {
        startActivity(currentActivity, this._android.frameId);
      }

      return;
    }

    var manager = this._getFragmentManager();

    var clearHistory = newEntry.entry.clearHistory;
    var currentEntry = this._currentEntry;

    if (clearHistory) {
      navDepth = -1;
    }

    navDepth++;
    fragmentId++;
    var newFragmentTag = "fragment" + fragmentId + "[" + navDepth + "]";
    var newFragment = this.createFragment(newEntry, newFragmentTag);
    var transaction = manager.beginTransaction();
    var animated = currentEntry ? this._getIsAnimatedNavigation(newEntry.entry) : false;
    var navigationTransition = this._currentEntry ? this._getNavigationTransition(newEntry.entry) : null;

    fragment_transitions_1._setAndroidFragmentTransitions(animated, navigationTransition, currentEntry, newEntry, transaction, this._android.frameId);

    if (currentEntry && animated && !navigationTransition) {
      transaction.setTransition(android.support.v4.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
    }

    transaction.replace(this.containerViewId, newFragment, newFragmentTag);
    transaction.commitAllowingStateLoss();
  };

  Frame.prototype._goBackCore = function (backstackEntry) {
    this._isBack = true;

    _super.prototype._goBackCore.call(this, backstackEntry);

    navDepth = backstackEntry.navDepth;

    var manager = this._getFragmentManager();

    var transaction = manager.beginTransaction();

    if (!backstackEntry.fragment) {
      backstackEntry.fragment = this.createFragment(backstackEntry, backstackEntry.fragmentTag);

      fragment_transitions_1._updateTransitions(backstackEntry);
    }

    var transitionReversed = fragment_transitions_1._reverseTransitions(backstackEntry, this._currentEntry);

    if (!transitionReversed) {
      transaction.setCustomAnimations(-30, -40);
    }

    transaction.replace(this.containerViewId, backstackEntry.fragment, backstackEntry.fragmentTag);
    transaction.commitAllowingStateLoss();
  };

  Frame.prototype._removeEntry = function (removed) {
    _super.prototype._removeEntry.call(this, removed);

    if (removed.fragment) {
      fragment_transitions_1._clearEntry(removed);
    }

    removed.fragment = null;
    removed.viewSavedState = null;
  };

  Frame.prototype.createNativeView = function () {
    return new org.nativescript.widgets.ContentLayout(this._context);
  };

  Frame.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var listener = getAttachListener();
    this.nativeViewProtected.addOnAttachStateChangeListener(listener);
    this.nativeViewProtected[ownerSymbol] = this;
    this._android.rootViewGroup = this.nativeViewProtected;

    if (this._containerViewId < 0) {
      this._containerViewId = android.view.View.generateViewId();
    }

    this._android.rootViewGroup.setId(this._containerViewId);
  };

  Frame.prototype.disposeNativeView = function () {
    var _this = this;

    var listener = getAttachListener();
    this.nativeViewProtected.removeOnAttachStateChangeListener(listener);
    this.nativeViewProtected[ownerSymbol] = null;
    this._tearDownPending = !!this._executingEntry;
    var current = this._currentEntry;
    this.backStack.forEach(function (entry) {
      if (entry !== _this._executingEntry) {
        clearEntry(entry);
      }
    });

    if (current && !this._executingEntry) {
      clearEntry(current);
    }

    this._android.rootViewGroup = null;

    this._removeFromFrameStack();

    _super.prototype.disposeNativeView.call(this);
  };

  Frame.prototype._popFromFrameStack = function () {
    if (!this._isInFrameStack) {
      return;
    }

    _super.prototype._popFromFrameStack.call(this);
  };

  Frame.prototype._getNavBarVisible = function (page) {
    switch (this.actionBarVisibility) {
      case "never":
        return false;

      case "always":
        return true;

      default:
        if (page.actionBarHidden !== undefined) {
          return !page.actionBarHidden;
        }

        if (this._android && this._android.showActionBar !== undefined) {
          return this._android.showActionBar;
        }

        return true;
    }
  };

  Frame.prototype._saveFragmentsState = function () {
    this.backStack.forEach(function (entry) {
      var view = entry.resolvedPage.nativeViewProtected;

      if (!entry.viewSavedState && view) {
        var viewState = new android.util.SparseArray();
        view.saveHierarchyState(viewState);
        entry.viewSavedState = viewState;
      }
    });
  };

  __decorate([profiling_1.profile], Frame.prototype, "_navigateCore", null);

  return Frame;
}(frame_common_1.FrameBase);

exports.Frame = Frame;

function cloneExpandedAnimator(expandedAnimator) {
  if (!expandedAnimator) {
    return null;
  }

  var clone = expandedAnimator.clone();
  clone.entry = expandedAnimator.entry;
  clone.transitionType = expandedAnimator.transitionType;
  return clone;
}

function getAnimatorState(entry) {
  var expandedEntry = entry;
  var animatorState = {};
  animatorState.enterAnimator = cloneExpandedAnimator(expandedEntry.enterAnimator);
  animatorState.exitAnimator = cloneExpandedAnimator(expandedEntry.exitAnimator);
  animatorState.popEnterAnimator = cloneExpandedAnimator(expandedEntry.popEnterAnimator);
  animatorState.popExitAnimator = cloneExpandedAnimator(expandedEntry.popExitAnimator);
  animatorState.transitionName = expandedEntry.transitionName;
  return animatorState;
}

function restoreAnimatorState(entry, snapshot) {
  var expandedEntry = entry;

  if (snapshot.enterAnimator) {
    expandedEntry.enterAnimator = snapshot.enterAnimator;
  }

  if (snapshot.exitAnimator) {
    expandedEntry.exitAnimator = snapshot.exitAnimator;
  }

  if (snapshot.popEnterAnimator) {
    expandedEntry.popEnterAnimator = snapshot.popEnterAnimator;
  }

  if (snapshot.popExitAnimator) {
    expandedEntry.popExitAnimator = snapshot.popExitAnimator;
  }

  expandedEntry.transitionName = snapshot.transitionName;
}

function clearEntry(entry) {
  if (entry.fragment) {
    fragment_transitions_1._clearFragment(entry);
  }

  entry.recreated = false;
  entry.fragment = null;
  var page = entry.resolvedPage;

  if (page._context) {
    entry.resolvedPage._tearDownUI(true);
  }
}

var framesCounter = 0;
var framesCache = new Array();

var AndroidFrame = function (_super) {
  __extends(AndroidFrame, _super);

  function AndroidFrame(owner) {
    var _this = _super.call(this) || this;

    _this._showActionBar = true;
    _this.cachePagesOnNavigate = true;
    _this._owner = owner;
    _this.frameId = framesCounter++;
    framesCache.push(new WeakRef(_this));
    return _this;
  }

  Object.defineProperty(AndroidFrame.prototype, "showActionBar", {
    get: function () {
      return this._showActionBar;
    },
    set: function (value) {
      if (this._showActionBar !== value) {
        this._showActionBar = value;

        if (this.owner.currentPage) {
          this.owner.currentPage.actionBar.update();
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidFrame.prototype, "activity", {
    get: function () {
      var activity = this.owner._context;

      if (activity) {
        return activity;
      }

      var currView = this._owner.parent;

      while (currView) {
        if (currView instanceof Frame) {
          return currView.android.activity;
        }

        currView = currView.parent;
      }

      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidFrame.prototype, "actionBar", {
    get: function () {
      var activity = this.currentActivity;

      if (!activity) {
        return undefined;
      }

      var bar = activity.getActionBar();

      if (!bar) {
        return undefined;
      }

      return bar;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidFrame.prototype, "currentActivity", {
    get: function () {
      var activity = this.activity;

      if (activity) {
        return activity;
      }

      var frames = frame_common_1.stack();

      for (var length_1 = frames.length, i = length_1 - 1; i >= 0; i--) {
        activity = frames[i].android.activity;

        if (activity) {
          return activity;
        }
      }

      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidFrame.prototype, "owner", {
    get: function () {
      return this._owner;
    },
    enumerable: true,
    configurable: true
  });

  AndroidFrame.prototype.canGoBack = function () {
    if (!this.activity) {
      return false;
    }

    return this.activity.getIntent().getAction() !== android.content.Intent.ACTION_MAIN;
  };

  AndroidFrame.prototype.fragmentForPage = function (entry) {
    var tag = entry && entry.fragmentTag;

    if (tag) {
      return this.owner._getFragmentManager().findFragmentByTag(tag);
    }

    return undefined;
  };

  return AndroidFrame;
}(frame_common_1.Observable);

function findPageForFragment(fragment, frame) {
  var fragmentTag = fragment.getTag();

  if (frame_common_1.traceEnabled()) {
    frame_common_1.traceWrite("Finding page for " + fragmentTag + ".", frame_common_1.traceCategories.NativeLifecycle);
  }

  var entry;
  var current = frame._currentEntry;
  var navigating = frame._executingEntry;

  if (current && current.fragmentTag === fragmentTag) {
    entry = current;
  } else if (navigating && navigating.fragmentTag === fragmentTag) {
    entry = navigating;
  }

  var page;

  if (entry) {
    entry.recreated = true;
    page = entry.resolvedPage;
  }

  if (page) {
    var callbacks = fragment[CALLBACKS];
    callbacks.frame = frame;
    callbacks.entry = entry;
    entry.fragment = fragment;

    fragment_transitions_1._updateTransitions(entry);
  } else {
    throw new Error("Could not find a page for " + fragmentTag + ".");
  }
}

function startActivity(activity, frameId) {
  var intent = new android.content.Intent(activity, activity.getClass());
  intent.setAction(android.content.Intent.ACTION_DEFAULT);
  intent.putExtra(INTENT_EXTRA, frameId);
  activity.startActivity(intent);
}

function getFrameByNumberId(frameId) {
  for (var i = 0; i < framesCache.length; i++) {
    var aliveFrame = framesCache[i].get();

    if (aliveFrame && aliveFrame.frameId === frameId) {
      return aliveFrame.owner;
    }
  }

  return null;
}

function ensureFragmentClass() {
  if (fragmentClass) {
    return;
  }

  __webpack_require__("../node_modules/tns-core-modules/ui/frame/fragment.js");

  if (!fragmentClass) {
    throw new Error("Failed to initialize the extended android.support.v4.app.Fragment class");
  }
}

var fragmentClass;

function setFragmentClass(clazz) {
  if (fragmentClass) {
    throw new Error("Fragment class already initialized");
  }

  fragmentClass = clazz;
}

exports.setFragmentClass = setFragmentClass;

var FragmentCallbacksImplementation = function () {
  function FragmentCallbacksImplementation() {}

  FragmentCallbacksImplementation.prototype.onHiddenChanged = function (fragment, hidden, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onHiddenChanged(" + hidden + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment, hidden);
  };

  FragmentCallbacksImplementation.prototype.onCreateAnimator = function (fragment, transit, enter, nextAnim, superFunc) {
    if (!enter && fragment.getRemovingParentFragment()) {
      return superFunc.call(fragment, transit, enter, nextAnim);
    }

    var nextAnimString;

    switch (nextAnim) {
      case -10:
        nextAnimString = "enter";
        break;

      case -20:
        nextAnimString = "exit";
        break;

      case -30:
        nextAnimString = "popEnter";
        break;

      case -40:
        nextAnimString = "popExit";
        break;
    }

    var animator = fragment_transitions_1._onFragmentCreateAnimator(this.entry, fragment, nextAnim, enter);

    if (!animator) {
      animator = superFunc.call(fragment, transit, enter, nextAnim);
    }

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onCreateAnimator(" + transit + ", " + (enter ? "enter" : "exit") + ", " + nextAnimString + "): " + (animator ? "animator" : "no animator"), frame_common_1.traceCategories.NativeLifecycle);
    }

    return animator;
  };

  FragmentCallbacksImplementation.prototype.onCreate = function (fragment, savedInstanceState, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onCreate(" + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment, savedInstanceState);

    if (!this.entry) {
      var args = fragment.getArguments();
      var frameId = args.getInt(FRAMEID);
      var frame = getFrameByNumberId(frameId);

      if (!frame) {
        throw new Error("Cannot find Frame for " + fragment);
      }

      findPageForFragment(fragment, frame);
    }
  };

  FragmentCallbacksImplementation.prototype.onCreateView = function (fragment, inflater, container, savedInstanceState, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onCreateView(inflater, container, " + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    var entry = this.entry;

    if (!entry) {
      frame_common_1.traceError(fragment + ".onCreateView: entry is null or undefined");
      return null;
    }

    var page = entry.resolvedPage;

    if (!page) {
      frame_common_1.traceError(fragment + ".onCreateView: entry has no resolvedPage");
      return null;
    }

    var frame = this.frame;

    if (!frame) {
      frame_common_1.traceError(fragment + ".onCreateView: this.frame is null or undefined");
      return null;
    }

    if (page.parent === frame) {
      if (!page._context) {
        var context_2 = container && container.getContext() || inflater && inflater.getContext();

        page._setupUI(context_2);
      }
    } else {
      if (!frame._styleScope) {
        page._updateStyleScope();
      }

      frame._addView(page);
    }

    if (frame.isLoaded && !page.isLoaded) {
      page.callLoaded();
    }

    var savedState = entry.viewSavedState;

    if (savedState) {
      page.nativeViewProtected.restoreHierarchyState(savedState);
      entry.viewSavedState = null;
    }

    var nativeView = page.nativeViewProtected;

    if (nativeView != null) {
      var parentView = nativeView.getParent();

      if (parentView instanceof android.view.ViewGroup) {
        if (parentView.getChildCount() === 0) {
          parentView.addViewInLayout(nativeView, -1, new org.nativescript.widgets.CommonLayoutParams());
        }

        parentView.removeView(nativeView);
      }
    }

    return page.nativeViewProtected;
  };

  FragmentCallbacksImplementation.prototype.onSaveInstanceState = function (fragment, outState, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onSaveInstanceState(" + outState + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment, outState);
  };

  FragmentCallbacksImplementation.prototype.onDestroyView = function (fragment, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onDestroyView()", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment);
  };

  FragmentCallbacksImplementation.prototype.onDestroy = function (fragment, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onDestroy()", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment);
    var entry = this.entry;

    if (!entry) {
      frame_common_1.traceError(fragment + ".onDestroy: entry is null or undefined");
      return null;
    }

    entry.fragment = null;
    var page = entry.resolvedPage;

    if (!page) {
      frame_common_1.traceError(fragment + ".onDestroy: entry has no resolvedPage");
      return null;
    }
  };

  FragmentCallbacksImplementation.prototype.onStop = function (fragment, superFunc) {
    superFunc.call(fragment);
  };

  FragmentCallbacksImplementation.prototype.toStringOverride = function (fragment, superFunc) {
    var entry = this.entry;

    if (entry) {
      return entry.fragmentTag + "<" + entry.resolvedPage + ">";
    } else {
      return "NO ENTRY, " + superFunc.call(fragment);
    }
  };

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onHiddenChanged", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onCreateAnimator", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onCreate", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onCreateView", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onSaveInstanceState", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onDestroyView", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onDestroy", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onStop", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "toStringOverride", null);

  return FragmentCallbacksImplementation;
}();

var ActivityCallbacksImplementation = function () {
  function ActivityCallbacksImplementation() {}

  ActivityCallbacksImplementation.prototype.getRootView = function () {
    return this._rootView;
  };

  ActivityCallbacksImplementation.prototype.onCreate = function (activity, savedInstanceState, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("Activity.onCreate(" + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    var isRestart = !!savedInstanceState && exports.moduleLoaded;
    superFunc.call(activity, isRestart ? savedInstanceState : null);

    if (savedInstanceState) {
      var rootViewId = savedInstanceState.getInt(ROOT_VIEW_ID_EXTRA, -1);

      if (rootViewId !== -1 && activityRootViewsMap.has(rootViewId)) {
        this._rootView = activityRootViewsMap.get(rootViewId).get();
      }
    }

    this.setActivityContent(activity, savedInstanceState, true);
    exports.moduleLoaded = true;
  };

  ActivityCallbacksImplementation.prototype.onSaveInstanceState = function (activity, outState, superFunc) {
    superFunc.call(activity, outState);
    var rootView = this._rootView;

    if (rootView instanceof Frame) {
      outState.putInt(INTENT_EXTRA, rootView.android.frameId);

      rootView._saveFragmentsState();
    }

    outState.putInt(ROOT_VIEW_ID_EXTRA, rootView._domId);
  };

  ActivityCallbacksImplementation.prototype.onStart = function (activity, superFunc) {
    superFunc.call(activity);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onStart();", frame_common_1.traceCategories.NativeLifecycle);
    }

    var rootView = this._rootView;

    if (rootView && !rootView.isLoaded) {
      rootView.callLoaded();
    }
  };

  ActivityCallbacksImplementation.prototype.onStop = function (activity, superFunc) {
    superFunc.call(activity);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onStop();", frame_common_1.traceCategories.NativeLifecycle);
    }

    var rootView = this._rootView;

    if (rootView && rootView.isLoaded) {
      rootView.callUnloaded();
    }
  };

  ActivityCallbacksImplementation.prototype.onPostResume = function (activity, superFunc) {
    superFunc.call(activity);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onPostResume();", frame_common_1.traceCategories.NativeLifecycle);
    }

    if (activity.isNativeScriptActivity) {
      var args = {
        eventName: application.resumeEvent,
        object: application.android,
        android: activity
      };
      application.notify(args);
      application.android.paused = false;
    }
  };

  ActivityCallbacksImplementation.prototype.onDestroy = function (activity, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onDestroy();", frame_common_1.traceCategories.NativeLifecycle);
    }

    var rootView = this._rootView;

    if (rootView) {
      rootView._tearDownUI(true);
    }

    var exitArgs = {
      eventName: application.exitEvent,
      object: application.android,
      android: activity
    };
    application.notify(exitArgs);
    superFunc.call(activity);
  };

  ActivityCallbacksImplementation.prototype.onBackPressed = function (activity, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onBackPressed;", frame_common_1.traceCategories.NativeLifecycle);
    }

    var args = {
      eventName: "activityBackPressed",
      object: application.android,
      activity: activity,
      cancel: false
    };
    application.android.notify(args);

    if (args.cancel) {
      return;
    }

    var view = this._rootView;
    var callSuper = false;

    if (view instanceof Frame) {
      callSuper = !frame_common_1.goBack();
    } else {
      var viewArgs = {
        eventName: "activityBackPressed",
        object: view,
        activity: activity,
        cancel: false
      };
      view.notify(viewArgs);

      if (!viewArgs.cancel && !view.onBackPressed()) {
        callSuper = true;
      }
    }

    if (callSuper) {
      superFunc.call(activity);
    }
  };

  ActivityCallbacksImplementation.prototype.onRequestPermissionsResult = function (activity, requestCode, permissions, grantResults, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onRequestPermissionsResult;", frame_common_1.traceCategories.NativeLifecycle);
    }

    application.android.notify({
      eventName: "activityRequestPermissions",
      object: application.android,
      activity: activity,
      requestCode: requestCode,
      permissions: permissions,
      grantResults: grantResults
    });
  };

  ActivityCallbacksImplementation.prototype.onActivityResult = function (activity, requestCode, resultCode, data, superFunc) {
    superFunc.call(activity, requestCode, resultCode, data);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onActivityResult(" + requestCode + ", " + resultCode + ", " + data + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    application.android.notify({
      eventName: "activityResult",
      object: application.android,
      activity: activity,
      requestCode: requestCode,
      resultCode: resultCode,
      intent: data
    });
  };

  ActivityCallbacksImplementation.prototype.resetActivityContent = function (activity) {
    if (this._rootView) {
      var manager = this._rootView._getFragmentManager();

      manager.executePendingTransactions();

      this._rootView._onRootViewReset();
    }

    this._rootView = null;
    this.setActivityContent(activity, null, false);

    this._rootView.callLoaded();
  };

  ActivityCallbacksImplementation.prototype.setActivityContent = function (activity, savedInstanceState, fireLaunchEvent) {
    var shouldCreateRootFrame = application.shouldCreateRootFrame();
    var rootView = this._rootView;

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("Frame.setActivityContent rootView: " + rootView + " shouldCreateRootFrame: " + shouldCreateRootFrame + " fireLaunchEvent: " + fireLaunchEvent, frame_common_1.traceCategories.NativeLifecycle);
    }

    if (!rootView) {
      var mainEntry = application.getMainEntry();
      var intent = activity.getIntent();

      if (fireLaunchEvent) {
        rootView = notifyLaunch(intent, savedInstanceState);
      }

      if (shouldCreateRootFrame) {
        var extras = intent.getExtras();
        var frameId = -1;

        if (extras) {
          frameId = extras.getInt(INTENT_EXTRA, -1);
        }

        if (savedInstanceState && frameId < 0) {
          frameId = savedInstanceState.getInt(INTENT_EXTRA, -1);
        }

        if (!rootView) {
          rootView = getFrameByNumberId(frameId) || new Frame();
        }

        if (rootView instanceof Frame) {
          rootView.navigate(mainEntry);
        } else {
          throw new Error("A Frame must be used to navigate to a Page.");
        }
      } else {
        rootView = rootView || builder_1.createViewFromEntry(mainEntry);
      }

      this._rootView = rootView;
      activityRootViewsMap.set(rootView._domId, new WeakRef(rootView));
    }

    if (shouldCreateRootFrame) {
      rootView._setupUI(activity);
    } else {
      rootView._setupAsRootView(activity);
    }

    activity.setContentView(rootView.nativeViewProtected, new org.nativescript.widgets.CommonLayoutParams());
  };

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onCreate", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onSaveInstanceState", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onStart", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onStop", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onPostResume", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onDestroy", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onBackPressed", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onRequestPermissionsResult", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onActivityResult", null);

  return ActivityCallbacksImplementation;
}();

var notifyLaunch = profiling_1.profile("notifyLaunch", function notifyLaunch(intent, savedInstanceState) {
  var launchArgs = {
    eventName: application.launchEvent,
    object: application.android,
    android: intent,
    savedInstanceState: savedInstanceState
  };
  application.notify(launchArgs);
  application.notify({
    eventName: "loadAppCss",
    object: this,
    cssFile: application.getCssFileName()
  });
  return launchArgs.root;
});

function setActivityCallbacks(activity) {
  activity[CALLBACKS] = new ActivityCallbacksImplementation();
}

exports.setActivityCallbacks = setActivityCallbacks;

function setFragmentCallbacks(fragment) {
  fragment[CALLBACKS] = new FragmentCallbacksImplementation();
}

exports.setFragmentCallbacks = setFragmentCallbacks;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/gestures/gestures-common.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var GestureTypes;

(function (GestureTypes) {
  GestureTypes[GestureTypes["tap"] = 1] = "tap";
  GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
  GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
  GestureTypes[GestureTypes["pan"] = 8] = "pan";
  GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
  GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
  GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
  GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(GestureTypes = exports.GestureTypes || (exports.GestureTypes = {}));

var GestureStateTypes;

(function (GestureStateTypes) {
  GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
  GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
  GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
  GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(GestureStateTypes = exports.GestureStateTypes || (exports.GestureStateTypes = {}));

var SwipeDirection;

(function (SwipeDirection) {
  SwipeDirection[SwipeDirection["right"] = 1] = "right";
  SwipeDirection[SwipeDirection["left"] = 2] = "left";
  SwipeDirection[SwipeDirection["up"] = 4] = "up";
  SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(SwipeDirection = exports.SwipeDirection || (exports.SwipeDirection = {}));

var TouchAction;

(function (TouchAction) {
  TouchAction.down = "down";
  TouchAction.up = "up";
  TouchAction.move = "move";
  TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));

function toString(type, separator) {
  var types = new Array();

  if (type & GestureTypes.tap) {
    types.push("tap");
  }

  if (type & GestureTypes.doubleTap) {
    types.push("doubleTap");
  }

  if (type & GestureTypes.pinch) {
    types.push("pinch");
  }

  if (type & GestureTypes.pan) {
    types.push("pan");
  }

  if (type & GestureTypes.swipe) {
    types.push("swipe");
  }

  if (type & GestureTypes.rotation) {
    types.push("rotation");
  }

  if (type & GestureTypes.longPress) {
    types.push("longPress");
  }

  if (type & GestureTypes.touch) {
    types.push("touch");
  }

  return types.join(separator);
}

exports.toString = toString;

function fromString(type) {
  var t = type.trim().toLowerCase();

  if (t === "tap") {
    return GestureTypes.tap;
  } else if (t === "doubletap") {
    return GestureTypes.doubleTap;
  } else if (t === "pinch") {
    return GestureTypes.pinch;
  } else if (t === "pan") {
    return GestureTypes.pan;
  } else if (t === "swipe") {
    return GestureTypes.swipe;
  } else if (t === "rotation") {
    return GestureTypes.rotation;
  } else if (t === "longpress") {
    return GestureTypes.longPress;
  } else if (t === "touch") {
    return GestureTypes.touch;
  }

  return undefined;
}

exports.fromString = fromString;

var GesturesObserverBase = function () {
  function GesturesObserverBase(target, callback, context) {
    this._target = target;
    this._callback = callback;
    this._context = context;
  }

  Object.defineProperty(GesturesObserverBase.prototype, "callback", {
    get: function () {
      return this._callback;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GesturesObserverBase.prototype, "target", {
    get: function () {
      return this._target;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GesturesObserverBase.prototype, "context", {
    get: function () {
      return this._context;
    },
    enumerable: true,
    configurable: true
  });

  GesturesObserverBase.prototype.disconnect = function () {
    if (this.target) {
      var list = this.target.getGestureObservers(this.type);

      if (list && list.length > 0) {
        for (var i = 0; i < list.length; i++) {
          if (list[i].callback === this.callback) {
            break;
          }
        }

        list.length = 0;
        this.target._gestureObservers[this.type] = undefined;
        delete this.target._gestureObservers[this.type];
      }
    }

    this._target = null;
    this._callback = null;
    this._context = null;
  };

  return GesturesObserverBase;
}();

exports.GesturesObserverBase = GesturesObserverBase;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/gestures/gestures.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gestures_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures-common.js"));

var TapAndDoubleTapGestureListener;

function initializeTapAndDoubleTapGestureListener() {
  if (TapAndDoubleTapGestureListener) {
    return;
  }

  var TapAndDoubleTapGestureListenerImpl = function (_super) {
    __extends(TapAndDoubleTapGestureListenerImpl, _super);

    function TapAndDoubleTapGestureListenerImpl(observer, target, type) {
      var _this = _super.call(this) || this;

      _this._observer = observer;
      _this._target = target;
      _this._type = type;
      return global.__native(_this);
    }

    TapAndDoubleTapGestureListenerImpl.prototype.onSingleTapUp = function (motionEvent) {
      if (this._type & gestures_common_1.GestureTypes.tap) {
        var args = _getArgs(gestures_common_1.GestureTypes.tap, this._target, motionEvent);

        _executeCallback(this._observer, args);
      }

      return true;
    };

    TapAndDoubleTapGestureListenerImpl.prototype.onDoubleTap = function (motionEvent) {
      if (this._type & gestures_common_1.GestureTypes.doubleTap) {
        var args = _getArgs(gestures_common_1.GestureTypes.doubleTap, this._target, motionEvent);

        _executeCallback(this._observer, args);
      }

      return true;
    };

    TapAndDoubleTapGestureListenerImpl.prototype.onDown = function (motionEvent) {
      return true;
    };

    TapAndDoubleTapGestureListenerImpl.prototype.onLongPress = function (motionEvent) {
      if (this._type & gestures_common_1.GestureTypes.longPress) {
        var args = _getArgs(gestures_common_1.GestureTypes.longPress, this._target, motionEvent);

        _executeCallback(this._observer, args);
      }
    };

    return TapAndDoubleTapGestureListenerImpl;
  }(android.view.GestureDetector.SimpleOnGestureListener);

  TapAndDoubleTapGestureListener = TapAndDoubleTapGestureListenerImpl;
}

var PinchGestureListener;

function initializePinchGestureListener() {
  if (PinchGestureListener) {
    return;
  }

  var PinchGestureListenerImpl = function (_super) {
    __extends(PinchGestureListenerImpl, _super);

    function PinchGestureListenerImpl(observer, target) {
      var _this = _super.call(this) || this;

      _this._observer = observer;
      _this._target = target;
      return global.__native(_this);
    }

    PinchGestureListenerImpl.prototype.onScaleBegin = function (detector) {
      this._scale = detector.getScaleFactor();
      var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.began);

      _executeCallback(this._observer, args);

      return true;
    };

    PinchGestureListenerImpl.prototype.onScale = function (detector) {
      this._scale *= detector.getScaleFactor();
      var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.changed);

      _executeCallback(this._observer, args);

      return true;
    };

    PinchGestureListenerImpl.prototype.onScaleEnd = function (detector) {
      this._scale *= detector.getScaleFactor();
      var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.ended);

      _executeCallback(this._observer, args);
    };

    return PinchGestureListenerImpl;
  }(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener);

  PinchGestureListener = PinchGestureListenerImpl;
}

var SwipeGestureListener;

function initializeSwipeGestureListener() {
  if (SwipeGestureListener) {
    return;
  }

  var SwipeGestureListenerImpl = function (_super) {
    __extends(SwipeGestureListenerImpl, _super);

    function SwipeGestureListenerImpl(observer, target) {
      var _this = _super.call(this) || this;

      _this._observer = observer;
      _this._target = target;
      return global.__native(_this);
    }

    SwipeGestureListenerImpl.prototype.onDown = function (motionEvent) {
      return true;
    };

    SwipeGestureListenerImpl.prototype.onFling = function (initialEvent, currentEvent, velocityX, velocityY) {
      var result = false;
      var args;

      try {
        var deltaY = currentEvent.getY() - initialEvent.getY();
        var deltaX = currentEvent.getX() - initialEvent.getX();

        if (Math.abs(deltaX) > Math.abs(deltaY)) {
          if (Math.abs(deltaX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
            if (deltaX > 0) {
              args = _getSwipeArgs(gestures_common_1.SwipeDirection.right, this._target, initialEvent, currentEvent);

              _executeCallback(this._observer, args);

              result = true;
            } else {
              args = _getSwipeArgs(gestures_common_1.SwipeDirection.left, this._target, initialEvent, currentEvent);

              _executeCallback(this._observer, args);

              result = true;
            }
          }
        } else {
          if (Math.abs(deltaY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
            if (deltaY > 0) {
              args = _getSwipeArgs(gestures_common_1.SwipeDirection.down, this._target, initialEvent, currentEvent);

              _executeCallback(this._observer, args);

              result = true;
            } else {
              args = _getSwipeArgs(gestures_common_1.SwipeDirection.up, this._target, initialEvent, currentEvent);

              _executeCallback(this._observer, args);

              result = true;
            }
          }
        }
      } catch (ex) {}

      return result;
    };

    return SwipeGestureListenerImpl;
  }(android.view.GestureDetector.SimpleOnGestureListener);

  SwipeGestureListener = SwipeGestureListenerImpl;
}

var SWIPE_THRESHOLD = 100;
var SWIPE_VELOCITY_THRESHOLD = 100;
var INVALID_POINTER_ID = -1;
var TO_DEGREES = 180 / Math.PI;

function observe(target, type, callback, context) {
  var observer = new GesturesObserver(target, callback, context);
  observer.observe(type);
  return observer;
}

exports.observe = observe;

var GesturesObserver = function (_super) {
  __extends(GesturesObserver, _super);

  function GesturesObserver() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  GesturesObserver.prototype.observe = function (type) {
    var _this = this;

    if (this.target) {
      this.type = type;

      this._onTargetLoaded = function (args) {
        _this._attach(_this.target, type);
      };

      this._onTargetUnloaded = function (args) {
        _this._detach();
      };

      this.target.on("loaded", this._onTargetLoaded);
      this.target.on("unloaded", this._onTargetUnloaded);

      if (this.target.isLoaded) {
        this._attach(this.target, type);
      }
    }
  };

  GesturesObserver.prototype.disconnect = function () {
    this._detach();

    if (this.target) {
      this.target.off("loaded", this._onTargetLoaded);
      this.target.off("unloaded", this._onTargetUnloaded);
      this._onTargetLoaded = null;
      this._onTargetUnloaded = null;
    }

    _super.prototype.disconnect.call(this);
  };

  GesturesObserver.prototype._detach = function () {
    this._notifyTouch = false;
    this._simpleGestureDetector = null;
    this._scaleGestureDetector = null;
    this._swipeGestureDetector = null;
    this._panGestureDetector = null;
    this._rotateGestureDetector = null;
    this._eventData = null;
  };

  GesturesObserver.prototype._attach = function (target, type) {
    this._detach();

    if (type & gestures_common_1.GestureTypes.tap || type & gestures_common_1.GestureTypes.doubleTap || type & gestures_common_1.GestureTypes.longPress) {
      initializeTapAndDoubleTapGestureListener();
      this._simpleGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new TapAndDoubleTapGestureListener(this, this.target, type));
    }

    if (type & gestures_common_1.GestureTypes.pinch) {
      initializePinchGestureListener();
      this._scaleGestureDetector = new android.view.ScaleGestureDetector(target._context, new PinchGestureListener(this, this.target));
    }

    if (type & gestures_common_1.GestureTypes.swipe) {
      initializeSwipeGestureListener();
      this._swipeGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new SwipeGestureListener(this, this.target));
    }

    if (type & gestures_common_1.GestureTypes.pan) {
      this._panGestureDetector = new CustomPanGestureDetector(this, this.target);
    }

    if (type & gestures_common_1.GestureTypes.rotation) {
      this._rotateGestureDetector = new CustomRotateGestureDetector(this, this.target);
    }

    if (type & gestures_common_1.GestureTypes.touch) {
      this._notifyTouch = true;
    }
  };

  GesturesObserver.prototype.androidOnTouchEvent = function (motionEvent) {
    if (this._notifyTouch) {
      if (!this._eventData) {
        this._eventData = new TouchGestureEventData();
      }

      this._eventData.prepare(this.target, motionEvent);

      _executeCallback(this, this._eventData);
    }

    if (this._simpleGestureDetector) {
      this._simpleGestureDetector.onTouchEvent(motionEvent);
    }

    if (this._scaleGestureDetector) {
      this._scaleGestureDetector.onTouchEvent(motionEvent);
    }

    if (this._swipeGestureDetector) {
      this._swipeGestureDetector.onTouchEvent(motionEvent);
    }

    if (this._panGestureDetector) {
      this._panGestureDetector.onTouchEvent(motionEvent);
    }

    if (this._rotateGestureDetector) {
      this._rotateGestureDetector.onTouchEvent(motionEvent);
    }
  };

  return GesturesObserver;
}(gestures_common_1.GesturesObserverBase);

exports.GesturesObserver = GesturesObserver;

function _getArgs(type, view, e) {
  return {
    type: type,
    view: view,
    android: e,
    ios: undefined,
    object: view,
    eventName: gestures_common_1.toString(type)
  };
}

function _getSwipeArgs(direction, view, initialEvent, currentEvent) {
  return {
    type: gestures_common_1.GestureTypes.swipe,
    view: view,
    android: {
      initial: initialEvent,
      current: currentEvent
    },
    direction: direction,
    ios: undefined,
    object: view,
    eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.swipe)
  };
}

function _getPanArgs(deltaX, deltaY, view, state, initialEvent, currentEvent) {
  return {
    type: gestures_common_1.GestureTypes.pan,
    view: view,
    android: {
      initial: initialEvent,
      current: currentEvent
    },
    deltaX: deltaX,
    deltaY: deltaY,
    ios: undefined,
    object: view,
    eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.pan),
    state: state
  };
}

function _executeCallback(observer, args) {
  if (observer && observer.callback) {
    observer.callback.call(observer._context, args);
  }
}

var PinchGestureEventData = function () {
  function PinchGestureEventData(view, android, scale, object, state) {
    this.view = view;
    this.android = android;
    this.scale = scale;
    this.object = object;
    this.state = state;
    this.type = gestures_common_1.GestureTypes.pinch;
    this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.pinch);
  }

  PinchGestureEventData.prototype.getFocusX = function () {
    return this.android.getFocusX() / utils_1.layout.getDisplayDensity();
  };

  PinchGestureEventData.prototype.getFocusY = function () {
    return this.android.getFocusY() / utils_1.layout.getDisplayDensity();
  };

  return PinchGestureEventData;
}();

var CustomPanGestureDetector = function () {
  function CustomPanGestureDetector(observer, target) {
    this.observer = observer;
    this.target = target;
    this.isTracking = false;
    this.density = utils_1.layout.getDisplayDensity();
  }

  CustomPanGestureDetector.prototype.onTouchEvent = function (event) {
    switch (event.getActionMasked()) {
      case android.view.MotionEvent.ACTION_UP:
      case android.view.MotionEvent.ACTION_CANCEL:
        this.trackStop(event, false);
        break;

      case android.view.MotionEvent.ACTION_DOWN:
      case android.view.MotionEvent.ACTION_POINTER_DOWN:
      case android.view.MotionEvent.ACTION_POINTER_UP:
        this.trackStop(event, true);
        break;

      case android.view.MotionEvent.ACTION_MOVE:
        if (!this.isTracking) {
          this.trackStart(event);
        }

        this.trackChange(event);
        break;
    }

    return true;
  };

  CustomPanGestureDetector.prototype.trackStop = function (currentEvent, cahceEvent) {
    if (this.isTracking) {
      var args = _getPanArgs(this.deltaX, this.deltaY, this.target, gestures_common_1.GestureStateTypes.ended, null, currentEvent);

      _executeCallback(this.observer, args);

      this.deltaX = undefined;
      this.deltaY = undefined;
      this.isTracking = false;
    }

    if (cahceEvent) {
      this.lastEventCache = currentEvent;
    } else {
      this.lastEventCache = undefined;
    }
  };

  CustomPanGestureDetector.prototype.trackStart = function (currentEvent) {
    var inital = this.getEventCoordinates(this.lastEventCache ? this.lastEventCache : currentEvent);
    this.initialX = inital.x;
    this.initialY = inital.y;
    this.isTracking = true;

    var args = _getPanArgs(0, 0, this.target, gestures_common_1.GestureStateTypes.began, null, currentEvent);

    _executeCallback(this.observer, args);
  };

  CustomPanGestureDetector.prototype.trackChange = function (currentEvent) {
    var current = this.getEventCoordinates(currentEvent);
    this.deltaX = current.x - this.initialX;
    this.deltaY = current.y - this.initialY;

    var args = _getPanArgs(this.deltaX, this.deltaY, this.target, gestures_common_1.GestureStateTypes.changed, null, currentEvent);

    _executeCallback(this.observer, args);
  };

  CustomPanGestureDetector.prototype.getEventCoordinates = function (event) {
    var count = event.getPointerCount();

    if (count === 1) {
      return {
        x: event.getRawX() / this.density,
        y: event.getRawY() / this.density
      };
    } else {
      var offX = event.getRawX() - event.getX();
      var offY = event.getRawY() - event.getY();
      var res = {
        x: 0,
        y: 0
      };

      for (var i = 0; i < count; i++) {
        res.x += event.getX(i) + offX;
        res.y += event.getY(i) + offY;
      }

      res.x /= count * this.density;
      res.y /= count * this.density;
      return res;
    }
  };

  return CustomPanGestureDetector;
}();

var CustomRotateGestureDetector = function () {
  function CustomRotateGestureDetector(observer, target) {
    this.observer = observer;
    this.target = target;
    this.trackedPtrId1 = INVALID_POINTER_ID;
    this.trackedPtrId2 = INVALID_POINTER_ID;
  }

  Object.defineProperty(CustomRotateGestureDetector.prototype, "isTracking", {
    get: function () {
      return this.trackedPtrId1 !== INVALID_POINTER_ID && this.trackedPtrId2 !== INVALID_POINTER_ID;
    },
    enumerable: true,
    configurable: true
  });

  CustomRotateGestureDetector.prototype.onTouchEvent = function (event) {
    var pointerID = event.getPointerId(event.getActionIndex());
    var wasTracking = this.isTracking;

    switch (event.getActionMasked()) {
      case android.view.MotionEvent.ACTION_DOWN:
      case android.view.MotionEvent.ACTION_POINTER_DOWN:
        var assigned = false;

        if (this.trackedPtrId1 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId2) {
          this.trackedPtrId1 = pointerID;
          assigned = true;
        } else if (this.trackedPtrId2 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId1) {
          this.trackedPtrId2 = pointerID;
          assigned = true;
        }

        if (assigned && this.isTracking) {
          this.angle = 0;
          this.initalPointersAngle = this.getPointersAngle(event);
          this.executeCallback(event, gestures_common_1.GestureStateTypes.began);
        }

        break;

      case android.view.MotionEvent.ACTION_MOVE:
        if (this.isTracking) {
          this.updateAngle(event);
          this.executeCallback(event, gestures_common_1.GestureStateTypes.changed);
        }

        break;

      case android.view.MotionEvent.ACTION_UP:
      case android.view.MotionEvent.ACTION_POINTER_UP:
        if (pointerID === this.trackedPtrId1) {
          this.trackedPtrId1 = INVALID_POINTER_ID;
        } else if (pointerID === this.trackedPtrId2) {
          this.trackedPtrId2 = INVALID_POINTER_ID;
        }

        if (wasTracking && !this.isTracking) {
          this.executeCallback(event, gestures_common_1.GestureStateTypes.ended);
        }

        break;

      case android.view.MotionEvent.ACTION_CANCEL:
        this.trackedPtrId1 = INVALID_POINTER_ID;
        this.trackedPtrId2 = INVALID_POINTER_ID;

        if (wasTracking) {
          this.executeCallback(event, gestures_common_1.GestureStateTypes.cancelled);
        }

        break;
    }

    return true;
  };

  CustomRotateGestureDetector.prototype.executeCallback = function (event, state) {
    var args = {
      type: gestures_common_1.GestureTypes.rotation,
      view: this.target,
      android: event,
      rotation: this.angle,
      ios: undefined,
      object: this.target,
      eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.rotation),
      state: state
    };

    _executeCallback(this.observer, args);
  };

  CustomRotateGestureDetector.prototype.updateAngle = function (event) {
    var newPointersAngle = this.getPointersAngle(event);
    var result = (newPointersAngle - this.initalPointersAngle) * TO_DEGREES % 360;

    if (result < -180) {
      result += 360;
    }

    if (result > 180) {
      result -= 360;
    }

    this.angle = result;
  };

  CustomRotateGestureDetector.prototype.getPointersAngle = function (event) {
    var firstX = event.getX(event.findPointerIndex(this.trackedPtrId1));
    var firstY = event.getY(event.findPointerIndex(this.trackedPtrId1));
    var secondX = event.getX(event.findPointerIndex(this.trackedPtrId2));
    var secondY = event.getY(event.findPointerIndex(this.trackedPtrId2));
    return Math.atan2(secondY - firstY, secondX - firstX);
  };

  return CustomRotateGestureDetector;
}();

var Pointer = function () {
  function Pointer(id, event) {
    this.event = event;
    this.ios = undefined;
    this.android = id;
  }

  Pointer.prototype.getX = function () {
    return this.event.getX(this.android) / utils_1.layout.getDisplayDensity();
  };

  Pointer.prototype.getY = function () {
    return this.event.getY(this.android) / utils_1.layout.getDisplayDensity();
  };

  return Pointer;
}();

var TouchGestureEventData = function () {
  function TouchGestureEventData() {
    this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.touch);
    this.type = gestures_common_1.GestureTypes.touch;
    this.ios = undefined;
  }

  TouchGestureEventData.prototype.prepare = function (view, e) {
    this.view = view;
    this.object = view;
    this.android = e;
    this.action = this.getActionType(e);
    this._activePointers = undefined;
    this._allPointers = undefined;
  };

  TouchGestureEventData.prototype.getPointerCount = function () {
    return this.android.getPointerCount();
  };

  TouchGestureEventData.prototype.getActivePointers = function () {
    if (!this._activePointers) {
      this._activePointers = [new Pointer(this.android.getActionIndex(), this.android)];
    }

    return this._activePointers;
  };

  TouchGestureEventData.prototype.getAllPointers = function () {
    if (!this._allPointers) {
      this._allPointers = [];

      for (var i = 0; i < this.getPointerCount(); i++) {
        this._allPointers.push(new Pointer(i, this.android));
      }
    }

    return this._allPointers;
  };

  TouchGestureEventData.prototype.getX = function () {
    return this.getActivePointers()[0].getX();
  };

  TouchGestureEventData.prototype.getY = function () {
    return this.getActivePointers()[0].getY();
  };

  TouchGestureEventData.prototype.getActionType = function (e) {
    switch (e.getActionMasked()) {
      case android.view.MotionEvent.ACTION_DOWN:
      case android.view.MotionEvent.ACTION_POINTER_DOWN:
        return gestures_common_1.TouchAction.down;

      case android.view.MotionEvent.ACTION_MOVE:
        return gestures_common_1.TouchAction.move;

      case android.view.MotionEvent.ACTION_UP:
      case android.view.MotionEvent.ACTION_POINTER_UP:
        return gestures_common_1.TouchAction.up;

      case android.view.MotionEvent.ACTION_CANCEL:
        return gestures_common_1.TouchAction.cancel;
    }

    return "";
  };

  return TouchGestureEventData;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/label/label.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var TextView;

var Label = function (_super) {
  __extends(Label, _super);

  function Label() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Label.prototype, "textWrap", {
    get: function () {
      return this.style.whiteSpace === "normal";
    },
    set: function (value) {
      if (typeof value === "string") {
        value = text_base_1.booleanConverter(value);
      }

      this.style.whiteSpace = value ? "normal" : "nowrap";
    },
    enumerable: true,
    configurable: true
  });

  Label.prototype.createNativeView = function () {
    if (!TextView) {
      TextView = android.widget.TextView;
    }

    return new TextView(this._context);
  };

  Label.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var textView = this.nativeTextViewProtected;
    textView.setSingleLine(true);
    textView.setEllipsize(android.text.TextUtils.TruncateAt.END);
  };

  Label.prototype[text_base_1.whiteSpaceProperty.setNative] = function (value) {
    var newValue = value === "initial" ? "nowrap" : value;

    _super.prototype[text_base_1.whiteSpaceProperty.setNative].call(this, newValue);
  };

  __decorate([profiling_1.profile], Label.prototype, "createNativeView", null);

  Label = __decorate([text_base_1.CSSType("Label")], Label);
  return Label;
}(text_base_1.TextBase);

exports.Label = Label;
Label.prototype._isSingleLine = true;
Label.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/background-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var Background = function () {
  function Background() {
    this.borderTopWidth = 0;
    this.borderRightWidth = 0;
    this.borderBottomWidth = 0;
    this.borderLeftWidth = 0;
    this.borderTopLeftRadius = 0;
    this.borderTopRightRadius = 0;
    this.borderBottomLeftRadius = 0;
    this.borderBottomRightRadius = 0;
  }

  Background.prototype.clone = function () {
    var clone = new Background();
    clone.color = this.color;
    clone.image = this.image;
    clone.repeat = this.repeat;
    clone.position = this.position;
    clone.size = this.size;
    clone.borderTopColor = this.borderTopColor;
    clone.borderRightColor = this.borderRightColor;
    clone.borderBottomColor = this.borderBottomColor;
    clone.borderLeftColor = this.borderLeftColor;
    clone.borderTopWidth = this.borderTopWidth;
    clone.borderRightWidth = this.borderRightWidth;
    clone.borderBottomWidth = this.borderBottomWidth;
    clone.borderLeftWidth = this.borderLeftWidth;
    clone.borderTopLeftRadius = this.borderTopLeftRadius;
    clone.borderTopRightRadius = this.borderTopRightRadius;
    clone.borderBottomRightRadius = this.borderBottomRightRadius;
    clone.borderBottomLeftRadius = this.borderBottomLeftRadius;
    clone.clipPath = this.clipPath;
    return clone;
  };

  Background.prototype.withColor = function (value) {
    var clone = this.clone();
    clone.color = value;
    return clone;
  };

  Background.prototype.withImage = function (value) {
    var clone = this.clone();
    clone.image = value;
    return clone;
  };

  Background.prototype.withRepeat = function (value) {
    var clone = this.clone();
    clone.repeat = value;
    return clone;
  };

  Background.prototype.withPosition = function (value) {
    var clone = this.clone();
    clone.position = value;
    return clone;
  };

  Background.prototype.withSize = function (value) {
    var clone = this.clone();
    clone.size = value;
    return clone;
  };

  Background.prototype.withBorderTopColor = function (value) {
    var clone = this.clone();
    clone.borderTopColor = value;
    return clone;
  };

  Background.prototype.withBorderRightColor = function (value) {
    var clone = this.clone();
    clone.borderRightColor = value;
    return clone;
  };

  Background.prototype.withBorderBottomColor = function (value) {
    var clone = this.clone();
    clone.borderBottomColor = value;
    return clone;
  };

  Background.prototype.withBorderLeftColor = function (value) {
    var clone = this.clone();
    clone.borderLeftColor = value;
    return clone;
  };

  Background.prototype.withBorderTopWidth = function (value) {
    var clone = this.clone();
    clone.borderTopWidth = value;
    return clone;
  };

  Background.prototype.withBorderRightWidth = function (value) {
    var clone = this.clone();
    clone.borderRightWidth = value;
    return clone;
  };

  Background.prototype.withBorderBottomWidth = function (value) {
    var clone = this.clone();
    clone.borderBottomWidth = value;
    return clone;
  };

  Background.prototype.withBorderLeftWidth = function (value) {
    var clone = this.clone();
    clone.borderLeftWidth = value;
    return clone;
  };

  Background.prototype.withBorderTopLeftRadius = function (value) {
    var clone = this.clone();
    clone.borderTopLeftRadius = value;
    return clone;
  };

  Background.prototype.withBorderTopRightRadius = function (value) {
    var clone = this.clone();
    clone.borderTopRightRadius = value;
    return clone;
  };

  Background.prototype.withBorderBottomRightRadius = function (value) {
    var clone = this.clone();
    clone.borderBottomRightRadius = value;
    return clone;
  };

  Background.prototype.withBorderBottomLeftRadius = function (value) {
    var clone = this.clone();
    clone.borderBottomLeftRadius = value;
    return clone;
  };

  Background.prototype.withClipPath = function (value) {
    var clone = this.clone();
    clone.clipPath = value;
    return clone;
  };

  Background.prototype.isEmpty = function () {
    return !this.color && !this.image && !this.hasBorderWidth() && !this.hasBorderRadius() && !this.clipPath;
  };

  Background.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    var imagesEqual = false;

    if (value1 instanceof linear_gradient_1.LinearGradient && value2 instanceof linear_gradient_1.LinearGradient) {
      imagesEqual = linear_gradient_1.LinearGradient.equals(value1, value2);
    } else {
      imagesEqual = value1.image === value2.image;
    }

    return color_1.Color.equals(value1.color, value2.color) && imagesEqual && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && color_1.Color.equals(value1.borderTopColor, value2.borderTopColor) && color_1.Color.equals(value1.borderRightColor, value2.borderRightColor) && color_1.Color.equals(value1.borderBottomColor, value2.borderBottomColor) && color_1.Color.equals(value1.borderLeftColor, value2.borderLeftColor) && value1.borderTopWidth === value2.borderTopWidth && value1.borderRightWidth === value2.borderRightWidth && value1.borderBottomWidth === value2.borderBottomWidth && value1.borderLeftWidth === value2.borderLeftWidth && value1.borderTopLeftRadius === value2.borderTopLeftRadius && value1.borderTopRightRadius === value2.borderTopRightRadius && value1.borderBottomRightRadius === value2.borderBottomRightRadius && value1.borderBottomLeftRadius === value2.borderBottomLeftRadius && value1.clipPath === value2.clipPath;
  };

  Background.prototype.hasBorderColor = function () {
    return !!this.borderTopColor || !!this.borderRightColor || !!this.borderBottomColor || !!this.borderLeftColor;
  };

  Background.prototype.hasBorderWidth = function () {
    return this.borderTopWidth > 0 || this.borderRightWidth > 0 || this.borderBottomWidth > 0 || this.borderLeftWidth > 0;
  };

  Background.prototype.hasBorderRadius = function () {
    return this.borderTopLeftRadius > 0 || this.borderTopRightRadius > 0 || this.borderBottomRightRadius > 0 || this.borderBottomLeftRadius > 0;
  };

  Background.prototype.hasUniformBorderColor = function () {
    return color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor);
  };

  Background.prototype.hasUniformBorderWidth = function () {
    return this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth;
  };

  Background.prototype.hasUniformBorderRadius = function () {
    return this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius;
  };

  Background.prototype.hasUniformBorder = function () {
    return this.hasUniformBorderColor() && this.hasUniformBorderWidth() && this.hasUniformBorderRadius();
  };

  Background.prototype.getUniformBorderColor = function () {
    if (this.hasUniformBorderColor()) {
      return this.borderTopColor;
    }

    return undefined;
  };

  ;

  Background.prototype.getUniformBorderWidth = function () {
    if (this.hasUniformBorderWidth()) {
      return this.borderTopWidth;
    }

    return 0;
  };

  ;

  Background.prototype.getUniformBorderRadius = function () {
    if (this.hasUniformBorderRadius()) {
      return this.borderTopLeftRadius;
    }

    return 0;
  };

  ;

  Background.prototype.toString = function () {
    return "isEmpty: " + this.isEmpty() + "; color: " + this.color + "; image: " + this.image + "; repeat: " + this.repeat + "; position: " + this.position + "; size: " + this.size + "; borderTopColor: " + this.borderTopColor + "; borderRightColor: " + this.borderRightColor + "; borderBottomColor: " + this.borderBottomColor + "; borderLeftColor: " + this.borderLeftColor + "; borderTopWidth: " + this.borderTopWidth + "; borderRightWidth: " + this.borderRightWidth + "; borderBottomWidth: " + this.borderBottomWidth + "; borderLeftWidth: " + this.borderLeftWidth + "; borderTopLeftRadius: " + this.borderTopLeftRadius + "; borderTopRightRadius: " + this.borderTopRightRadius + "; borderBottomRightRadius: " + this.borderBottomRightRadius + "; borderBottomLeftRadius: " + this.borderBottomLeftRadius + "; clipPath: " + this.clipPath + ";";
  };

  Background.default = new Background();
  return Background;
}();

exports.Background = Background;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/background.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var css_value_1 = __webpack_require__("../node_modules/tns-core-modules/css-value/index.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/background-common.js"));

var ad;

(function (ad) {
  var SDK;

  function getSDK() {
    if (!SDK) {
      SDK = android.os.Build.VERSION.SDK_INT;
    }

    return SDK;
  }

  function isSetColorFilterOnlyWidget(nativeView) {
    return nativeView instanceof android.widget.Button || nativeView instanceof android.support.v7.widget.Toolbar && getSDK() >= 21;
  }

  function onBackgroundOrBorderPropertyChanged(view) {
    var nativeView = view.nativeViewProtected;

    if (!nativeView) {
      return;
    }

    var background = view.style.backgroundInternal;
    var drawable = nativeView.getBackground();
    var androidView = view;

    if (androidView._cachedDrawable === undefined && drawable) {
      var constantState = drawable.getConstantState();
      androidView._cachedDrawable = constantState || drawable;
    }

    if (isSetColorFilterOnlyWidget(nativeView) && drawable && !(drawable instanceof org.nativescript.widgets.BorderDrawable) && !background.hasBorderWidth() && !background.hasBorderRadius() && !background.clipPath && !background.image && background.color) {
      var backgroundColor = drawable.backgroundColor = background.color.android;
      drawable.mutate();
      drawable.setColorFilter(backgroundColor, android.graphics.PorterDuff.Mode.SRC_IN);
      drawable.invalidateSelf();
      drawable.backgroundColor = backgroundColor;
    } else if (!background.isEmpty()) {
      var backgroundDrawable = drawable;

      if (!(drawable instanceof org.nativescript.widgets.BorderDrawable)) {
        backgroundDrawable = new org.nativescript.widgets.BorderDrawable(utils_1.layout.getDisplayDensity(), view.toString());
        refreshBorderDrawable(view, backgroundDrawable);
        nativeView.setBackground(backgroundDrawable);
      } else {
        refreshBorderDrawable(view, backgroundDrawable);
      }
    } else {
      var cachedDrawable = androidView._cachedDrawable;
      var defaultDrawable = void 0;

      if (cachedDrawable instanceof android.graphics.drawable.Drawable.ConstantState) {
        defaultDrawable = cachedDrawable.newDrawable(nativeView.getResources());
      } else if (cachedDrawable instanceof android.graphics.drawable.Drawable) {
        defaultDrawable = cachedDrawable;
      } else {
        defaultDrawable = null;
      }

      nativeView.setBackground(defaultDrawable);
      androidView._cachedDrawable = undefined;
    }

    var leftPadding = Math.ceil(view.effectiveBorderLeftWidth + view.effectivePaddingLeft);
    var topPadding = Math.ceil(view.effectiveBorderTopWidth + view.effectivePaddingTop);
    var rightPadding = Math.ceil(view.effectiveBorderRightWidth + view.effectivePaddingRight);
    var bottomPadding = Math.ceil(view.effectiveBorderBottomWidth + view.effectivePaddingBottom);
    nativeView.setPadding(leftPadding, topPadding, rightPadding, bottomPadding);
  }

  ad.onBackgroundOrBorderPropertyChanged = onBackgroundOrBorderPropertyChanged;
})(ad = exports.ad || (exports.ad = {}));

function fromBase64(source) {
  var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
  return android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}

function fromGradient(gradient) {
  var colors = Array.create("int", gradient.colorStops.length);
  var stops = Array.create("float", gradient.colorStops.length);
  var hasStops = false;
  gradient.colorStops.forEach(function (stop, index) {
    colors[index] = stop.color.android;

    if (stop.offset) {
      stops[index] = stop.offset.value;
      hasStops = true;
    }
  });
  var alpha = gradient.angle / (Math.PI * 2);
  var startX = Math.pow(Math.sin(Math.PI * (alpha + 0.75)), 2);
  var startY = Math.pow(Math.sin(Math.PI * (alpha + 0.5)), 2);
  var endX = Math.pow(Math.sin(Math.PI * (alpha + 0.25)), 2);
  var endY = Math.pow(Math.sin(Math.PI * alpha), 2);
  return new org.nativescript.widgets.LinearGradientDefinition(startX, startY, endX, endY, colors, hasStops ? stops : null);
}

var pattern = /url\(('|")(.*?)\1\)/;

function refreshBorderDrawable(view, borderDrawable) {
  var nativeView = view.nativeViewProtected;
  var context = nativeView.getContext();
  var background = view.style.backgroundInternal;

  if (background) {
    var backgroundPositionParsedCSSValues = createNativeCSSValueArray(background.position);
    var backgroundSizeParsedCSSValues = createNativeCSSValueArray(background.size);
    var blackColor = -16777216;
    var imageUri = void 0;

    if (background.image && typeof background.image === "string") {
      imageUri = background.image;
      var match = imageUri.match(pattern);

      if (match && match[2]) {
        imageUri = match[2];
      }
    }

    var bitmap = null;

    if (utils_1.isDataURI(imageUri)) {
      var base64Data = imageUri.split(",")[1];

      if (base64Data !== undefined) {
        bitmap = fromBase64(base64Data);
        imageUri = null;
      }
    } else if (utils_1.isFileOrResourcePath(imageUri)) {
      if (imageUri.indexOf(utils_1.RESOURCE_PREFIX) !== 0) {
        var fileName = imageUri;

        if (fileName.indexOf("~/") === 0) {
          fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
        }

        imageUri = utils_1.FILE_PREFIX + fileName;
      }
    }

    var gradient = null;

    if (background.image && background.image instanceof linear_gradient_1.LinearGradient) {
      gradient = fromGradient(background.image);
    }

    borderDrawable.refresh(background.borderTopColor ? background.borderTopColor.android : blackColor, background.borderRightColor ? background.borderRightColor.android : blackColor, background.borderBottomColor ? background.borderBottomColor.android : blackColor, background.borderLeftColor ? background.borderLeftColor.android : blackColor, background.borderTopWidth, background.borderRightWidth, background.borderBottomWidth, background.borderLeftWidth, background.borderTopLeftRadius, background.borderTopRightRadius, background.borderBottomRightRadius, background.borderBottomLeftRadius, background.clipPath, background.color ? background.color.android : 0, imageUri, bitmap, gradient, context, background.repeat, background.position, backgroundPositionParsedCSSValues, background.size, backgroundSizeParsedCSSValues);
  }
}

function createNativeCSSValueArray(css) {
  if (!css) {
    return null;
  }

  var cssValues = css_value_1.parse(css);
  var nativeArray = Array.create(org.nativescript.widgets.CSSValue, cssValues.length);

  for (var i = 0, length_1 = cssValues.length; i < length_1; i++) {
    nativeArray[i] = new org.nativescript.widgets.CSSValue(cssValues[i].type, cssValues[i].string, cssValues[i].unit, cssValues[i].value);
  }

  return nativeArray;
}

var CacheMode;

(function (CacheMode) {
  CacheMode[CacheMode["none"] = 0] = "none";
  CacheMode[CacheMode["memory"] = 1] = "memory";
  CacheMode[CacheMode["diskAndMemory"] = 2] = "diskAndMemory";
})(CacheMode = exports.CacheMode || (exports.CacheMode = {}));

var currentCacheMode;
var imageFetcher;

function initImageCache(context, mode, memoryCacheSize, diskCacheSize) {
  if (mode === void 0) {
    mode = CacheMode.diskAndMemory;
  }

  if (memoryCacheSize === void 0) {
    memoryCacheSize = 0.25;
  }

  if (diskCacheSize === void 0) {
    diskCacheSize = 10 * 1024 * 1024;
  }

  if (currentCacheMode === mode) {
    return;
  }

  currentCacheMode = mode;

  if (!imageFetcher) {
    imageFetcher = org.nativescript.widgets.image.Fetcher.getInstance(context);
  } else {
    imageFetcher.clearCache();
  }

  var params = new org.nativescript.widgets.image.Cache.CacheParams();
  params.memoryCacheEnabled = mode !== CacheMode.none;
  params.setMemCacheSizePercent(memoryCacheSize);
  params.diskCacheEnabled = mode === CacheMode.diskAndMemory;
  params.diskCacheSize = diskCacheSize;
  var imageCache = org.nativescript.widgets.image.Cache.getInstance(params);
  imageFetcher.addImageCache(imageCache);
  imageFetcher.initCache();
}

exports.initImageCache = initImageCache;

function onLivesync(args) {
  if (imageFetcher) {
    imageFetcher.clearCache();
  }
}

application.on("livesync", onLivesync);
application.android.on("activityStarted", profiling_1.profile("initImageCache", function (args) {
  if (!imageFetcher) {
    initImageCache(args.activity);
  } else {
    imageFetcher.initCache();
  }
}));
application.android.on("activityStopped", profiling_1.profile("closeImageCache", function (args) {
  if (imageFetcher) {
    imageFetcher.closeCache();
  }
}));

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/converters.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var enums_1 = __webpack_require__("../node_modules/tns-core-modules/ui/enums/enums.js");

var STYLE_CURVE_MAP = Object.freeze({
  "ease": enums_1.AnimationCurve.ease,
  "linear": enums_1.AnimationCurve.linear,
  "ease-in": enums_1.AnimationCurve.easeIn,
  "ease-out": enums_1.AnimationCurve.easeOut,
  "ease-in-out": enums_1.AnimationCurve.easeInOut,
  "spring": enums_1.AnimationCurve.spring
});

function timeConverter(value) {
  var result = parseFloat(value);

  if (value.indexOf("ms") === -1) {
    result = result * 1000;
  }

  return Math.max(0.0, result);
}

exports.timeConverter = timeConverter;

function animationTimingFunctionConverter(value) {
  return value ? STYLE_CURVE_MAP[value] || parseCubicBezierCurve(value) : enums_1.AnimationCurve.ease;
}

exports.animationTimingFunctionConverter = animationTimingFunctionConverter;

function parseCubicBezierCurve(value) {
  var coordsString = /\((.*?)\)/.exec(value);
  var coords = coordsString && coordsString[1].split(",").map(stringToBezieCoords);

  if (value.startsWith("cubic-bezier") && coordsString && coords.length === 4) {
    var _a = coords.slice(),
        x1 = _a[0],
        x2 = _a[1],
        y1_1 = _a[2],
        y2 = _a[3];

    return enums_1.AnimationCurve.cubicBezier(x1, x2, y1_1, y2);
  } else {
    throw new Error("Invalid value for animation: " + value);
  }
}

function stringToBezieCoords(value) {
  var result = parseFloat(value);

  if (result < 0) {
    return 0;
  } else if (result > 1) {
    return 1;
  }

  return result;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/css-animation-parser.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var keyframe_animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/keyframe-animation.js");

var converters_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/converters.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var ANIMATION_PROPERTY_HANDLERS = Object.freeze({
  "animation-name": function (info, value) {
    return info.name = value;
  },
  "animation-duration": function (info, value) {
    return info.duration = converters_1.timeConverter(value);
  },
  "animation-delay": function (info, value) {
    return info.delay = converters_1.timeConverter(value);
  },
  "animation-timing-function": function (info, value) {
    return info.curve = converters_1.animationTimingFunctionConverter(value);
  },
  "animation-iteration-count": function (info, value) {
    return info.iterations = value === "infinite" ? Number.MAX_VALUE : parseFloat(value);
  },
  "animation-direction": function (info, value) {
    return info.isReverse = value === "reverse";
  },
  "animation-fill-mode": function (info, value) {
    return info.isForwards = value === "forwards";
  }
});

var CssAnimationParser = function () {
  function CssAnimationParser() {}

  CssAnimationParser.keyframeAnimationsFromCSSDeclarations = function (declarations) {
    if (declarations === null || declarations === undefined) {
      return undefined;
    }

    var animations = new Array();
    var animationInfo = undefined;
    declarations.forEach(function (_a) {
      var property = _a.property,
          value = _a.value;

      if (property === "animation") {
        keyframeAnimationsFromCSSProperty(value, animations);
      } else {
        var propertyHandler = ANIMATION_PROPERTY_HANDLERS[property];

        if (propertyHandler) {
          if (animationInfo === undefined) {
            animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
            animations.push(animationInfo);
          }

          propertyHandler(animationInfo, value);
        }
      }
    });
    return animations.length === 0 ? undefined : animations;
  };

  CssAnimationParser.keyframesArrayFromCSS = function (keyframes) {
    var parsedKeyframes = new Array();

    for (var _i = 0, keyframes_1 = keyframes; _i < keyframes_1.length; _i++) {
      var keyframe = keyframes_1[_i];
      var declarations = parseKeyframeDeclarations(keyframe.declarations);

      for (var _a = 0, _b = keyframe.values; _a < _b.length; _a++) {
        var time_1 = _b[_a];

        if (time_1 === "from") {
          time_1 = 0;
        } else if (time_1 === "to") {
          time_1 = 1;
        } else {
          time_1 = parseFloat(time_1) / 100;

          if (time_1 < 0) {
            time_1 = 0;
          }

          if (time_1 > 100) {
            time_1 = 100;
          }
        }

        var current = parsedKeyframes[time_1];

        if (current === undefined) {
          current = {};
          current.duration = time_1;
          parsedKeyframes[time_1] = current;
        }

        for (var _c = 0, _d = keyframe.declarations; _c < _d.length; _c++) {
          var declaration = _d[_c];

          if (declaration.property === "animation-timing-function") {
            current.curve = converters_1.animationTimingFunctionConverter(declaration.value);
          }
        }

        current.declarations = declarations;
      }
    }

    var array = new Array();

    for (var parsedKeyframe in parsedKeyframes) {
      array.push(parsedKeyframes[parsedKeyframe]);
    }

    array.sort(function (a, b) {
      return a.duration - b.duration;
    });
    return array;
  };

  return CssAnimationParser;
}();

exports.CssAnimationParser = CssAnimationParser;

function keyframeAnimationsFromCSSProperty(value, animations) {
  if (typeof value === "string") {
    var values = value.split(/[,]+/);

    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
      var parsedValue = values_1[_i];
      var animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
      var arr = parsedValue.trim().split(/[ ]+/);

      if (arr.length > 0) {
        animationInfo.name = arr[0];
      }

      if (arr.length > 1) {
        animationInfo.duration = converters_1.timeConverter(arr[1]);
      }

      if (arr.length > 2) {
        animationInfo.curve = converters_1.animationTimingFunctionConverter(arr[2]);
      }

      if (arr.length > 3) {
        animationInfo.delay = converters_1.timeConverter(arr[3]);
      }

      if (arr.length > 4) {
        animationInfo.iterations = parseInt(arr[4]);
      }

      if (arr.length > 5) {
        animationInfo.isReverse = arr[4] === "reverse";
      }

      if (arr.length > 6) {
        animationInfo.isForwards = arr[5] === "forwards";
      }

      if (arr.length > 7) {
        throw new Error("Invalid value for animation: " + value);
      }

      animations.push(animationInfo);
    }
  }
}

function parseKeyframeDeclarations(unparsedKeyframeDeclarations) {
  var declarations = unparsedKeyframeDeclarations.reduce(function (declarations, _a) {
    var unparsedProperty = _a.property,
        unparsedValue = _a.value;

    var property = properties_1.CssAnimationProperty._getByCssName(unparsedProperty);

    if (typeof unparsedProperty === "string" && property && property._valueConverter) {
      declarations[property.name] = property._valueConverter(unparsedValue);
    } else if (typeof unparsedValue === "string" && unparsedProperty === "transform") {
      var transformations = style_properties_1.transformConverter(unparsedValue);
      Object.assign(declarations, transformations);
    }

    return declarations;
  }, {});
  return Object.keys(declarations).map(function (property) {
    return {
      property: property,
      value: declarations[property]
    };
  });
}

exports.parseKeyframeDeclarations = parseKeyframeDeclarations;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var utils_common_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils-common.js");

var parser = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var Match;

(function (Match) {
  Match.Dynamic = true;
  Match.Static = false;
})(Match || (Match = {}));

function getNodeDirectSibling(node) {
  if (!node.parent || !node.parent.getChildIndex || !node.parent.getChildAt) {
    return null;
  }

  var nodeIndex = node.parent.getChildIndex(node);

  if (nodeIndex === 0) {
    return null;
  }

  return node.parent.getChildAt(nodeIndex - 1);
}

function SelectorProperties(specificity, rarity, dynamic) {
  if (dynamic === void 0) {
    dynamic = false;
  }

  return function (cls) {
    cls.prototype.specificity = specificity;
    cls.prototype.rarity = rarity;
    cls.prototype.combinator = undefined;
    cls.prototype.dynamic = dynamic;
    return cls;
  };
}

var SelectorCore = function () {
  function SelectorCore() {}

  SelectorCore.prototype.lookupSort = function (sorter, base) {
    sorter.sortAsUniversal(base || this);
  };

  SelectorCore = __decorate([SelectorProperties(0, 0, Match.Static)], SelectorCore);
  return SelectorCore;
}();

exports.SelectorCore = SelectorCore;

var SimpleSelector = function (_super) {
  __extends(SimpleSelector, _super);

  function SimpleSelector() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SimpleSelector.prototype.accumulateChanges = function (node, map) {
    if (!this.dynamic) {
      return this.match(node);
    } else if (this.mayMatch(node)) {
      this.trackChanges(node, map);
      return true;
    }

    return false;
  };

  SimpleSelector.prototype.mayMatch = function (node) {
    return this.match(node);
  };

  SimpleSelector.prototype.trackChanges = function (node, map) {};

  return SimpleSelector;
}(SelectorCore);

exports.SimpleSelector = SimpleSelector;

function wrap(text) {
  return text ? " " + text + " " : "";
}

var InvalidSelector = function (_super) {
  __extends(InvalidSelector, _super);

  function InvalidSelector(e) {
    var _this = _super.call(this) || this;

    _this.e = e;
    return _this;
  }

  InvalidSelector.prototype.toString = function () {
    return "<error: " + this.e + ">";
  };

  InvalidSelector.prototype.match = function (node) {
    return false;
  };

  InvalidSelector.prototype.lookupSort = function (sorter, base) {};

  InvalidSelector = __decorate([SelectorProperties(0, 4, Match.Static)], InvalidSelector);
  return InvalidSelector;
}(SimpleSelector);

exports.InvalidSelector = InvalidSelector;

var UniversalSelector = function (_super) {
  __extends(UniversalSelector, _super);

  function UniversalSelector() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UniversalSelector.prototype.toString = function () {
    return "*" + wrap(this.combinator);
  };

  UniversalSelector.prototype.match = function (node) {
    return true;
  };

  UniversalSelector = __decorate([SelectorProperties(0, 0, Match.Static)], UniversalSelector);
  return UniversalSelector;
}(SimpleSelector);

exports.UniversalSelector = UniversalSelector;

var IdSelector = function (_super) {
  __extends(IdSelector, _super);

  function IdSelector(id) {
    var _this = _super.call(this) || this;

    _this.id = id;
    return _this;
  }

  IdSelector.prototype.toString = function () {
    return "#" + this.id + wrap(this.combinator);
  };

  IdSelector.prototype.match = function (node) {
    return node.id === this.id;
  };

  IdSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortById(this.id, base || this);
  };

  IdSelector = __decorate([SelectorProperties(65536, 3, Match.Static)], IdSelector);
  return IdSelector;
}(SimpleSelector);

exports.IdSelector = IdSelector;

var TypeSelector = function (_super) {
  __extends(TypeSelector, _super);

  function TypeSelector(cssType) {
    var _this = _super.call(this) || this;

    _this.cssType = cssType;
    return _this;
  }

  TypeSelector.prototype.toString = function () {
    return "" + this.cssType + wrap(this.combinator);
  };

  TypeSelector.prototype.match = function (node) {
    return node.cssType === this.cssType;
  };

  TypeSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortByType(this.cssType, base || this);
  };

  TypeSelector = __decorate([SelectorProperties(1, 1, Match.Static)], TypeSelector);
  return TypeSelector;
}(SimpleSelector);

exports.TypeSelector = TypeSelector;

var ClassSelector = function (_super) {
  __extends(ClassSelector, _super);

  function ClassSelector(cssClass) {
    var _this = _super.call(this) || this;

    _this.cssClass = cssClass;
    return _this;
  }

  ClassSelector.prototype.toString = function () {
    return "." + this.cssClass + wrap(this.combinator);
  };

  ClassSelector.prototype.match = function (node) {
    return node.cssClasses && node.cssClasses.has(this.cssClass);
  };

  ClassSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortByClass(this.cssClass, base || this);
  };

  ClassSelector = __decorate([SelectorProperties(256, 2, Match.Static)], ClassSelector);
  return ClassSelector;
}(SimpleSelector);

exports.ClassSelector = ClassSelector;

var AttributeSelector = function (_super) {
  __extends(AttributeSelector, _super);

  function AttributeSelector(attribute, test, value) {
    var _this = _super.call(this) || this;

    _this.attribute = attribute;
    _this.test = test;
    _this.value = value;

    if (!test) {
      _this.match = function (node) {
        return !types_1.isNullOrUndefined(node[attribute]);
      };

      return _this;
    }

    if (!value) {
      _this.match = function (node) {
        return false;
      };
    }

    var escapedValue = utils_common_1.escapeRegexSymbols(value);
    var regexp = null;

    switch (test) {
      case "^=":
        regexp = new RegExp("^" + escapedValue);
        break;

      case "$=":
        regexp = new RegExp(escapedValue + "$");
        break;

      case "*=":
        regexp = new RegExp(escapedValue);
        break;

      case "=":
        regexp = new RegExp("^" + escapedValue + "$");
        break;

      case "~=":
        if (/\s/.test(value)) {
          _this.match = function (node) {
            return false;
          };

          return _this;
        }

        regexp = new RegExp("(^|\\s)" + escapedValue + "(\\s|$)");
        break;

      case "|=":
        regexp = new RegExp("^" + escapedValue + "(-|$)");
        break;
    }

    if (regexp) {
      _this.match = function (node) {
        return regexp.test(node[attribute] + "");
      };

      return _this;
    } else {
      _this.match = function (node) {
        return false;
      };

      return _this;
    }
  }

  AttributeSelector.prototype.toString = function () {
    return "[" + this.attribute + wrap(this.test) + (this.test && this.value || "") + "]" + wrap(this.combinator);
  };

  AttributeSelector.prototype.match = function (node) {
    return false;
  };

  AttributeSelector.prototype.mayMatch = function (node) {
    return true;
  };

  AttributeSelector.prototype.trackChanges = function (node, map) {
    map.addAttribute(node, this.attribute);
  };

  AttributeSelector = __decorate([SelectorProperties(256, 0, Match.Dynamic)], AttributeSelector);
  return AttributeSelector;
}(SimpleSelector);

exports.AttributeSelector = AttributeSelector;

var PseudoClassSelector = function (_super) {
  __extends(PseudoClassSelector, _super);

  function PseudoClassSelector(cssPseudoClass) {
    var _this = _super.call(this) || this;

    _this.cssPseudoClass = cssPseudoClass;
    return _this;
  }

  PseudoClassSelector.prototype.toString = function () {
    return ":" + this.cssPseudoClass + wrap(this.combinator);
  };

  PseudoClassSelector.prototype.match = function (node) {
    return node.cssPseudoClasses && node.cssPseudoClasses.has(this.cssPseudoClass);
  };

  PseudoClassSelector.prototype.mayMatch = function (node) {
    return true;
  };

  PseudoClassSelector.prototype.trackChanges = function (node, map) {
    map.addPseudoClass(node, this.cssPseudoClass);
  };

  PseudoClassSelector = __decorate([SelectorProperties(256, 0, Match.Dynamic)], PseudoClassSelector);
  return PseudoClassSelector;
}(SimpleSelector);

exports.PseudoClassSelector = PseudoClassSelector;

var SimpleSelectorSequence = function (_super) {
  __extends(SimpleSelectorSequence, _super);

  function SimpleSelectorSequence(selectors) {
    var _this = _super.call(this) || this;

    _this.selectors = selectors;
    _this.specificity = selectors.reduce(function (sum, sel) {
      return sel.specificity + sum;
    }, 0);
    _this.head = _this.selectors.reduce(function (prev, curr) {
      return !prev || curr.rarity > prev.rarity ? curr : prev;
    }, null);
    _this.dynamic = selectors.some(function (sel) {
      return sel.dynamic;
    });
    return _this;
  }

  SimpleSelectorSequence.prototype.toString = function () {
    return "" + this.selectors.join("") + wrap(this.combinator);
  };

  SimpleSelectorSequence.prototype.match = function (node) {
    return this.selectors.every(function (sel) {
      return sel.match(node);
    });
  };

  SimpleSelectorSequence.prototype.mayMatch = function (node) {
    return this.selectors.every(function (sel) {
      return sel.mayMatch(node);
    });
  };

  SimpleSelectorSequence.prototype.trackChanges = function (node, map) {
    this.selectors.forEach(function (sel) {
      return sel.trackChanges(node, map);
    });
  };

  SimpleSelectorSequence.prototype.lookupSort = function (sorter, base) {
    this.head.lookupSort(sorter, base || this);
  };

  return SimpleSelectorSequence;
}(SimpleSelector);

exports.SimpleSelectorSequence = SimpleSelectorSequence;

var Selector = function (_super) {
  __extends(Selector, _super);

  function Selector(selectors) {
    var _this = _super.call(this) || this;

    _this.selectors = selectors;
    var supportedCombinator = [undefined, " ", ">", "+"];
    var siblingGroup;
    var lastGroup;
    var groups = [];
    selectors.reverse().forEach(function (sel) {
      if (supportedCombinator.indexOf(sel.combinator) === -1) {
        throw new Error("Unsupported combinator \"" + sel.combinator + "\".");
      }

      if (sel.combinator === undefined || sel.combinator === " ") {
        groups.push(lastGroup = [siblingGroup = []]);
      }

      if (sel.combinator === ">") {
        lastGroup.push(siblingGroup = []);
      }

      siblingGroup.push(sel);
    });
    _this.groups = groups.map(function (g) {
      return new Selector.ChildGroup(g.map(function (sg) {
        return new Selector.SiblingGroup(sg);
      }));
    });
    _this.last = selectors[0];
    _this.specificity = selectors.reduce(function (sum, sel) {
      return sel.specificity + sum;
    }, 0);
    _this.dynamic = selectors.some(function (sel) {
      return sel.dynamic;
    });
    return _this;
  }

  Selector.prototype.toString = function () {
    return this.selectors.join("");
  };

  Selector.prototype.match = function (node) {
    return this.groups.every(function (group, i) {
      if (i === 0) {
        node = group.match(node);
        return !!node;
      } else {
        var ancestor = node;

        while (ancestor = ancestor.parent) {
          if (node = group.match(ancestor)) {
            return true;
          }
        }

        return false;
      }
    });
  };

  Selector.prototype.lookupSort = function (sorter, base) {
    this.last.lookupSort(sorter, this);
  };

  Selector.prototype.accumulateChanges = function (node, map) {
    if (!this.dynamic) {
      return this.match(node);
    }

    var bounds = [];
    var mayMatch = this.groups.every(function (group, i) {
      if (i === 0) {
        var nextNode = group.mayMatch(node);
        bounds.push({
          left: node,
          right: node
        });
        node = nextNode;
        return !!node;
      } else {
        var ancestor = node;

        while (ancestor = ancestor.parent) {
          var nextNode = group.mayMatch(ancestor);

          if (nextNode) {
            bounds.push({
              left: ancestor,
              right: null
            });
            node = nextNode;
            return true;
          }
        }

        return false;
      }
    });

    if (!mayMatch) {
      return false;
    }

    if (!map) {
      return mayMatch;
    }

    for (var i = 0; i < this.groups.length; i++) {
      var group_1 = this.groups[i];

      if (!group_1.dynamic) {
        continue;
      }

      var bound = bounds[i];
      var node_1 = bound.left;

      do {
        if (group_1.mayMatch(node_1)) {
          group_1.trackChanges(node_1, map);
        }
      } while (node_1 !== bound.right && (node_1 = node_1.parent));
    }

    return mayMatch;
  };

  return Selector;
}(SelectorCore);

exports.Selector = Selector;

(function (Selector) {
  var ChildGroup = function () {
    function ChildGroup(selectors) {
      this.selectors = selectors;
      this.dynamic = selectors.some(function (sel) {
        return sel.dynamic;
      });
    }

    ChildGroup.prototype.match = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && !!sel.match(node);
      }) ? node : null;
    };

    ChildGroup.prototype.mayMatch = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && !!sel.mayMatch(node);
      }) ? node : null;
    };

    ChildGroup.prototype.trackChanges = function (node, map) {
      this.selectors.forEach(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && sel.trackChanges(node, map);
      });
    };

    return ChildGroup;
  }();

  Selector.ChildGroup = ChildGroup;

  var SiblingGroup = function () {
    function SiblingGroup(selectors) {
      this.selectors = selectors;
      this.dynamic = selectors.some(function (sel) {
        return sel.dynamic;
      });
    }

    SiblingGroup.prototype.match = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.match(node);
      }) ? node : null;
    };

    SiblingGroup.prototype.mayMatch = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.mayMatch(node);
      }) ? node : null;
    };

    SiblingGroup.prototype.trackChanges = function (node, map) {
      this.selectors.forEach(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.trackChanges(node, map);
      });
    };

    return SiblingGroup;
  }();

  Selector.SiblingGroup = SiblingGroup;
})(Selector = exports.Selector || (exports.Selector = {}));

exports.Selector = Selector;

var RuleSet = function () {
  function RuleSet(selectors, declarations) {
    var _this = this;

    this.selectors = selectors;
    this.declarations = declarations;
    this.selectors.forEach(function (sel) {
      return sel.ruleset = _this;
    });
  }

  RuleSet.prototype.toString = function () {
    return this.selectors.join(", ") + " {" + this.declarations.map(function (d, i) {
      return "" + (i === 0 ? " " : "") + d.property + ": " + d.value;
    }).join("; ") + " }";
  };

  RuleSet.prototype.lookupSort = function (sorter) {
    this.selectors.forEach(function (sel) {
      return sel.lookupSort(sorter);
    });
  };

  return RuleSet;
}();

exports.RuleSet = RuleSet;

function fromAstNodes(astRules) {
  return astRules.filter(isRule).map(function (rule) {
    var declarations = rule.declarations.filter(isDeclaration).map(createDeclaration);
    var selectors = rule.selectors.map(createSelector);
    var ruleset = new RuleSet(selectors, declarations);
    return ruleset;
  });
}

exports.fromAstNodes = fromAstNodes;

function createDeclaration(decl) {
  return {
    property: decl.property.toLowerCase(),
    value: decl.value
  };
}

function createSimpleSelectorFromAst(ast) {
  switch (ast.type) {
    case "*":
      return new UniversalSelector();

    case "#":
      return new IdSelector(ast.identifier);

    case "":
      return new TypeSelector(ast.identifier.replace(/-/, "").toLowerCase());

    case ".":
      return new ClassSelector(ast.identifier);

    case ":":
      return new PseudoClassSelector(ast.identifier);

    case "[]":
      return ast.test ? new AttributeSelector(ast.property, ast.test, ast.value) : new AttributeSelector(ast.property);
  }
}

function createSimpleSelectorSequenceFromAst(ast) {
  if (ast.length === 0) {
    return new InvalidSelector(new Error("Empty simple selector sequence."));
  } else if (ast.length === 1) {
    return createSimpleSelectorFromAst(ast[0]);
  } else {
    return new SimpleSelectorSequence(ast.map(createSimpleSelectorFromAst));
  }
}

function createSelectorFromAst(ast) {
  if (ast.length === 0) {
    return new InvalidSelector(new Error("Empty selector."));
  } else if (ast.length === 1) {
    return createSimpleSelectorSequenceFromAst(ast[0][0]);
  } else {
    var simpleSelectorSequences = [];

    for (var i = 0; i < ast.length; i++) {
      var simpleSelectorSequence = createSimpleSelectorSequenceFromAst(ast[i][0]);
      var combinator = ast[i][1];

      if (combinator) {
        simpleSelectorSequence.combinator = combinator;
      }

      simpleSelectorSequences.push(simpleSelectorSequence);
    }

    return new Selector(simpleSelectorSequences);
  }
}

function createSelector(sel) {
  try {
    var parsedSelector = parser.parseSelector(sel);

    if (!parsedSelector) {
      return new InvalidSelector(new Error("Empty selector"));
    }

    return createSelectorFromAst(parsedSelector.value);
  } catch (e) {
    return new InvalidSelector(e);
  }
}

exports.createSelector = createSelector;

function isRule(node) {
  return node.type === "rule";
}

function isDeclaration(node) {
  return node.type === "declaration";
}

var SelectorsMap = function () {
  function SelectorsMap(rulesets) {
    var _this = this;

    this.id = {};
    this.class = {};
    this.type = {};
    this.universal = [];
    this.position = 0;
    rulesets.forEach(function (rule) {
      return rule.lookupSort(_this);
    });
  }

  SelectorsMap.prototype.query = function (node) {
    var _this = this;

    var selectorClasses = [this.universal, this.id[node.id], this.type[node.cssType]];

    if (node.cssClasses) {
      node.cssClasses.forEach(function (c) {
        return selectorClasses.push(_this.class[c]);
      });
    }

    var selectors = selectorClasses.filter(function (arr) {
      return !!arr;
    }).reduce(function (cur, next) {
      return cur.concat(next);
    }, []);
    var selectorsMatch = new SelectorsMatch();
    selectorsMatch.selectors = selectors.filter(function (sel) {
      return sel.sel.accumulateChanges(node, selectorsMatch);
    }).sort(function (a, b) {
      return a.sel.specificity - b.sel.specificity || a.pos - b.pos;
    }).map(function (docSel) {
      return docSel.sel;
    });
    return selectorsMatch;
  };

  SelectorsMap.prototype.sortById = function (id, sel) {
    this.addToMap(this.id, id, sel);
  };

  SelectorsMap.prototype.sortByClass = function (cssClass, sel) {
    this.addToMap(this.class, cssClass, sel);
  };

  SelectorsMap.prototype.sortByType = function (cssType, sel) {
    this.addToMap(this.type, cssType, sel);
  };

  SelectorsMap.prototype.sortAsUniversal = function (sel) {
    this.universal.push(this.makeDocSelector(sel));
  };

  SelectorsMap.prototype.addToMap = function (map, head, sel) {
    this.position++;
    var list = map[head];

    if (list) {
      list.push(this.makeDocSelector(sel));
    } else {
      map[head] = [this.makeDocSelector(sel)];
    }
  };

  SelectorsMap.prototype.makeDocSelector = function (sel) {
    return {
      sel: sel,
      pos: this.position++
    };
  };

  return SelectorsMap;
}();

exports.SelectorsMap = SelectorsMap;

var SelectorsMatch = function () {
  function SelectorsMatch() {
    this.changeMap = new Map();
  }

  SelectorsMatch.prototype.addAttribute = function (node, attribute) {
    var deps = this.properties(node);

    if (!deps.attributes) {
      deps.attributes = new Set();
    }

    deps.attributes.add(attribute);
  };

  SelectorsMatch.prototype.addPseudoClass = function (node, pseudoClass) {
    var deps = this.properties(node);

    if (!deps.pseudoClasses) {
      deps.pseudoClasses = new Set();
    }

    deps.pseudoClasses.add(pseudoClass);
  };

  SelectorsMatch.prototype.properties = function (node) {
    var set = this.changeMap.get(node);

    if (!set) {
      this.changeMap.set(node, set = {});
    }

    return set;
  };

  return SelectorsMatch;
}();

exports.SelectorsMatch = SelectorsMatch;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/font-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var Font = function () {
  function Font(fontFamily, fontSize, fontStyle, fontWeight) {
    this.fontFamily = fontFamily;
    this.fontSize = fontSize;
    this.fontStyle = fontStyle;
    this.fontWeight = fontWeight;
  }

  Object.defineProperty(Font.prototype, "isItalic", {
    get: function () {
      return this.fontStyle === FontStyle.ITALIC;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Font.prototype, "isBold", {
    get: function () {
      return this.fontWeight === FontWeight.SEMI_BOLD || this.fontWeight === FontWeight.BOLD || this.fontWeight === "700" || this.fontWeight === FontWeight.EXTRA_BOLD || this.fontWeight === FontWeight.BLACK;
    },
    enumerable: true,
    configurable: true
  });

  Font.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
  };

  Font.default = undefined;
  return Font;
}();

exports.Font = Font;
var FontStyle;

(function (FontStyle) {
  FontStyle.NORMAL = "normal";
  FontStyle.ITALIC = "italic";
  FontStyle.isValid = properties_1.makeValidator(FontStyle.NORMAL, FontStyle.ITALIC);
  FontStyle.parse = properties_1.makeParser(FontStyle.isValid);
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));

var FontWeight;

(function (FontWeight) {
  FontWeight.THIN = "100";
  FontWeight.EXTRA_LIGHT = "200";
  FontWeight.LIGHT = "300";
  FontWeight.NORMAL = "normal";
  FontWeight.MEDIUM = "500";
  FontWeight.SEMI_BOLD = "600";
  FontWeight.BOLD = "bold";
  FontWeight.EXTRA_BOLD = "800";
  FontWeight.BLACK = "900";
  FontWeight.isValid = properties_1.makeValidator(FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK);
  FontWeight.parse = properties_1.makeParser(FontWeight.isValid);
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));

function parseFontFamily(value) {
  var result = new Array();

  if (!value) {
    return result;
  }

  var split = value.split(",");

  for (var i = 0; i < split.length; i++) {
    var str = split[i].trim().replace(/['"]+/g, "");

    if (str) {
      result.push(str);
    }
  }

  return result;
}

exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;

(function (genericFontFamilies) {
  genericFontFamilies.serif = "serif";
  genericFontFamilies.sansSerif = "sans-serif";
  genericFontFamilies.monospace = "monospace";
  genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));

var styles = new Set();
[FontStyle.NORMAL, FontStyle.ITALIC].forEach(function (val, i, a) {
  return styles.add(val);
});
var weights = new Set();
[FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK].forEach(function (val, i, a) {
  return weights.add(val);
});

function parseFont(fontValue) {
  var result = {
    fontStyle: "normal",
    fontVariant: "normal",
    fontWeight: "normal"
  };
  var parts = fontValue.split(/\s+/);
  var part;

  while (part = parts.shift()) {
    if (part === "normal") {} else if (part === "small-caps") {
      result.fontVariant = part;
    } else if (styles.has(part)) {
      result.fontStyle = part;
    } else if (weights.has(part)) {
      result.fontWeight = part;
    } else if (!result.fontSize) {
      var sizes = part.split("/");
      result.fontSize = sizes[0];
      result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
    } else {
      result.fontFamily = part;

      if (parts.length) {
        result.fontFamily += " " + parts.join(" ");
      }

      break;
    }
  }

  return result;
}

exports.parseFont = parseFont;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/font.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font-common.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/font-common.js"));

var FONTS_BASE_PATH = "/fonts/";
var typefaceCache = new Map();
var appAssets;

var Font = function (_super) {
  __extends(Font, _super);

  function Font(family, size, style, weight) {
    return _super.call(this, family, size, style, weight) || this;
  }

  Font.prototype.withFontFamily = function (family) {
    return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
  };

  Font.prototype.withFontStyle = function (style) {
    return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
  };

  Font.prototype.withFontWeight = function (weight) {
    return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
  };

  Font.prototype.withFontSize = function (size) {
    return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
  };

  Font.prototype.getAndroidTypeface = function () {
    if (!this._typeface) {
      this._typeface = createTypeface(this);
    }

    return this._typeface;
  };

  Font.prototype.getUIFont = function (defaultFont) {
    return undefined;
  };

  Font.default = new Font(undefined, undefined, "normal", "normal");
  return Font;
}(font_common_1.Font);

exports.Font = Font;

function loadFontFromFile(fontFamily) {
  appAssets = appAssets || application.android.context.getAssets();

  if (!appAssets) {
    return null;
  }

  var result = typefaceCache.get(fontFamily);

  if (result === undefined) {
    result = null;
    var fontAssetPath = void 0;
    var basePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFamily);

    if (fs.File.exists(basePath + ".ttf")) {
      fontAssetPath = FONTS_BASE_PATH + fontFamily + ".ttf";
    } else if (fs.File.exists(basePath + ".otf")) {
      fontAssetPath = FONTS_BASE_PATH + fontFamily + ".otf";
    } else {
      if (trace_1.isEnabled()) {
        trace_1.write("Could not find font file for " + fontFamily, trace_1.categories.Error, trace_1.messageType.error);
      }
    }

    if (fontAssetPath) {
      try {
        fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);
        result = android.graphics.Typeface.createFromFile(fontAssetPath);
      } catch (e) {
        if (trace_1.isEnabled()) {
          trace_1.write("Error loading font asset: " + fontAssetPath, trace_1.categories.Error, trace_1.messageType.error);
        }
      }
    }

    typefaceCache.set(fontFamily, result);
  }

  return result;
}

function createTypeface(font) {
  var fontStyle = 0;

  if (font.isBold) {
    fontStyle |= android.graphics.Typeface.BOLD;
  }

  if (font.isItalic) {
    fontStyle |= android.graphics.Typeface.ITALIC;
  }

  var fonts = font_common_1.parseFontFamily(font.fontFamily);
  var result = null;

  for (var i = 0; i < fonts.length; i++) {
    switch (fonts[i].toLowerCase()) {
      case font_common_1.genericFontFamilies.serif:
        result = android.graphics.Typeface.create("serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
        break;

      case font_common_1.genericFontFamilies.sansSerif:
      case font_common_1.genericFontFamilies.system:
        result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
        break;

      case font_common_1.genericFontFamilies.monospace:
        result = android.graphics.Typeface.create("monospace" + getFontWeightSuffix(font.fontWeight), fontStyle);
        break;

      default:
        result = loadFontFromFile(fonts[i]);

        if (result && fontStyle) {
          result = android.graphics.Typeface.create(result, fontStyle);
        }

        break;
    }

    if (result) {
      break;
    }
  }

  if (!result) {
    result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
  }

  return result;
}

function getFontWeightSuffix(fontWeight) {
  switch (fontWeight) {
    case font_common_1.FontWeight.THIN:
      return android.os.Build.VERSION.SDK_INT >= 16 ? "-thin" : "";

    case font_common_1.FontWeight.EXTRA_LIGHT:
    case font_common_1.FontWeight.LIGHT:
      return android.os.Build.VERSION.SDK_INT >= 16 ? "-light" : "";

    case font_common_1.FontWeight.NORMAL:
    case "400":
    case undefined:
    case null:
      return "";

    case font_common_1.FontWeight.MEDIUM:
    case font_common_1.FontWeight.SEMI_BOLD:
      return android.os.Build.VERSION.SDK_INT >= 21 ? "-medium" : "";

    case font_common_1.FontWeight.BOLD:
    case "700":
    case font_common_1.FontWeight.EXTRA_BOLD:
      return "";

    case font_common_1.FontWeight.BLACK:
      return android.os.Build.VERSION.SDK_INT >= 21 ? "-black" : "";

    default:
      throw new Error("Invalid font weight: \"" + fontWeight + "\"");
  }
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/linear-gradient.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var LinearGradient = function () {
  function LinearGradient() {}

  LinearGradient.parse = function (value) {
    var result = new LinearGradient();
    result.angle = value.angle;
    result.colorStops = value.colors.map(function (color) {
      var offset = color.offset || null;
      var offsetUnit;

      if (offset && offset.unit === "%") {
        offsetUnit = {
          unit: "%",
          value: offset.value
        };
      }

      return {
        color: new color_1.Color(color.argb),
        offset: offsetUnit
      };
    });
    return result;
  };

  LinearGradient.equals = function (first, second) {
    if (!first && !second) {
      return true;
    } else if (!first || !second) {
      return false;
    }

    if (first.angle !== second.angle) {
      return false;
    }

    if (first.colorStops.length !== second.colorStops.length) {
      return false;
    }

    for (var i = 0; i < first.colorStops.length; i++) {
      var firstStop = first.colorStops[i];
      var secondStop = second.colorStops[i];

      if (firstStop.offset !== secondStop.offset) {
        return false;
      }

      if (!color_1.Color.equals(firstStop.color, secondStop.color)) {
        return false;
      }
    }

    return true;
  };

  return LinearGradient;
}();

exports.LinearGradient = LinearGradient;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style-properties.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var background_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/background.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var number_utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/number-utils.js");

var matrix_1 = __webpack_require__("../node_modules/tns-core-modules/matrix/matrix.js");

var parser = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

function equalsCommon(a, b) {
  if (a == "auto") {
    return b == "auto";
  }

  if (typeof a === "number") {
    if (b == "auto") {
      return false;
    }

    if (typeof b === "number") {
      return a == b;
    }

    return b.unit == "dip" && a == b.value;
  }

  if (b == "auto") {
    return false;
  }

  if (typeof b === "number") {
    return a.unit == "dip" && a.value == b;
  }

  return a.value == b.value && a.unit == b.unit;
}

function convertToStringCommon(length) {
  if (length == "auto") {
    return "auto";
  }

  if (typeof length === "number") {
    return length.toString();
  }

  var val = length.value;

  if (length.unit === "%") {
    val *= 100;
  }

  return val + length.unit;
}

function toDevicePixelsCommon(length, auto, parentAvailableWidth) {
  if (auto === void 0) {
    auto = Number.NaN;
  }

  if (parentAvailableWidth === void 0) {
    parentAvailableWidth = Number.NaN;
  }

  if (length == "auto") {
    return auto;
  }

  if (typeof length === "number") {
    return utils_1.layout.round(utils_1.layout.toDevicePixels(length));
  }

  switch (length.unit) {
    case "px":
      return utils_1.layout.round(length.value);

    case "%":
      return utils_1.layout.round(parentAvailableWidth * length.value);

    case "dip":
    default:
      return utils_1.layout.round(utils_1.layout.toDevicePixels(length.value));
  }
}

var PercentLength;

(function (PercentLength) {
  function parse(fromValue) {
    if (fromValue == "auto") {
      return "auto";
    }

    if (typeof fromValue === "string") {
      var stringValue = fromValue.trim();
      var percentIndex = stringValue.indexOf("%");

      if (percentIndex !== -1) {
        var value = void 0;

        if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
          value = Number.NaN;
        } else {
          value = parseFloat(stringValue.substring(0, stringValue.length - 1).trim()) / 100;
        }

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return {
          unit: "%",
          value: value
        };
      } else if (stringValue.indexOf("px") !== -1) {
        stringValue = stringValue.replace("px", "").trim();
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return {
          unit: "px",
          value: value
        };
      } else {
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return value;
      }
    } else {
      return fromValue;
    }
  }

  PercentLength.parse = parse;
  PercentLength.equals = equalsCommon;
  PercentLength.toDevicePixels = toDevicePixelsCommon;
  PercentLength.convertToString = convertToStringCommon;
})(PercentLength = exports.PercentLength || (exports.PercentLength = {}));

var Length;

(function (Length) {
  function parse(fromValue) {
    if (fromValue == "auto") {
      return "auto";
    }

    if (typeof fromValue === "string") {
      var stringValue = fromValue.trim();

      if (stringValue.indexOf("px") !== -1) {
        stringValue = stringValue.replace("px", "").trim();
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + stringValue);
        }

        return {
          unit: "px",
          value: value
        };
      } else {
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + stringValue);
        }

        return value;
      }
    } else {
      return fromValue;
    }
  }

  Length.parse = parse;
  Length.equals = equalsCommon;
  Length.toDevicePixels = toDevicePixelsCommon;
  Length.convertToString = convertToStringCommon;
})(Length = exports.Length || (exports.Length = {}));

exports.zeroLength = {
  value: 0,
  unit: "px"
};
exports.minWidthProperty = new properties_1.CssProperty({
  name: "minWidth",
  cssName: "min-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectiveMinWidth = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.minWidthProperty.register(properties_1.Style);
exports.minHeightProperty = new properties_1.CssProperty({
  name: "minHeight",
  cssName: "min-height",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectiveMinHeight = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.minHeightProperty.register(properties_1.Style);
exports.widthProperty = new properties_1.CssProperty({
  name: "width",
  cssName: "width",
  defaultValue: "auto",
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.widthProperty.register(properties_1.Style);
exports.heightProperty = new properties_1.CssProperty({
  name: "height",
  cssName: "height",
  defaultValue: "auto",
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.heightProperty.register(properties_1.Style);
var marginProperty = new properties_1.ShorthandProperty({
  name: "margin",
  cssName: "margin",
  getter: function () {
    if (PercentLength.equals(this.marginTop, this.marginRight) && PercentLength.equals(this.marginTop, this.marginBottom) && PercentLength.equals(this.marginTop, this.marginLeft)) {
      return this.marginTop;
    }

    return PercentLength.convertToString(this.marginTop) + " " + PercentLength.convertToString(this.marginRight) + " " + PercentLength.convertToString(this.marginBottom) + " " + PercentLength.convertToString(this.marginLeft);
  },
  converter: convertToMargins
});
marginProperty.register(properties_1.Style);
exports.marginLeftProperty = new properties_1.CssProperty({
  name: "marginLeft",
  cssName: "margin-left",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginLeftProperty.register(properties_1.Style);
exports.marginRightProperty = new properties_1.CssProperty({
  name: "marginRight",
  cssName: "margin-right",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginRightProperty.register(properties_1.Style);
exports.marginTopProperty = new properties_1.CssProperty({
  name: "marginTop",
  cssName: "margin-top",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginTopProperty.register(properties_1.Style);
exports.marginBottomProperty = new properties_1.CssProperty({
  name: "marginBottom",
  cssName: "margin-bottom",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginBottomProperty.register(properties_1.Style);
var paddingProperty = new properties_1.ShorthandProperty({
  name: "padding",
  cssName: "padding",
  getter: function () {
    if (Length.equals(this.paddingTop, this.paddingRight) && Length.equals(this.paddingTop, this.paddingBottom) && Length.equals(this.paddingTop, this.paddingLeft)) {
      return this.paddingTop;
    }

    return Length.convertToString(this.paddingTop) + " " + Length.convertToString(this.paddingRight) + " " + Length.convertToString(this.paddingBottom) + " " + Length.convertToString(this.paddingLeft);
  },
  converter: convertToPaddings
});
paddingProperty.register(properties_1.Style);
exports.paddingLeftProperty = new properties_1.CssProperty({
  name: "paddingLeft",
  cssName: "padding-left",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectivePaddingLeft = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingLeftProperty.register(properties_1.Style);
exports.paddingRightProperty = new properties_1.CssProperty({
  name: "paddingRight",
  cssName: "padding-right",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectivePaddingRight = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingRightProperty.register(properties_1.Style);
exports.paddingTopProperty = new properties_1.CssProperty({
  name: "paddingTop",
  cssName: "padding-top",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectivePaddingTop = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingTopProperty.register(properties_1.Style);
exports.paddingBottomProperty = new properties_1.CssProperty({
  name: "paddingBottom",
  cssName: "padding-bottom",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectivePaddingBottom = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingBottomProperty.register(properties_1.Style);
var HorizontalAlignment;

(function (HorizontalAlignment) {
  HorizontalAlignment.LEFT = "left";
  HorizontalAlignment.CENTER = "center";
  HorizontalAlignment.RIGHT = "right";
  HorizontalAlignment.STRETCH = "stretch";
  HorizontalAlignment.isValid = properties_1.makeValidator(HorizontalAlignment.LEFT, HorizontalAlignment.CENTER, HorizontalAlignment.RIGHT, HorizontalAlignment.STRETCH);
  HorizontalAlignment.parse = properties_1.makeParser(HorizontalAlignment.isValid);
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));

exports.horizontalAlignmentProperty = new properties_1.CssProperty({
  name: "horizontalAlignment",
  cssName: "horizontal-align",
  defaultValue: HorizontalAlignment.STRETCH,
  affectsLayout: platform_1.isIOS,
  valueConverter: HorizontalAlignment.parse
});
exports.horizontalAlignmentProperty.register(properties_1.Style);
var VerticalAlignment;

(function (VerticalAlignment) {
  VerticalAlignment.TOP = "top";
  VerticalAlignment.MIDDLE = "middle";
  VerticalAlignment.BOTTOM = "bottom";
  VerticalAlignment.STRETCH = "stretch";
  VerticalAlignment.isValid = properties_1.makeValidator(VerticalAlignment.TOP, VerticalAlignment.MIDDLE, VerticalAlignment.BOTTOM, VerticalAlignment.STRETCH);

  VerticalAlignment.parse = function (value) {
    return value.toLowerCase() === "center" ? VerticalAlignment.MIDDLE : parseStrict(value);
  };

  var parseStrict = properties_1.makeParser(VerticalAlignment.isValid);
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));

exports.verticalAlignmentProperty = new properties_1.CssProperty({
  name: "verticalAlignment",
  cssName: "vertical-align",
  defaultValue: VerticalAlignment.STRETCH,
  affectsLayout: platform_1.isIOS,
  valueConverter: VerticalAlignment.parse
});
exports.verticalAlignmentProperty.register(properties_1.Style);

function parseThickness(value) {
  if (typeof value === "string") {
    var arr = value.split(/[ ,]+/);
    var top_1;
    var right = void 0;
    var bottom = void 0;
    var left = void 0;

    if (arr.length === 1) {
      top_1 = arr[0];
      right = arr[0];
      bottom = arr[0];
      left = arr[0];
    } else if (arr.length === 2) {
      top_1 = arr[0];
      bottom = arr[0];
      right = arr[1];
      left = arr[1];
    } else if (arr.length === 3) {
      top_1 = arr[0];
      right = arr[1];
      left = arr[1];
      bottom = arr[2];
    } else if (arr.length === 4) {
      top_1 = arr[0];
      right = arr[1];
      bottom = arr[2];
      left = arr[3];
    } else {
      throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
    }

    return {
      top: top_1,
      right: right,
      bottom: bottom,
      left: left
    };
  } else {
    return value;
  }
}

function convertToMargins(value) {
  if (typeof value === "string" && value !== "auto") {
    var thickness = parseThickness(value);
    return [[exports.marginTopProperty, PercentLength.parse(thickness.top)], [exports.marginRightProperty, PercentLength.parse(thickness.right)], [exports.marginBottomProperty, PercentLength.parse(thickness.bottom)], [exports.marginLeftProperty, PercentLength.parse(thickness.left)]];
  } else {
    return [[exports.marginTopProperty, value], [exports.marginRightProperty, value], [exports.marginBottomProperty, value], [exports.marginLeftProperty, value]];
  }
}

function convertToPaddings(value) {
  if (typeof value === "string" && value !== "auto") {
    var thickness = parseThickness(value);
    return [[exports.paddingTopProperty, Length.parse(thickness.top)], [exports.paddingRightProperty, Length.parse(thickness.right)], [exports.paddingBottomProperty, Length.parse(thickness.bottom)], [exports.paddingLeftProperty, Length.parse(thickness.left)]];
  } else {
    return [[exports.paddingTopProperty, value], [exports.paddingRightProperty, value], [exports.paddingBottomProperty, value], [exports.paddingLeftProperty, value]];
  }
}

exports.rotateProperty = new properties_1.CssAnimationProperty({
  name: "rotate",
  cssName: "rotate",
  defaultValue: 0,
  valueConverter: parseFloat
});
exports.rotateProperty.register(properties_1.Style);
exports.scaleXProperty = new properties_1.CssAnimationProperty({
  name: "scaleX",
  cssName: "scaleX",
  defaultValue: 1,
  valueConverter: parseFloat
});
exports.scaleXProperty.register(properties_1.Style);
exports.scaleYProperty = new properties_1.CssAnimationProperty({
  name: "scaleY",
  cssName: "scaleY",
  defaultValue: 1,
  valueConverter: parseFloat
});
exports.scaleYProperty.register(properties_1.Style);

function parseDIPs(value) {
  if (value.indexOf("px") !== -1) {
    return utils_1.layout.toDeviceIndependentPixels(parseFloat(value.replace("px", "").trim()));
  } else {
    return parseFloat(value.replace("dip", "").trim());
  }
}

exports.translateXProperty = new properties_1.CssAnimationProperty({
  name: "translateX",
  cssName: "translateX",
  defaultValue: 0,
  valueConverter: parseDIPs
});
exports.translateXProperty.register(properties_1.Style);
exports.translateYProperty = new properties_1.CssAnimationProperty({
  name: "translateY",
  cssName: "translateY",
  defaultValue: 0,
  valueConverter: parseDIPs
});
exports.translateYProperty.register(properties_1.Style);
var transformProperty = new properties_1.ShorthandProperty({
  name: "transform",
  cssName: "transform",
  getter: function () {
    var scaleX = this.scaleX;
    var scaleY = this.scaleY;
    var translateX = this.translateX;
    var translateY = this.translateY;
    var rotate = this.rotate;
    var result = "";

    if (translateX !== 0 || translateY !== 0) {
      result += "translate(" + translateX + ", " + translateY + ") ";
    }

    if (scaleX !== 1 || scaleY !== 1) {
      result += "scale(" + scaleX + ", " + scaleY + ") ";
    }

    if (rotate !== 0) {
      result += "rotate (" + rotate + ")";
    }

    return result.trim();
  },
  converter: convertToTransform
});
transformProperty.register(properties_1.Style);
var IDENTITY_TRANSFORMATION = {
  translate: {
    x: 0,
    y: 0
  },
  rotate: 0,
  scale: {
    x: 1,
    y: 1
  }
};
var TRANSFORM_SPLITTER = new RegExp(/\s*(.+?)\((.*?)\)/g);
var TRANSFORMATIONS = Object.freeze(["rotate", "translate", "translate3d", "translateX", "translateY", "scale", "scale3d", "scaleX", "scaleY"]);
var STYLE_TRANSFORMATION_MAP = Object.freeze({
  "scale": function (value) {
    return {
      property: "scale",
      value: value
    };
  },
  "scale3d": function (value) {
    return {
      property: "scale",
      value: value
    };
  },
  "scaleX": function (_a) {
    var x = _a.x;
    return {
      property: "scale",
      value: {
        x: x,
        y: IDENTITY_TRANSFORMATION.scale.y
      }
    };
  },
  "scaleY": function (_a) {
    var y = _a.y;
    return {
      property: "scale",
      value: {
        y: y,
        x: IDENTITY_TRANSFORMATION.scale.x
      }
    };
  },
  "translate": function (value) {
    return {
      property: "translate",
      value: value
    };
  },
  "translate3d": function (value) {
    return {
      property: "translate",
      value: value
    };
  },
  "translateX": function (_a) {
    var x = _a.x;
    return {
      property: "translate",
      value: {
        x: x,
        y: IDENTITY_TRANSFORMATION.translate.y
      }
    };
  },
  "translateY": function (_a) {
    var y = _a.y;
    return {
      property: "translate",
      value: {
        y: y,
        x: IDENTITY_TRANSFORMATION.translate.x
      }
    };
  },
  "rotate": function (value) {
    return {
      property: "rotate",
      value: value
    };
  }
});

function convertToTransform(value) {
  if (value === properties_1.unsetValue) {
    value = "none";
  }

  var _a = transformConverter(value),
      translate = _a.translate,
      rotate = _a.rotate,
      scale = _a.scale;

  return [[exports.translateXProperty, translate.x], [exports.translateYProperty, translate.y], [exports.scaleXProperty, scale.x], [exports.scaleYProperty, scale.y], [exports.rotateProperty, rotate]];
}

function transformConverter(text) {
  var transformations = parseTransformString(text);

  if (text === "none" || text === "" || !transformations.length) {
    return IDENTITY_TRANSFORMATION;
  }

  var usedTransforms = transformations.map(function (t) {
    return t.property;
  });

  if (!utils_1.hasDuplicates(usedTransforms)) {
    var fullTransformations_1 = __assign({}, IDENTITY_TRANSFORMATION);

    transformations.forEach(function (transform) {
      fullTransformations_1[transform.property] = transform.value;
    });
    return fullTransformations_1;
  }

  var affineMatrix = transformations.map(matrix_1.getTransformMatrix).reduce(matrix_1.multiplyAffine2d);
  var cssMatrix = matrix_1.matrixArrayToCssMatrix(affineMatrix);
  return matrix_1.decompose2DTransformMatrix(cssMatrix);
}

exports.transformConverter = transformConverter;

function parseTransformString(text) {
  var matches = [];
  var match;

  while ((match = TRANSFORM_SPLITTER.exec(text)) !== null) {
    var property = match[1];
    var value = convertTransformValue(property, match[2]);

    if (TRANSFORMATIONS.indexOf(property) !== -1) {
      matches.push(normalizeTransformation({
        property: property,
        value: value
      }));
    }
  }

  return matches;
}

function normalizeTransformation(_a) {
  var property = _a.property,
      value = _a.value;
  return STYLE_TRANSFORMATION_MAP[property](value);
}

function convertTransformValue(property, stringValue) {
  var _a = stringValue.split(",").map(parseFloat),
      x = _a[0],
      _b = _a[1],
      y = _b === void 0 ? x : _b;

  if (property === "rotate") {
    return stringValue.slice(-3) === "rad" ? number_utils_1.radiansToDegrees(x) : x;
  }

  return {
    x: x,
    y: y
  };
}

var backgroundProperty = new properties_1.ShorthandProperty({
  name: "background",
  cssName: "background",
  getter: function () {
    return this.backgroundColor + " " + this.backgroundImage + " " + this.backgroundRepeat + " " + this.backgroundPosition;
  },
  converter: convertToBackgrounds
});
backgroundProperty.register(properties_1.Style);
exports.backgroundInternalProperty = new properties_1.CssProperty({
  name: "backgroundInternal",
  cssName: "_backgroundInternal",
  defaultValue: background_1.Background.default
});
exports.backgroundInternalProperty.register(properties_1.Style);
exports.backgroundImageProperty = new properties_1.CssProperty({
  name: "backgroundImage",
  cssName: "background-image",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withImage(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: function (value1, value2) {
    if (value1 instanceof linear_gradient_1.LinearGradient && value2 instanceof linear_gradient_1.LinearGradient) {
      return linear_gradient_1.LinearGradient.equals(value1, value2);
    } else {
      return value1 === value2;
    }
  },
  valueConverter: function (value) {
    if (typeof value === "string") {
      var parsed = parser.parseBackground(value);

      if (parsed) {
        var background = parsed.value;
        value = typeof background.image === "object" ? linear_gradient_1.LinearGradient.parse(background.image) : value;
      }
    }

    return value;
  }
});
exports.backgroundImageProperty.register(properties_1.Style);
exports.backgroundColorProperty = new properties_1.CssAnimationProperty({
  name: "backgroundColor",
  cssName: "background-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.backgroundColorProperty.register(properties_1.Style);
var BackgroundRepeat;

(function (BackgroundRepeat) {
  BackgroundRepeat.REPEAT = "repeat";
  BackgroundRepeat.REPEAT_X = "repeat-x";
  BackgroundRepeat.REPEAT_Y = "repeat-y";
  BackgroundRepeat.NO_REPEAT = "no-repeat";
  BackgroundRepeat.isValid = properties_1.makeValidator(BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT_X, BackgroundRepeat.REPEAT_Y, BackgroundRepeat.NO_REPEAT);
  BackgroundRepeat.parse = properties_1.makeParser(BackgroundRepeat.isValid);
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));

exports.backgroundRepeatProperty = new properties_1.CssProperty({
  name: "backgroundRepeat",
  cssName: "background-repeat",
  valueConverter: BackgroundRepeat.parse,
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withRepeat(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundRepeatProperty.register(properties_1.Style);
exports.backgroundSizeProperty = new properties_1.CssProperty({
  name: "backgroundSize",
  cssName: "background-size",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withSize(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundSizeProperty.register(properties_1.Style);
exports.backgroundPositionProperty = new properties_1.CssProperty({
  name: "backgroundPosition",
  cssName: "background-position",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withPosition(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundPositionProperty.register(properties_1.Style);

function convertToBackgrounds(value) {
  if (typeof value === "string") {
    var backgrounds = parser.parseBackground(value).value;
    var backgroundColor = backgrounds.color ? new color_1.Color(backgrounds.color) : properties_1.unsetValue;
    var backgroundImage = void 0;

    if (typeof backgrounds.image === "object" && backgrounds.image) {
      backgroundImage = linear_gradient_1.LinearGradient.parse(backgrounds.image);
    } else {
      backgroundImage = backgrounds.image || properties_1.unsetValue;
    }

    var backgroundRepeat = backgrounds.repeat || properties_1.unsetValue;
    var backgroundPosition = backgrounds.position ? backgrounds.position.text : properties_1.unsetValue;
    return [[exports.backgroundColorProperty, backgroundColor], [exports.backgroundImageProperty, backgroundImage], [exports.backgroundRepeatProperty, backgroundRepeat], [exports.backgroundPositionProperty, backgroundPosition]];
  } else {
    return [[exports.backgroundColorProperty, properties_1.unsetValue], [exports.backgroundImageProperty, properties_1.unsetValue], [exports.backgroundRepeatProperty, properties_1.unsetValue], [exports.backgroundPositionProperty, properties_1.unsetValue]];
  }
}

function parseBorderColor(value) {
  var result = {
    top: undefined,
    right: undefined,
    bottom: undefined,
    left: undefined
  };

  if (value.indexOf("rgb") === 0) {
    result.top = result.right = result.bottom = result.left = new color_1.Color(value);
    return result;
  }

  var arr = value.split(/[ ,]+/);

  if (arr.length === 1) {
    var arr0 = new color_1.Color(arr[0]);
    result.top = arr0;
    result.right = arr0;
    result.bottom = arr0;
    result.left = arr0;
  } else if (arr.length === 2) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr0;
    result.left = arr1;
  } else if (arr.length === 3) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    var arr2 = new color_1.Color(arr[2]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr2;
    result.left = arr1;
  } else if (arr.length === 4) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    var arr2 = new color_1.Color(arr[2]);
    var arr3 = new color_1.Color(arr[3]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr2;
    result.left = arr3;
  } else {
    throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
  }

  return result;
}

var borderColorProperty = new properties_1.ShorthandProperty({
  name: "borderColor",
  cssName: "border-color",
  getter: function () {
    if (color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor)) {
      return this.borderTopColor;
    } else {
      return this.borderTopColor + " " + this.borderRightColor + " " + this.borderBottomColor + " " + this.borderLeftColor;
    }
  },
  converter: function (value) {
    if (typeof value === "string") {
      var fourColors = parseBorderColor(value);
      return [[exports.borderTopColorProperty, fourColors.top], [exports.borderRightColorProperty, fourColors.right], [exports.borderBottomColorProperty, fourColors.bottom], [exports.borderLeftColorProperty, fourColors.left]];
    } else {
      return [[exports.borderTopColorProperty, value], [exports.borderRightColorProperty, value], [exports.borderBottomColorProperty, value], [exports.borderLeftColorProperty, value]];
    }
  }
});
borderColorProperty.register(properties_1.Style);
exports.borderTopColorProperty = new properties_1.CssProperty({
  name: "borderTopColor",
  cssName: "border-top-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderTopColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.borderTopColorProperty.register(properties_1.Style);
exports.borderRightColorProperty = new properties_1.CssProperty({
  name: "borderRightColor",
  cssName: "border-right-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderRightColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.borderRightColorProperty.register(properties_1.Style);
exports.borderBottomColorProperty = new properties_1.CssProperty({
  name: "borderBottomColor",
  cssName: "border-bottom-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderBottomColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.borderBottomColorProperty.register(properties_1.Style);
exports.borderLeftColorProperty = new properties_1.CssProperty({
  name: "borderLeftColor",
  cssName: "border-left-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderLeftColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.borderLeftColorProperty.register(properties_1.Style);
var borderWidthProperty = new properties_1.ShorthandProperty({
  name: "borderWidth",
  cssName: "border-width",
  getter: function () {
    if (Length.equals(this.borderTopWidth, this.borderRightWidth) && Length.equals(this.borderTopWidth, this.borderBottomWidth) && Length.equals(this.borderTopWidth, this.borderLeftWidth)) {
      return this.borderTopWidth;
    } else {
      return Length.convertToString(this.borderTopWidth) + " " + Length.convertToString(this.borderRightWidth) + " " + Length.convertToString(this.borderBottomWidth) + " " + Length.convertToString(this.borderLeftWidth);
    }
  },
  converter: function (value) {
    if (typeof value === "string" && value !== "auto") {
      var borderWidths = parseThickness(value);
      return [[exports.borderTopWidthProperty, borderWidths.top], [exports.borderRightWidthProperty, borderWidths.right], [exports.borderBottomWidthProperty, borderWidths.bottom], [exports.borderLeftWidthProperty, borderWidths.left]];
    } else {
      return [[exports.borderTopWidthProperty, value], [exports.borderRightWidthProperty, value], [exports.borderBottomWidthProperty, value], [exports.borderLeftWidthProperty, value]];
    }
  }
});
borderWidthProperty.register(properties_1.Style);
exports.borderTopWidthProperty = new properties_1.CssProperty({
  name: "borderTopWidth",
  cssName: "border-top-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderTopWidth = value;
    var background = target.backgroundInternal.withBorderTopWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopWidthProperty.register(properties_1.Style);
exports.borderRightWidthProperty = new properties_1.CssProperty({
  name: "borderRightWidth",
  cssName: "border-right-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-right-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderRightWidth = value;
    var background = target.backgroundInternal.withBorderRightWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderRightWidthProperty.register(properties_1.Style);
exports.borderBottomWidthProperty = new properties_1.CssProperty({
  name: "borderBottomWidth",
  cssName: "border-bottom-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderBottomWidth = value;
    var background = target.backgroundInternal.withBorderBottomWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomWidthProperty.register(properties_1.Style);
exports.borderLeftWidthProperty = new properties_1.CssProperty({
  name: "borderLeftWidth",
  cssName: "border-left-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-left-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderLeftWidth = value;
    var background = target.backgroundInternal.withBorderLeftWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderLeftWidthProperty.register(properties_1.Style);
var borderRadiusProperty = new properties_1.ShorthandProperty({
  name: "borderRadius",
  cssName: "border-radius",
  getter: function () {
    if (Length.equals(this.borderTopLeftRadius, this.borderTopRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomLeftRadius)) {
      return this.borderTopLeftRadius;
    }

    return Length.convertToString(this.borderTopLeftRadius) + " " + Length.convertToString(this.borderTopRightRadius) + " " + Length.convertToString(this.borderBottomRightRadius) + " " + Length.convertToString(this.borderBottomLeftRadius);
  },
  converter: function (value) {
    if (typeof value === "string") {
      var borderRadius = parseThickness(value);
      return [[exports.borderTopLeftRadiusProperty, borderRadius.top], [exports.borderTopRightRadiusProperty, borderRadius.right], [exports.borderBottomRightRadiusProperty, borderRadius.bottom], [exports.borderBottomLeftRadiusProperty, borderRadius.left]];
    } else {
      return [[exports.borderTopLeftRadiusProperty, value], [exports.borderTopRightRadiusProperty, value], [exports.borderBottomRightRadiusProperty, value], [exports.borderBottomLeftRadiusProperty, value]];
    }
  }
});
borderRadiusProperty.register(properties_1.Style);
exports.borderTopLeftRadiusProperty = new properties_1.CssProperty({
  name: "borderTopLeftRadius",
  cssName: "border-top-left-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-left-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderTopLeftRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopLeftRadiusProperty.register(properties_1.Style);
exports.borderTopRightRadiusProperty = new properties_1.CssProperty({
  name: "borderTopRightRadius",
  cssName: "border-top-right-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-right-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderTopRightRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopRightRadiusProperty.register(properties_1.Style);
exports.borderBottomRightRadiusProperty = new properties_1.CssProperty({
  name: "borderBottomRightRadius",
  cssName: "border-bottom-right-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-right-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderBottomRightRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomRightRadiusProperty.register(properties_1.Style);
exports.borderBottomLeftRadiusProperty = new properties_1.CssProperty({
  name: "borderBottomLeftRadius",
  cssName: "border-bottom-left-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-left-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderBottomLeftRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomLeftRadiusProperty.register(properties_1.Style);

function isNonNegativeFiniteNumber(value) {
  return isFinite(value) && !isNaN(value) && value >= 0;
}

var supportedPaths = ["rect", "circle", "ellipse", "polygon", "inset"];

function isClipPathValid(value) {
  if (!value) {
    return true;
  }

  var functionName = value.substring(0, value.indexOf("(")).trim();
  return supportedPaths.indexOf(functionName) !== -1;
}

exports.clipPathProperty = new properties_1.CssProperty({
  name: "clipPath",
  cssName: "clip-path",
  valueChanged: function (target, oldValue, newValue) {
    if (!isClipPathValid(newValue)) {
      throw new Error("clip-path is not valid.");
    }

    var background = target.backgroundInternal.withClipPath(newValue);
    target.backgroundInternal = background;
  }
});
exports.clipPathProperty.register(properties_1.Style);

function isFloatValueConverter(value) {
  var newValue = parseFloat(value);

  if (isNaN(newValue)) {
    throw new Error("Invalid value: " + newValue);
  }

  return newValue;
}

exports.zIndexProperty = new properties_1.CssProperty({
  name: "zIndex",
  cssName: "z-index",
  valueConverter: isFloatValueConverter
});
exports.zIndexProperty.register(properties_1.Style);

function opacityConverter(value) {
  var newValue = parseFloat(value);

  if (!isNaN(newValue) && 0 <= newValue && newValue <= 1) {
    return newValue;
  }

  throw new Error("Opacity should be between [0, 1]. Value: " + newValue);
}

exports.opacityProperty = new properties_1.CssAnimationProperty({
  name: "opacity",
  cssName: "opacity",
  defaultValue: 1,
  valueConverter: opacityConverter
});
exports.opacityProperty.register(properties_1.Style);
exports.colorProperty = new properties_1.InheritedCssProperty({
  name: "color",
  cssName: "color",
  equalityComparer: color_1.Color.equals,
  valueConverter: function (v) {
    return new color_1.Color(v);
  }
});
exports.colorProperty.register(properties_1.Style);
exports.fontInternalProperty = new properties_1.CssProperty({
  name: "fontInternal",
  cssName: "_fontInternal",
  defaultValue: font_1.Font.default
});
exports.fontInternalProperty.register(properties_1.Style);
exports.fontFamilyProperty = new properties_1.InheritedCssProperty({
  name: "fontFamily",
  cssName: "font-family",
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontFamily !== newValue) {
      var newFont = currentFont.withFontFamily(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontFamilyProperty.register(properties_1.Style);
exports.fontSizeProperty = new properties_1.InheritedCssProperty({
  name: "fontSize",
  cssName: "font-size",
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontSize !== newValue) {
      var newFont = currentFont.withFontSize(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  },
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.fontSizeProperty.register(properties_1.Style);
exports.fontStyleProperty = new properties_1.InheritedCssProperty({
  name: "fontStyle",
  cssName: "font-style",
  affectsLayout: platform_1.isIOS,
  defaultValue: font_1.FontStyle.NORMAL,
  valueConverter: font_1.FontStyle.parse,
  valueChanged: function (target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontStyle !== newValue) {
      var newFont = currentFont.withFontStyle(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontStyleProperty.register(properties_1.Style);
exports.fontWeightProperty = new properties_1.InheritedCssProperty({
  name: "fontWeight",
  cssName: "font-weight",
  affectsLayout: platform_1.isIOS,
  defaultValue: font_1.FontWeight.NORMAL,
  valueConverter: font_1.FontWeight.parse,
  valueChanged: function (target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontWeight !== newValue) {
      var newFont = currentFont.withFontWeight(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontWeightProperty.register(properties_1.Style);
var fontProperty = new properties_1.ShorthandProperty({
  name: "font",
  cssName: "font",
  getter: function () {
    return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
  },
  converter: function (value) {
    if (value === properties_1.unsetValue) {
      return [[exports.fontStyleProperty, properties_1.unsetValue], [exports.fontWeightProperty, properties_1.unsetValue], [exports.fontSizeProperty, properties_1.unsetValue], [exports.fontFamilyProperty, properties_1.unsetValue]];
    } else {
      var font = font_1.parseFont(value);
      var fontSize = parseFloat(font.fontSize);
      return [[exports.fontStyleProperty, font.fontStyle], [exports.fontWeightProperty, font.fontWeight], [exports.fontSizeProperty, fontSize], [exports.fontFamilyProperty, font.fontFamily]];
    }
  }
});
fontProperty.register(properties_1.Style);
var Visibility;

(function (Visibility) {
  Visibility.VISIBLE = "visible";
  Visibility.HIDDEN = "hidden";
  Visibility.COLLAPSE = "collapse";
  Visibility.isValid = properties_1.makeValidator(Visibility.VISIBLE, Visibility.HIDDEN, Visibility.COLLAPSE);

  Visibility.parse = function (value) {
    return value.toLowerCase() === "collapsed" ? Visibility.COLLAPSE : parseStrict(value);
  };

  var parseStrict = properties_1.makeParser(Visibility.isValid);
})(Visibility = exports.Visibility || (exports.Visibility = {}));

exports.visibilityProperty = new properties_1.CssProperty({
  name: "visibility",
  cssName: "visibility",
  defaultValue: Visibility.VISIBLE,
  affectsLayout: platform_1.isIOS,
  valueConverter: Visibility.parse,
  valueChanged: function (target, oldValue, newValue) {
    target.view.isCollapsed = newValue === Visibility.COLLAPSE;
  }
});
exports.visibilityProperty.register(properties_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style-scope.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var css_1 = __webpack_require__("../node_modules/tns-core-modules/css/index.js");

var parser_1 = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var css_selector_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var applicationCommon = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var keyframeAnimationModule;

function ensureKeyframeAnimationModule() {
  if (!keyframeAnimationModule) {
    keyframeAnimationModule = __webpack_require__("../node_modules/tns-core-modules/ui/animation/keyframe-animation.js");
  }
}

var cssAnimationParserModule;

function ensureCssAnimationParserModule() {
  if (!cssAnimationParserModule) {
    cssAnimationParserModule = __webpack_require__("../node_modules/tns-core-modules/ui/styling/css-animation-parser.js");
  }
}

var parser = "rework";

try {
  var appConfig = __webpack_require__("./package.json");

  if (appConfig && appConfig.cssParser === "nativescript") {
    parser = "nativescript";
  }
} catch (e) {}

function mergeCssSelectors() {
  applicationCssSelectors = applicationSelectors.slice();
  applicationCssSelectors.push.apply(applicationCssSelectors, applicationAdditionalSelectors);
  applicationCssSelectorVersion++;
}

exports.mergeCssSelectors = mergeCssSelectors;
var applicationCssSelectors = [];
var applicationCssSelectorVersion = 0;
var applicationSelectors = [];
var applicationAdditionalSelectors = [];
var applicationKeyframes = {};
var animationsSymbol = Symbol("animations");
var pattern = /('|")(.*?)\1/;

var CSSSource = function () {
  function CSSSource(_ast, _url, _file, _keyframes, _source) {
    this._ast = _ast;
    this._url = _url;
    this._file = _file;
    this._keyframes = _keyframes;
    this._source = _source;
    this._selectors = [];
    this.parse();
  }

  CSSSource.fromURI = function (uri, keyframes) {
    var appRelativeUri = CSSSource.pathRelativeToApp(uri);

    try {
      var cssOrAst = global.loadModule(appRelativeUri);

      if (cssOrAst) {
        if (typeof cssOrAst === "string") {
          return CSSSource.fromSource(cssOrAst, keyframes, appRelativeUri);
        } else if (typeof cssOrAst === "object" && cssOrAst.type === "stylesheet" && cssOrAst.stylesheet && cssOrAst.stylesheet.rules) {
          return CSSSource.fromAST(cssOrAst, keyframes, appRelativeUri);
        } else {
          return CSSSource.fromSource(cssOrAst.toString(), keyframes, appRelativeUri);
        }
      }
    } catch (e) {}

    return CSSSource.fromFile(appRelativeUri, keyframes);
  };

  CSSSource.pathRelativeToApp = function (uri) {
    if (!uri.startsWith("/")) {
      return uri;
    }

    var appPath = file_system_1.knownFolders.currentApp().path;

    if (!uri.startsWith(appPath)) {
      trace_1.write(uri + " does not start with " + appPath, trace_1.categories.Error, trace_1.messageType.error);
      return uri;
    }

    var relativeUri = "." + uri.substr(appPath.length);
    return relativeUri;
  };

  CSSSource.fromFile = function (url, keyframes) {
    var cssFileUrl = url.replace(/\..\w+$/, ".css");

    if (cssFileUrl !== url) {
      var cssFile = CSSSource.resolveCSSPathFromURL(cssFileUrl);

      if (cssFile) {
        return new CSSSource(undefined, url, cssFile, keyframes, undefined);
      }
    }

    var file = CSSSource.resolveCSSPathFromURL(url);
    return new CSSSource(undefined, url, file, keyframes, undefined);
  };

  CSSSource.fromFileImport = function (url, keyframes, importSource) {
    var file = CSSSource.resolveCSSPathFromURL(url, importSource);
    return new CSSSource(undefined, url, file, keyframes, undefined);
  };

  CSSSource.resolveCSSPathFromURL = function (url, importSource) {
    var app = file_system_1.knownFolders.currentApp().path;
    var file = resolveFileNameFromUrl(url, app, file_system_1.File.exists, importSource);
    return file;
  };

  CSSSource.fromSource = function (source, keyframes, url) {
    return new CSSSource(undefined, url, undefined, keyframes, source);
  };

  CSSSource.fromAST = function (ast, keyframes, url) {
    return new CSSSource(ast, url, undefined, keyframes, undefined);
  };

  Object.defineProperty(CSSSource.prototype, "selectors", {
    get: function () {
      return this._selectors;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CSSSource.prototype, "source", {
    get: function () {
      return this._source;
    },
    enumerable: true,
    configurable: true
  });

  CSSSource.prototype.load = function () {
    var file = file_system_1.File.fromPath(this._file);
    this._source = file.readTextSync();
  };

  CSSSource.prototype.parse = function () {
    try {
      if (!this._ast) {
        if (!this._source && this._file) {
          this.load();
        }

        if (this._source) {
          this.parseCSSAst();
        }
      }

      if (this._ast) {
        this.createSelectors();
      } else {
        this._selectors = [];
      }
    } catch (e) {
      trace_1.write("Css styling failed: " + e, trace_1.categories.Error, trace_1.messageType.error);
      this._selectors = [];
    }
  };

  CSSSource.prototype.parseCSSAst = function () {
    if (this._source) {
      switch (parser) {
        case "nativescript":
          var cssparser = new parser_1.CSS3Parser(this._source);
          var stylesheet = cssparser.parseAStylesheet();
          var cssNS = new parser_1.CSSNativeScript();
          this._ast = cssNS.parseStylesheet(stylesheet);
          return;

        case "rework":
          this._ast = css_1.parse(this._source, {
            source: this._file
          });
          return;
      }
    }
  };

  CSSSource.prototype.createSelectors = function () {
    if (this._ast) {
      this._selectors = this.createSelectorsFromImports().concat(this.createSelectorsFromSyntaxTree());
    }
  };

  CSSSource.prototype.createSelectorsFromImports = function () {
    var _this = this;

    var imports = this._ast["stylesheet"]["rules"].filter(function (r) {
      return r.type === "import";
    });

    var urlFromImportObject = function (importObject) {
      var importItem = importObject["import"];
      var urlMatch = importItem && importItem.match(pattern);
      return urlMatch && urlMatch[2];
    };

    var sourceFromImportObject = function (importObject) {
      return importObject["position"] && importObject["position"]["source"];
    };

    var toUrlSourcePair = function (importObject) {
      return {
        url: urlFromImportObject(importObject),
        source: sourceFromImportObject(importObject)
      };
    };

    var getCssFile = function (_a) {
      var url = _a.url,
          source = _a.source;
      return source ? CSSSource.fromFileImport(url, _this._keyframes, source) : CSSSource.fromURI(url, _this._keyframes);
    };

    var cssFiles = imports.map(toUrlSourcePair).filter(function (_a) {
      var url = _a.url;
      return !!url;
    }).map(getCssFile);
    var selectors = cssFiles.map(function (file) {
      return file && file.selectors || [];
    });
    return selectors.reduce(function (acc, val) {
      return acc.concat(val);
    }, []);
  };

  CSSSource.prototype.createSelectorsFromSyntaxTree = function () {
    var _this = this;

    var nodes = this._ast.stylesheet.rules;
    nodes.filter(isKeyframe).forEach(function (node) {
      return _this._keyframes[node.name] = node;
    });
    var rulesets = css_selector_1.fromAstNodes(nodes);

    if (rulesets && rulesets.length) {
      ensureCssAnimationParserModule();
      rulesets.forEach(function (rule) {
        rule[animationsSymbol] = cssAnimationParserModule.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(rule.declarations);
      });
    }

    return rulesets;
  };

  CSSSource.prototype.toString = function () {
    return this._file || this._url || "(in-memory)";
  };

  __decorate([profiling_1.profile], CSSSource.prototype, "load", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "parse", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "parseCSSAst", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "createSelectors", null);

  __decorate([profiling_1.profile], CSSSource, "resolveCSSPathFromURL", null);

  return CSSSource;
}();

function removeTaggedAdditionalCSS(tag) {
  var changed = false;

  for (var i = 0; i < applicationAdditionalSelectors.length; i++) {
    if (applicationAdditionalSelectors[i].tag === tag) {
      applicationAdditionalSelectors.splice(i, 1);
      i--;
      changed = true;
    }
  }

  if (changed) {
    mergeCssSelectors();
  }

  return changed;
}

exports.removeTaggedAdditionalCSS = removeTaggedAdditionalCSS;

function addTaggedAdditionalCSS(cssText, tag) {
  var parsed = CSSSource.fromSource(cssText, applicationKeyframes, undefined).selectors;
  var changed = false;

  if (parsed && parsed.length) {
    changed = true;

    if (tag != null) {
      for (var i = 0; i < parsed.length; i++) {
        parsed[i].tag = tag;
      }
    }

    applicationAdditionalSelectors.push.apply(applicationAdditionalSelectors, parsed);
    mergeCssSelectors();
  }

  return changed;
}

exports.addTaggedAdditionalCSS = addTaggedAdditionalCSS;
var onCssChanged = profiling_1.profile("\"style-scope\".onCssChanged", function (args) {
  if (args.cssText) {
    var parsed = CSSSource.fromSource(args.cssText, applicationKeyframes, args.cssFile).selectors;

    if (parsed) {
      applicationAdditionalSelectors.push.apply(applicationAdditionalSelectors, parsed);
      mergeCssSelectors();
    }
  } else if (args.cssFile) {
    loadCss(args.cssFile);
  }
});

function onLiveSync(args) {
  loadCss(applicationCommon.getCssFileName());
}

var loadCss = profiling_1.profile("\"style-scope\".loadCss", function (cssFile) {
  if (!cssFile) {
    return undefined;
  }

  var result = CSSSource.fromURI(cssFile, applicationKeyframes).selectors;

  if (result.length > 0) {
    applicationSelectors = result;
    mergeCssSelectors();
  }
});
applicationCommon.on("cssChanged", onCssChanged);
applicationCommon.on("livesync", onLiveSync);
exports.loadAppCSS = profiling_1.profile("\"style-scope\".loadAppCSS", function (args) {
  loadCss(args.cssFile);
  applicationCommon.off("loadAppCss", exports.loadAppCSS);
});

if (applicationCommon.hasLaunched()) {
  exports.loadAppCSS({
    eventName: "loadAppCss",
    object: applicationCommon,
    cssFile: applicationCommon.getCssFileName()
  });
} else {
  applicationCommon.on("loadAppCss", exports.loadAppCSS);
}

var CssState = function () {
  function CssState(view) {
    var _this = this;

    this.view = view;

    this._onDynamicStateChangeHandler = function () {
      return _this.updateDynamicState();
    };
  }

  CssState.prototype.onChange = function () {
    if (this.view && this.view.isLoaded) {
      this.unsubscribeFromDynamicUpdates();
      this.updateMatch();
      this.subscribeForDynamicUpdates();
      this.updateDynamicState();
    } else {
      this._matchInvalid = true;
    }
  };

  CssState.prototype.isSelectorsLatestVersionApplied = function () {
    return this.view._styleScope._getSelectorsVersion() === this._appliedSelectorsVersion;
  };

  CssState.prototype.onLoaded = function () {
    if (this._matchInvalid) {
      this.updateMatch();
    }

    this.subscribeForDynamicUpdates();
    this.updateDynamicState();
  };

  CssState.prototype.onUnloaded = function () {
    this.unsubscribeFromDynamicUpdates();
  };

  CssState.prototype.updateMatch = function () {
    if (this.view._styleScope) {
      this._appliedSelectorsVersion = this.view._styleScope._getSelectorsVersion();
      this._match = this.view._styleScope.matchSelectors(this.view);
    } else {
      this._match = CssState.emptyMatch;
    }

    this._matchInvalid = false;
  };

  CssState.prototype.updateDynamicState = function () {
    var _this = this;

    var matchingSelectors = this._match.selectors.filter(function (sel) {
      return sel.dynamic ? sel.match(_this.view) : true;
    });

    this.view._batchUpdate(function () {
      _this.stopKeyframeAnimations();

      _this.setPropertyValues(matchingSelectors);

      _this.playKeyframeAnimations(matchingSelectors);
    });
  };

  CssState.prototype.playKeyframeAnimations = function (matchingSelectors) {
    var _this = this;

    var animations = [];
    matchingSelectors.forEach(function (selector) {
      var ruleAnimations = selector.ruleset[animationsSymbol];

      if (ruleAnimations) {
        ensureKeyframeAnimationModule();

        for (var _i = 0, ruleAnimations_1 = ruleAnimations; _i < ruleAnimations_1.length; _i++) {
          var animationInfo = ruleAnimations_1[_i];
          var animation = keyframeAnimationModule.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);

          if (animation) {
            animations.push(animation);
          }
        }
      }
    });

    if (this._playsKeyframeAnimations = animations.length > 0) {
      animations.map(function (animation) {
        return animation.play(_this.view);
      });
      Object.freeze(animations);
      this._appliedAnimations = animations;
    }
  };

  CssState.prototype.stopKeyframeAnimations = function () {
    if (!this._playsKeyframeAnimations) {
      return;
    }

    this._appliedAnimations.filter(function (animation) {
      return animation.isPlaying;
    }).forEach(function (animation) {
      return animation.cancel();
    });

    this._appliedAnimations = CssState.emptyAnimationArray;
    this.view.style["keyframe:rotate"] = properties_1.unsetValue;
    this.view.style["keyframe:scaleX"] = properties_1.unsetValue;
    this.view.style["keyframe:scaleY"] = properties_1.unsetValue;
    this.view.style["keyframe:translateX"] = properties_1.unsetValue;
    this.view.style["keyframe:translateY"] = properties_1.unsetValue;
    this.view.style["keyframe:backgroundColor"] = properties_1.unsetValue;
    this.view.style["keyframe:opacity"] = properties_1.unsetValue;
    this._playsKeyframeAnimations = false;
  };

  CssState.prototype.setPropertyValues = function (matchingSelectors) {
    var newPropertyValues = new this.view.style.PropertyBag();
    matchingSelectors.forEach(function (selector) {
      return selector.ruleset.declarations.forEach(function (declaration) {
        return newPropertyValues[declaration.property] = declaration.value;
      });
    });
    Object.freeze(newPropertyValues);
    var oldProperties = this._appliedPropertyValues;

    for (var key in oldProperties) {
      if (!(key in newPropertyValues)) {
        if (key in this.view.style) {
          this.view.style["css:" + key] = properties_1.unsetValue;
        } else {}
      }
    }

    for (var property in newPropertyValues) {
      if (oldProperties && property in oldProperties && oldProperties[property] === newPropertyValues[property]) {
        continue;
      }

      var value = newPropertyValues[property];

      try {
        if (property in this.view.style) {
          this.view.style["css:" + property] = value;
        } else {
          var camelCasedProperty = property.replace(/-([a-z])/g, function (g) {
            return g[1].toUpperCase();
          });
          this.view[camelCasedProperty] = value;
        }
      } catch (e) {
        trace_1.write("Failed to apply property [" + property + "] with value [" + value + "] to " + this.view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
      }
    }

    this._appliedPropertyValues = newPropertyValues;
  };

  CssState.prototype.subscribeForDynamicUpdates = function () {
    var _this = this;

    var changeMap = this._match.changeMap;
    changeMap.forEach(function (changes, view) {
      if (changes.attributes) {
        changes.attributes.forEach(function (attribute) {
          view.addEventListener(attribute + "Change", _this._onDynamicStateChangeHandler);
        });
      }

      if (changes.pseudoClasses) {
        changes.pseudoClasses.forEach(function (pseudoClass) {
          var eventName = ":" + pseudoClass;
          view.addEventListener(":" + pseudoClass, _this._onDynamicStateChangeHandler);

          if (view[eventName]) {
            view[eventName](+1);
          }
        });
      }
    });
    this._appliedChangeMap = changeMap;
  };

  CssState.prototype.unsubscribeFromDynamicUpdates = function () {
    var _this = this;

    this._appliedChangeMap.forEach(function (changes, view) {
      if (changes.attributes) {
        changes.attributes.forEach(function (attribute) {
          view.removeEventListener(attribute + "Change", _this._onDynamicStateChangeHandler);
        });
      }

      if (changes.pseudoClasses) {
        changes.pseudoClasses.forEach(function (pseudoClass) {
          var eventName = ":" + pseudoClass;
          view.removeEventListener(eventName, _this._onDynamicStateChangeHandler);

          if (view[eventName]) {
            view[eventName](-1);
          }
        });
      }
    });

    this._appliedChangeMap = CssState.emptyChangeMap;
  };

  CssState.prototype.toString = function () {
    return this.view + "._cssState";
  };

  CssState.emptyChangeMap = Object.freeze(new Map());
  CssState.emptyPropertyBag = Object.freeze({});
  CssState.emptyAnimationArray = Object.freeze([]);
  CssState.emptyMatch = {
    selectors: [],
    changeMap: new Map()
  };

  __decorate([profiling_1.profile], CssState.prototype, "updateMatch", null);

  __decorate([profiling_1.profile], CssState.prototype, "updateDynamicState", null);

  return CssState;
}();

exports.CssState = CssState;
CssState.prototype._appliedChangeMap = CssState.emptyChangeMap;
CssState.prototype._appliedPropertyValues = CssState.emptyPropertyBag;
CssState.prototype._appliedAnimations = CssState.emptyAnimationArray;
CssState.prototype._matchInvalid = true;

var StyleScope = function () {
  function StyleScope() {
    this._css = "";
    this._localCssSelectors = [];
    this._localCssSelectorVersion = 0;
    this._localCssSelectorsAppliedVersion = 0;
    this._applicationCssSelectorsAppliedVersion = 0;
    this._keyframes = new Map();
  }

  Object.defineProperty(StyleScope.prototype, "css", {
    get: function () {
      return this._css;
    },
    set: function (value) {
      this.setCss(value);
    },
    enumerable: true,
    configurable: true
  });

  StyleScope.prototype.addCss = function (cssString, cssFileName) {
    this.appendCss(cssString, cssFileName);
  };

  StyleScope.prototype.addCssFile = function (cssFileName) {
    this.appendCss(null, cssFileName);
  };

  StyleScope.prototype.setCss = function (cssString, cssFileName) {
    this._css = cssString;
    var cssFile = CSSSource.fromSource(cssString, this._keyframes, cssFileName);
    this._localCssSelectors = cssFile.selectors;
    this._localCssSelectorVersion++;
    this.ensureSelectors();
  };

  StyleScope.prototype.appendCss = function (cssString, cssFileName) {
    if (!cssString && !cssFileName) {
      return;
    }

    var parsedCssSelectors = cssString ? CSSSource.fromSource(cssString, this._keyframes, cssFileName) : CSSSource.fromURI(cssFileName, this._keyframes);
    this._css = this._css + parsedCssSelectors.source;

    this._localCssSelectors.push.apply(this._localCssSelectors, parsedCssSelectors.selectors);

    this._localCssSelectorVersion++;
    this.ensureSelectors();
  };

  StyleScope.prototype.getKeyframeAnimationWithName = function (animationName) {
    var cssKeyframes = this._keyframes[animationName];

    if (!cssKeyframes) {
      return;
    }

    ensureKeyframeAnimationModule();
    var animation = new keyframeAnimationModule.KeyframeAnimationInfo();
    ensureCssAnimationParserModule();
    animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(cssKeyframes.keyframes);
    return animation;
  };

  StyleScope.prototype.ensureSelectors = function () {
    if (!this.isApplicationCssSelectorsLatestVersionApplied() || !this.isLocalCssSelectorsLatestVersionApplied() || !this._mergedCssSelectors) {
      this._createSelectors();
    }

    return this._getSelectorsVersion();
  };

  StyleScope.prototype.isApplicationCssSelectorsLatestVersionApplied = function () {
    return this._applicationCssSelectorsAppliedVersion === applicationCssSelectorVersion;
  };

  StyleScope.prototype.isLocalCssSelectorsLatestVersionApplied = function () {
    return this._localCssSelectorsAppliedVersion === this._localCssSelectorVersion;
  };

  StyleScope.prototype._createSelectors = function () {
    var toMerge = [];
    toMerge.push(applicationCssSelectors);
    this._applicationCssSelectorsAppliedVersion = applicationCssSelectorVersion;
    toMerge.push(this._localCssSelectors);
    this._localCssSelectorsAppliedVersion = this._localCssSelectorVersion;

    for (var keyframe in applicationKeyframes) {
      this._keyframes[keyframe] = applicationKeyframes[keyframe];
    }

    if (toMerge.length > 0) {
      this._mergedCssSelectors = toMerge.filter(function (m) {
        return !!m;
      }).reduce(function (merged, next) {
        return merged.concat(next);
      }, []);

      this._applyKeyframesOnSelectors();

      this._selectors = new css_selector_1.SelectorsMap(this._mergedCssSelectors);
    }
  };

  StyleScope.prototype.matchSelectors = function (view) {
    this.ensureSelectors();
    return this._selectors.query(view);
  };

  StyleScope.prototype.query = function (node) {
    this.ensureSelectors();
    return this._selectors.query(node).selectors;
  };

  StyleScope.prototype._getSelectorsVersion = function () {
    return 100000 * this._applicationCssSelectorsAppliedVersion + this._localCssSelectorsAppliedVersion;
  };

  StyleScope.prototype._applyKeyframesOnSelectors = function () {
    for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
      var ruleset = this._mergedCssSelectors[i];
      var animations = ruleset[animationsSymbol];

      if (animations !== undefined && animations.length) {
        ensureCssAnimationParserModule();

        for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
          var animation = animations_1[_i];
          var cssKeyframe = this._keyframes[animation.name];

          if (cssKeyframe !== undefined) {
            animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(cssKeyframe.keyframes);
          }
        }
      }
    }
  };

  StyleScope.prototype.getAnimations = function (ruleset) {
    return ruleset[animationsSymbol];
  };

  __decorate([profiling_1.profile], StyleScope.prototype, "setCss", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "appendCss", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "_createSelectors", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "matchSelectors", null);

  return StyleScope;
}();

exports.StyleScope = StyleScope;

function resolveFileNameFromUrl(url, appDirectory, fileExists, importSource) {
  var fileName = typeof url === "string" ? url.trim() : "";

  if (fileName.indexOf("~/") === 0) {
    fileName = fileName.replace("~/", "");
  }

  var isAbsolutePath = fileName.indexOf("/") === 0;
  var absolutePath = isAbsolutePath ? fileName : file_system_1.path.join(appDirectory, fileName);

  if (fileExists(absolutePath)) {
    return absolutePath;
  }

  if (!isAbsolutePath) {
    if (fileName[0] === "~" && fileName[1] !== "/" && fileName[1] !== "\"") {
      fileName = fileName.substr(1);
    }

    if (importSource) {
      var importFile = resolveFilePathFromImport(importSource, fileName);

      if (fileExists(importFile)) {
        return importFile;
      }
    }

    var external_1 = file_system_1.path.join(appDirectory, "tns_modules", fileName);

    if (fileExists(external_1)) {
      return external_1;
    }
  }

  return null;
}

exports.resolveFileNameFromUrl = resolveFileNameFromUrl;

function resolveFilePathFromImport(importSource, fileName) {
  var importSourceParts = importSource.split(file_system_1.path.separator);
  var fileNameParts = fileName.split(file_system_1.path.separator).filter(function (p) {
    return !isCurrentDirectory(p);
  });
  importSourceParts.pop();
  fileNameParts.forEach(function (p) {
    return isParentDirectory(p) ? importSourceParts.pop() : importSourceParts.push(p);
  });
  return importSourceParts.join(file_system_1.path.separator);
}

exports.applyInlineStyle = profiling_1.profile(function applyInlineStyle(view, styleStr) {
  var localStyle = "local { " + styleStr + " }";
  var inlineRuleSet = CSSSource.fromSource(localStyle, new Map()).selectors;
  var style = view.style;
  inlineRuleSet[0].declarations.forEach(function (d) {
    var name = d.property;

    try {
      if (name in style) {
        style[name] = d.value;
      } else {
        view[name] = d.value;
      }
    } catch (e) {
      trace_1.write("Failed to apply property [" + d.property + "] with value [" + d.value + "] to " + view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
    }
  });
});

function isCurrentDirectory(uriPart) {
  return uriPart === ".";
}

function isParentDirectory(uriPart) {
  return uriPart === "..";
}

function isKeyframe(node) {
  return node.type === "keyframes";
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style/style.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var Style = function (_super) {
  __extends(Style, _super);

  function Style(view) {
    var _this = _super.call(this) || this;

    _this.view = view;
    return _this;
  }

  Style.prototype.toString = function () {
    return this.view + ".style";
  };

  return Style;
}(observable_1.Observable);

exports.Style = Style;

Style.prototype.PropertyBag = function () {
  function class_1() {}

  return class_1;
}();

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-base/text-base-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var formatted_string_1 = __webpack_require__("../node_modules/tns-core-modules/text/formatted-string.js");

exports.FormattedString = formatted_string_1.FormattedString;
exports.Span = formatted_string_1.Span;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";

var TextBaseCommon = function (_super) {
  __extends(TextBaseCommon, _super);

  function TextBaseCommon() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(TextBaseCommon.prototype, "nativeTextViewProtected", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontFamily", {
    get: function () {
      return this.style.fontFamily;
    },
    set: function (value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontSize", {
    get: function () {
      return this.style.fontSize;
    },
    set: function (value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontStyle", {
    get: function () {
      return this.style.fontStyle;
    },
    set: function (value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontWeight", {
    get: function () {
      return this.style.fontWeight;
    },
    set: function (value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "letterSpacing", {
    get: function () {
      return this.style.letterSpacing;
    },
    set: function (value) {
      this.style.letterSpacing = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "lineHeight", {
    get: function () {
      return this.style.lineHeight;
    },
    set: function (value) {
      this.style.lineHeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textAlignment", {
    get: function () {
      return this.style.textAlignment;
    },
    set: function (value) {
      this.style.textAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textDecoration", {
    get: function () {
      return this.style.textDecoration;
    },
    set: function (value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textTransform", {
    get: function () {
      return this.style.textTransform;
    },
    set: function (value) {
      this.style.textTransform = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "whiteSpace", {
    get: function () {
      return this.style.whiteSpace;
    },
    set: function (value) {
      this.style.whiteSpace = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "padding", {
    get: function () {
      return this.style.padding;
    },
    set: function (value) {
      this.style.padding = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingTop", {
    get: function () {
      return this.style.paddingTop;
    },
    set: function (value) {
      this.style.paddingTop = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingRight", {
    get: function () {
      return this.style.paddingRight;
    },
    set: function (value) {
      this.style.paddingRight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingBottom", {
    get: function () {
      return this.style.paddingBottom;
    },
    set: function (value) {
      this.style.paddingBottom = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingLeft", {
    get: function () {
      return this.style.paddingLeft;
    },
    set: function (value) {
      this.style.paddingLeft = value;
    },
    enumerable: true,
    configurable: true
  });

  TextBaseCommon.prototype._onFormattedTextContentsChanged = function (data) {
    if (this.nativeViewProtected) {
      this[exports.formattedTextProperty.setNative](data.value);
    }
  };

  TextBaseCommon.prototype._addChildFromBuilder = function (name, value) {
    if (name === CHILD_SPAN) {
      if (!this.formattedText) {
        var formattedText = new formatted_string_1.FormattedString();
        formattedText.spans.push(value);
        this.formattedText = formattedText;
      } else {
        this.formattedText.spans.push(value);
      }
    } else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
      this.formattedText = value;
    }
  };

  TextBaseCommon.prototype._requestLayoutOnTextChanged = function () {
    this.requestLayout();
  };

  TextBaseCommon.prototype.eachChild = function (callback) {
    var text = this.formattedText;

    if (text) {
      callback(text);
    }
  };

  TextBaseCommon.prototype._setNativeText = function (reset) {
    if (reset === void 0) {
      reset = false;
    }
  };

  return TextBaseCommon;
}(view_1.View);

exports.TextBaseCommon = TextBaseCommon;
TextBaseCommon.prototype._isSingleLine = false;

function isBold(fontWeight) {
  return fontWeight === "bold" || fontWeight === "700" || fontWeight === "800" || fontWeight === "900";
}

exports.isBold = isBold;
exports.textProperty = new view_1.Property({
  name: "text",
  defaultValue: "",
  affectsLayout: view_1.isAndroid
});
exports.textProperty.register(TextBaseCommon);
exports.formattedTextProperty = new view_1.Property({
  name: "formattedText",
  affectsLayout: true,
  valueChanged: onFormattedTextPropertyChanged
});
exports.formattedTextProperty.register(TextBaseCommon);

function onFormattedTextPropertyChanged(textBase, oldValue, newValue) {
  if (oldValue) {
    oldValue.off(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);

    textBase._removeView(oldValue);
  }

  if (newValue) {
    var oldParent = newValue.parent;

    if (oldParent) {
      oldParent._removeView(newValue);
    }

    textBase._addView(newValue);

    newValue.on(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);
  }
}

var textAlignmentConverter = view_1.makeParser(view_1.makeValidator("initial", "left", "center", "right"));
exports.textAlignmentProperty = new view_1.InheritedCssProperty({
  name: "textAlignment",
  cssName: "text-align",
  defaultValue: "initial",
  valueConverter: textAlignmentConverter
});
exports.textAlignmentProperty.register(view_1.Style);
var textTransformConverter = view_1.makeParser(view_1.makeValidator("initial", "none", "capitalize", "uppercase", "lowercase"));
exports.textTransformProperty = new view_1.CssProperty({
  name: "textTransform",
  cssName: "text-transform",
  defaultValue: "initial",
  valueConverter: textTransformConverter
});
exports.textTransformProperty.register(view_1.Style);
var whiteSpaceConverter = view_1.makeParser(view_1.makeValidator("initial", "normal", "nowrap"));
exports.whiteSpaceProperty = new view_1.CssProperty({
  name: "whiteSpace",
  cssName: "white-space",
  defaultValue: "initial",
  affectsLayout: view_1.isIOS,
  valueConverter: whiteSpaceConverter
});
exports.whiteSpaceProperty.register(view_1.Style);
var textDecorationConverter = view_1.makeParser(view_1.makeValidator("none", "underline", "line-through", "underline line-through"));
exports.textDecorationProperty = new view_1.CssProperty({
  name: "textDecoration",
  cssName: "text-decoration",
  defaultValue: "none",
  valueConverter: textDecorationConverter
});
exports.textDecorationProperty.register(view_1.Style);
exports.letterSpacingProperty = new view_1.CssProperty({
  name: "letterSpacing",
  cssName: "letter-spacing",
  defaultValue: 0,
  affectsLayout: view_1.isIOS,
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.letterSpacingProperty.register(view_1.Style);
exports.lineHeightProperty = new view_1.CssProperty({
  name: "lineHeight",
  cssName: "line-height",
  affectsLayout: view_1.isIOS,
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.lineHeightProperty.register(view_1.Style);
exports.resetSymbol = Symbol("textPropertyDefault");

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-base/text-base.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var text_base_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base-common.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base-common.js"));

var TextTransformation;

function initializeTextTransformation() {
  if (TextTransformation) {
    return;
  }

  var TextTransformationImpl = function (_super) {
    __extends(TextTransformationImpl, _super);

    function TextTransformationImpl(textBase) {
      var _this = _super.call(this) || this;

      _this.textBase = textBase;
      return global.__native(_this);
    }

    TextTransformationImpl.prototype.getTransformation = function (charSeq, view) {
      var formattedText = this.textBase.formattedText;

      if (formattedText) {
        return createSpannableStringBuilder(formattedText);
      } else {
        return getTransformedText(this.textBase.text, this.textBase.textTransform);
      }
    };

    TextTransformationImpl.prototype.onFocusChanged = function (view, sourceText, focused, direction, previouslyFocusedRect) {};

    TextTransformationImpl = __decorate([Interfaces([android.text.method.TransformationMethod])], TextTransformationImpl);
    return TextTransformationImpl;
  }(java.lang.Object);

  TextTransformation = TextTransformationImpl;
}

var TextBase = function (_super) {
  __extends(TextBase, _super);

  function TextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextBase.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    initializeTextTransformation();
    var nativeView = this.nativeTextViewProtected;
    this._defaultTransformationMethod = nativeView.getTransformationMethod();
    this._minHeight = nativeView.getMinHeight();
    this._maxHeight = nativeView.getMaxHeight();
    this._minLines = nativeView.getMinLines();
    this._maxLines = nativeView.getMaxLines();
  };

  TextBase.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    var nativeView = this.nativeTextViewProtected;
    nativeView.setSingleLine(this._isSingleLine);
    nativeView.setTransformationMethod(this._defaultTransformationMethod);
    this._defaultTransformationMethod = null;

    if (this._paintFlags !== undefined) {
      nativeView.setPaintFlags(this._paintFlags);
      this._paintFlags = undefined;
    }

    if (this._minLines !== -1) {
      nativeView.setMinLines(this._minLines);
    } else {
      nativeView.setMinHeight(this._minHeight);
    }

    this._minHeight = this._minLines = undefined;

    if (this._maxLines !== -1) {
      nativeView.setMaxLines(this._maxLines);
    } else {
      nativeView.setMaxHeight(this._maxHeight);
    }

    this._maxHeight = this._maxLines = undefined;
  };

  TextBase.prototype[text_base_common_1.textProperty.getDefault] = function () {
    return text_base_common_1.resetSymbol;
  };

  TextBase.prototype[text_base_common_1.textProperty.setNative] = function (value) {
    var reset = value === text_base_common_1.resetSymbol;

    if (!reset && this.formattedText) {
      return;
    }

    this._setNativeText(reset);
  };

  TextBase.prototype[text_base_common_1.formattedTextProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;

    if (!value) {
      if (nativeView instanceof android.widget.Button && nativeView.getTransformationMethod() instanceof TextTransformation) {
        nativeView.setTransformationMethod(this._defaultTransformationMethod);
      }
    }

    if (this.secure) {
      return;
    }

    var spannableStringBuilder = createSpannableStringBuilder(value);
    nativeView.setText(spannableStringBuilder);
    text_base_common_1.textProperty.nativeValueChange(this, value === null || value === undefined ? "" : value.toString());

    if (spannableStringBuilder && nativeView instanceof android.widget.Button && !(nativeView.getTransformationMethod() instanceof TextTransformation)) {
      nativeView.setTransformationMethod(new TextTransformation(this));
    }
  };

  TextBase.prototype[text_base_common_1.textTransformProperty.setNative] = function (value) {
    if (value === "initial") {
      this.nativeTextViewProtected.setTransformationMethod(this._defaultTransformationMethod);
      return;
    }

    if (this.secure) {
      return;
    }

    this.nativeTextViewProtected.setTransformationMethod(new TextTransformation(this));
  };

  TextBase.prototype[text_base_common_1.textAlignmentProperty.getDefault] = function () {
    return "initial";
  };

  TextBase.prototype[text_base_common_1.textAlignmentProperty.setNative] = function (value) {
    var verticalGravity = this.nativeTextViewProtected.getGravity() & android.view.Gravity.VERTICAL_GRAVITY_MASK;

    switch (value) {
      case "initial":
      case "left":
        this.nativeTextViewProtected.setGravity(android.view.Gravity.START | verticalGravity);
        break;

      case "center":
        this.nativeTextViewProtected.setGravity(android.view.Gravity.CENTER_HORIZONTAL | verticalGravity);
        break;

      case "right":
        this.nativeTextViewProtected.setGravity(android.view.Gravity.END | verticalGravity);
        break;
    }
  };

  TextBase.prototype[text_base_common_1.whiteSpaceProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;

    switch (value) {
      case "initial":
      case "normal":
        nativeView.setSingleLine(false);
        nativeView.setEllipsize(null);
        break;

      case "nowrap":
        nativeView.setSingleLine(true);
        nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);
        break;
    }
  };

  TextBase.prototype[text_base_common_1.colorProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getTextColors();
  };

  TextBase.prototype[text_base_common_1.colorProperty.setNative] = function (value) {
    if (!this.formattedText || !(value instanceof text_base_common_1.Color)) {
      if (value instanceof text_base_common_1.Color) {
        this.nativeTextViewProtected.setTextColor(value.android);
      } else {
        this.nativeTextViewProtected.setTextColor(value);
      }
    }
  };

  TextBase.prototype[text_base_common_1.fontSizeProperty.getDefault] = function () {
    return {
      nativeSize: this.nativeTextViewProtected.getTextSize()
    };
  };

  TextBase.prototype[text_base_common_1.fontSizeProperty.setNative] = function (value) {
    if (!this.formattedText || typeof value !== "number") {
      if (typeof value === "number") {
        this.nativeTextViewProtected.setTextSize(value);
      } else {
        this.nativeTextViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
      }
    }
  };

  TextBase.prototype[text_base_common_1.lineHeightProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getLineSpacingExtra() / text_base_common_1.layout.getDisplayDensity();
  };

  TextBase.prototype[text_base_common_1.lineHeightProperty.setNative] = function (value) {
    this.nativeTextViewProtected.setLineSpacing(value * text_base_common_1.layout.getDisplayDensity(), 1);
  };

  TextBase.prototype[text_base_common_1.fontInternalProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getTypeface();
  };

  TextBase.prototype[text_base_common_1.fontInternalProperty.setNative] = function (value) {
    if (!this.formattedText || !(value instanceof font_1.Font)) {
      this.nativeTextViewProtected.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
    }
  };

  TextBase.prototype[text_base_common_1.textDecorationProperty.getDefault] = function (value) {
    return this._paintFlags = this.nativeTextViewProtected.getPaintFlags();
  };

  TextBase.prototype[text_base_common_1.textDecorationProperty.setNative] = function (value) {
    switch (value) {
      case "none":
        this.nativeTextViewProtected.setPaintFlags(0);
        break;

      case "underline":
        this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.UNDERLINE_TEXT_FLAG);
        break;

      case "line-through":
        this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.STRIKE_THRU_TEXT_FLAG);
        break;

      case "underline line-through":
        this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.UNDERLINE_TEXT_FLAG | android.graphics.Paint.STRIKE_THRU_TEXT_FLAG);
        break;

      default:
        this.nativeTextViewProtected.setPaintFlags(value);
        break;
    }
  };

  TextBase.prototype[text_base_common_1.letterSpacingProperty.getDefault] = function () {
    return org.nativescript.widgets.ViewHelper.getLetterspacing(this.nativeTextViewProtected);
  };

  TextBase.prototype[text_base_common_1.letterSpacingProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setLetterspacing(this.nativeTextViewProtected, value);
  };

  TextBase.prototype[text_base_common_1.paddingTopProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingTop,
      unit: "px"
    };
  };

  TextBase.prototype[text_base_common_1.paddingTopProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeTextViewProtected, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
  };

  TextBase.prototype[text_base_common_1.paddingRightProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingRight,
      unit: "px"
    };
  };

  TextBase.prototype[text_base_common_1.paddingRightProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeTextViewProtected, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
  };

  TextBase.prototype[text_base_common_1.paddingBottomProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingBottom,
      unit: "px"
    };
  };

  TextBase.prototype[text_base_common_1.paddingBottomProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeTextViewProtected, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
  };

  TextBase.prototype[text_base_common_1.paddingLeftProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingLeft,
      unit: "px"
    };
  };

  TextBase.prototype[text_base_common_1.paddingLeftProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeTextViewProtected, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
  };

  TextBase.prototype._setNativeText = function (reset) {
    if (reset === void 0) {
      reset = false;
    }

    if (reset) {
      this.nativeTextViewProtected.setText(null);
      return;
    }

    var transformedText;

    if (this.formattedText) {
      transformedText = createSpannableStringBuilder(this.formattedText);
    } else {
      var text = this.text;
      var stringValue = text === null || text === undefined ? "" : text.toString();
      transformedText = getTransformedText(stringValue, this.textTransform);
    }

    this.nativeTextViewProtected.setText(transformedText);
  };

  return TextBase;
}(text_base_common_1.TextBaseCommon);

exports.TextBase = TextBase;

function getCapitalizedString(str) {
  var words = str.split(" ");
  var newWords = [];

  for (var i = 0, length_1 = words.length; i < length_1; i++) {
    var word = words[i].toLowerCase();
    newWords.push(word.substr(0, 1).toUpperCase() + word.substring(1));
  }

  return newWords.join(" ");
}

function getTransformedText(text, textTransform) {
  if (!text || !types_1.isString(text)) {
    return "";
  }

  switch (textTransform) {
    case "uppercase":
      return text.toUpperCase();

    case "lowercase":
      return text.toLowerCase();

    case "capitalize":
      return getCapitalizedString(text);

    case "none":
    default:
      return text;
  }
}

exports.getTransformedText = getTransformedText;

function createSpannableStringBuilder(formattedString) {
  if (!formattedString) {
    return null;
  }

  var ssb = new android.text.SpannableStringBuilder();

  for (var i = 0, spanStart = 0, spanLength = 0, length_2 = formattedString.spans.length; i < length_2; i++) {
    var span = formattedString.spans.getItem(i);
    var text = span.text;
    var textTransform = formattedString.parent.textTransform;
    var spanText = text === null || text === undefined ? "" : text.toString();

    if (textTransform && textTransform !== "none") {
      spanText = getTransformedText(spanText, textTransform);
    }

    spanLength = spanText.length;

    if (spanLength > 0) {
      ssb.insert(spanStart, spanText);
      setSpanModifiers(ssb, span, spanStart, spanStart + spanLength);
      spanStart += spanLength;
    }
  }

  return ssb;
}

function setSpanModifiers(ssb, span, start, end) {
  var spanStyle = span.style;
  var bold = text_base_common_1.isBold(spanStyle.fontWeight);
  var italic = spanStyle.fontStyle === "italic";

  if (bold && italic) {
    ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD_ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  } else if (bold) {
    ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  } else if (italic) {
    ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var fontFamily = span.fontFamily;

  if (fontFamily) {
    var font = new font_1.Font(fontFamily, 0, italic ? "italic" : "normal", bold ? "bold" : "normal");
    var typeface = font.getAndroidTypeface() || android.graphics.Typeface.create(fontFamily, 0);
    var typefaceSpan = new org.nativescript.widgets.CustomTypefaceSpan(fontFamily, typeface);
    ssb.setSpan(typefaceSpan, start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var realFontSize = span.fontSize;

  if (realFontSize) {
    ssb.setSpan(new android.text.style.AbsoluteSizeSpan(realFontSize * text_base_common_1.layout.getDisplayDensity()), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var color = span.color;

  if (color) {
    ssb.setSpan(new android.text.style.ForegroundColorSpan(color.android), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var backgroundColor;

  if (style_properties_1.backgroundColorProperty.isSet(spanStyle)) {
    backgroundColor = spanStyle.backgroundColor;
  } else if (style_properties_1.backgroundColorProperty.isSet(span.parent.style)) {
    backgroundColor = span.parent.style.backgroundColor;
  } else if (style_properties_1.backgroundColorProperty.isSet(span.parent.parent.style)) {
    backgroundColor = span.parent.parent.style.backgroundColor;
  }

  if (backgroundColor) {
    ssb.setSpan(new android.text.style.BackgroundColorSpan(backgroundColor.android), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var valueSource;

  if (text_base_common_1.textDecorationProperty.isSet(spanStyle)) {
    valueSource = spanStyle;
  } else if (text_base_common_1.textDecorationProperty.isSet(span.parent.style)) {
    valueSource = span.parent.style;
  } else if (text_base_common_1.textDecorationProperty.isSet(span.parent.parent.style)) {
    valueSource = span.parent.parent.style;
  }

  if (valueSource) {
    var textDecorations = valueSource.textDecoration;
    var underline_1 = textDecorations.indexOf("underline") !== -1;

    if (underline_1) {
      ssb.setSpan(new android.text.style.UnderlineSpan(), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }

    var strikethrough = textDecorations.indexOf("line-through") !== -1;

    if (strikethrough) {
      ssb.setSpan(new android.text.style.StrikethroughSpan(), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-field/text-field-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var editable_text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js"));

var TextFieldBase = function (_super) {
  __extends(TextFieldBase, _super);

  function TextFieldBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextFieldBase.returnPressEvent = "returnPress";
  TextFieldBase = __decorate([editable_text_base_1.CSSType("TextField")], TextFieldBase);
  return TextFieldBase;
}(editable_text_base_1.EditableTextBase);

exports.TextFieldBase = TextFieldBase;
TextFieldBase.prototype.recycleNativeView = "auto";
exports.secureProperty = new editable_text_base_1.Property({
  name: "secure",
  defaultValue: false,
  valueConverter: editable_text_base_1.booleanConverter
});
exports.secureProperty.register(TextFieldBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-field/text-field.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_field_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field-common.js"));

var TextField = function (_super) {
  __extends(TextField, _super);

  function TextField() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextField.prototype._configureEditText = function (editText) {
    editText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    editText.setLines(1);
    editText.setMaxLines(1);
    editText.setHorizontallyScrolling(true);
  };

  TextField.prototype._onReturnPress = function () {
    this.notify({
      eventName: TextField.returnPressEvent,
      object: this
    });
  };

  TextField.prototype[text_field_common_1.secureProperty.setNative] = function () {
    this.setSecureAndKeyboardType();
  };

  TextField.prototype[text_field_common_1.keyboardTypeProperty.setNative] = function () {
    this.setSecureAndKeyboardType();
  };

  TextField.prototype.setSecureAndKeyboardType = function () {
    var inputType;

    if (this.secure) {
      if (this.keyboardType === "number") {
        inputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD;
      } else {
        inputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD;
      }
    } else {
      inputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;

      if (this.autocorrect) {
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
        inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
      }

      switch (this.autocapitalizationType) {
        case "words":
          inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
          break;

        case "sentences":
          inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
          break;

        case "allcharacters":
          inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
          break;

        default:
          break;
      }

      switch (this.keyboardType) {
        case "datetime":
          inputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
          break;

        case "phone":
          inputType = android.text.InputType.TYPE_CLASS_PHONE;
          break;

        case "number":
          inputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
          break;

        case "url":
          inputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
          break;

        case "email":
          inputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
          break;

        default:
          break;
      }
    }

    this._setInputType(inputType);
  };

  TextField.prototype[text_field_common_1.whiteSpaceProperty.getDefault] = function () {
    return "nowrap";
  };

  TextField.prototype[text_field_common_1.whiteSpaceProperty.setNative] = function (value) {};

  return TextField;
}(text_field_common_1.TextFieldBase);

exports.TextField = TextField;
TextField.prototype._isSingleLine = true;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/fade-transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var FadeTransition = function (_super) {
  __extends(FadeTransition, _super);

  function FadeTransition() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  FadeTransition.prototype.createAndroidAnimator = function (transitionType) {
    var alphaValues = Array.create("float", 2);

    switch (transitionType) {
      case transition_1.AndroidTransitionType.enter:
      case transition_1.AndroidTransitionType.popEnter:
        alphaValues[0] = 0;
        alphaValues[1] = 1;
        break;

      case transition_1.AndroidTransitionType.exit:
      case transition_1.AndroidTransitionType.popExit:
        alphaValues[0] = 1;
        alphaValues[1] = 0;
        break;
    }

    var animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", alphaValues);
    var duration = this.getDuration();

    if (duration !== undefined) {
      animator.setDuration(duration);
    }

    animator.setInterpolator(this.getCurve());
    return animator;
  };

  return FadeTransition;
}(transition_1.Transition);

exports.FadeTransition = FadeTransition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/flip-transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var FlipTransition = function (_super) {
  __extends(FlipTransition, _super);

  function FlipTransition(direction, duration, curve) {
    var _this = _super.call(this, duration, curve) || this;

    _this._direction = direction;
    return _this;
  }

  FlipTransition.prototype.createAndroidAnimator = function (transitionType) {
    var objectAnimators;
    var values;
    var animator;
    var animatorSet = new android.animation.AnimatorSet();
    var fullDuration = this.getDuration() || 300;
    var interpolator = this.getCurve();
    var rotationY = this._direction === "right" ? 180 : -180;

    switch (transitionType) {
      case transition_1.AndroidTransitionType.enter:
        objectAnimators = Array.create(android.animation.Animator, 3);
        values = Array.create("float", 2);
        values[0] = 1.0;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setDuration(0);
        objectAnimators[0] = animator;
        values = Array.create("float", 2);
        values[0] = rotationY;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
        animator.setInterpolator(interpolator);
        animator.setDuration(fullDuration);
        objectAnimators[1] = animator;
        values = Array.create("float", 2);
        values[0] = 0.0;
        values[1] = 1.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setStartDelay(fullDuration / 2);
        animator.setDuration(1);
        objectAnimators[2] = animator;
        break;

      case transition_1.AndroidTransitionType.exit:
        objectAnimators = Array.create(android.animation.Animator, 2);
        values = Array.create("float", 2);
        values[0] = 0.0;
        values[1] = -rotationY;
        animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
        animator.setInterpolator(interpolator);
        animator.setDuration(fullDuration);
        objectAnimators[0] = animator;
        values = Array.create("float", 2);
        values[0] = 1.0;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setStartDelay(fullDuration / 2);
        animator.setDuration(1);
        objectAnimators[1] = animator;
        break;

      case transition_1.AndroidTransitionType.popEnter:
        objectAnimators = Array.create(android.animation.Animator, 3);
        values = Array.create("float", 2);
        values[0] = 1.0;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setDuration(0);
        objectAnimators[0] = animator;
        values = Array.create("float", 2);
        values[0] = -rotationY;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
        animator.setInterpolator(interpolator);
        animator.setDuration(fullDuration);
        objectAnimators[1] = animator;
        values = Array.create("float", 2);
        values[0] = 0.0;
        values[1] = 1.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setStartDelay(fullDuration / 2);
        animator.setDuration(1);
        objectAnimators[2] = animator;
        break;

      case transition_1.AndroidTransitionType.popExit:
        objectAnimators = Array.create(android.animation.Animator, 2);
        values = Array.create("float", 2);
        values[0] = 0.0;
        values[1] = rotationY;
        animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
        animator.setInterpolator(interpolator);
        animator.setDuration(fullDuration);
        objectAnimators[0] = animator;
        values = Array.create("float", 2);
        values[0] = 1.0;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setStartDelay(fullDuration / 2);
        animator.setDuration(1);
        objectAnimators[1] = animator;
        break;
    }

    animatorSet.playTogether(objectAnimators);
    return animatorSet;
  };

  return FlipTransition;
}(transition_1.Transition);

exports.FlipTransition = FlipTransition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/slide-transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var lazy_1 = __webpack_require__("../node_modules/tns-core-modules/utils/lazy.js");

var screenWidth = lazy_1.default(function () {
  return platform.screen.mainScreen.widthPixels;
});
var screenHeight = lazy_1.default(function () {
  return platform.screen.mainScreen.heightPixels;
});

var SlideTransition = function (_super) {
  __extends(SlideTransition, _super);

  function SlideTransition(direction, duration, curve) {
    var _this = _super.call(this, duration, curve) || this;

    _this._direction = direction;
    return _this;
  }

  SlideTransition.prototype.createAndroidAnimator = function (transitionType) {
    var translationValues = Array.create("float", 2);

    switch (this._direction) {
      case "left":
        switch (transitionType) {
          case transition.AndroidTransitionType.enter:
            translationValues[0] = screenWidth();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.exit:
            translationValues[0] = 0;
            translationValues[1] = -screenWidth();
            break;

          case transition.AndroidTransitionType.popEnter:
            translationValues[0] = -screenWidth();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.popExit:
            translationValues[0] = 0;
            translationValues[1] = screenWidth();
            break;
        }

        break;

      case "right":
        switch (transitionType) {
          case transition.AndroidTransitionType.enter:
            translationValues[0] = -screenWidth();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.exit:
            translationValues[0] = 0;
            translationValues[1] = screenWidth();
            break;

          case transition.AndroidTransitionType.popEnter:
            translationValues[0] = screenWidth();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.popExit:
            translationValues[0] = 0;
            translationValues[1] = -screenWidth();
            break;
        }

        break;

      case "top":
        switch (transitionType) {
          case transition.AndroidTransitionType.enter:
            translationValues[0] = screenHeight();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.exit:
            translationValues[0] = 0;
            translationValues[1] = -screenHeight();
            break;

          case transition.AndroidTransitionType.popEnter:
            translationValues[0] = -screenHeight();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.popExit:
            translationValues[0] = 0;
            translationValues[1] = screenHeight();
            break;
        }

        break;

      case "bottom":
        switch (transitionType) {
          case transition.AndroidTransitionType.enter:
            translationValues[0] = -screenHeight();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.exit:
            translationValues[0] = 0;
            translationValues[1] = screenHeight();
            break;

          case transition.AndroidTransitionType.popEnter:
            translationValues[0] = screenHeight();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.popExit:
            translationValues[0] = 0;
            translationValues[1] = -screenHeight();
            break;
        }

        break;
    }

    var prop;

    if (this._direction === "left" || this._direction === "right") {
      prop = "translationX";
    } else {
      prop = "translationY";
    }

    var animator = android.animation.ObjectAnimator.ofFloat(null, prop, translationValues);
    var duration = this.getDuration();

    if (duration !== undefined) {
      animator.setDuration(duration);
    }

    animator.setInterpolator(this.getCurve());
    return animator;
  };

  SlideTransition.prototype.toString = function () {
    return _super.prototype.toString.call(this) + " " + this._direction;
  };

  return SlideTransition;
}(transition.Transition);

exports.SlideTransition = SlideTransition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");

var lazy_1 = __webpack_require__("../node_modules/tns-core-modules/utils/lazy.js");

var _defaultInterpolator = lazy_1.default(function () {
  return new android.view.animation.AccelerateDecelerateInterpolator();
});

var AndroidTransitionType;

(function (AndroidTransitionType) {
  AndroidTransitionType.enter = "enter";
  AndroidTransitionType.exit = "exit";
  AndroidTransitionType.popEnter = "popEnter";
  AndroidTransitionType.popExit = "popExit";
})(AndroidTransitionType = exports.AndroidTransitionType || (exports.AndroidTransitionType = {}));

var transitionId = 0;

var Transition = function () {
  function Transition(duration, curve) {
    this._duration = duration;
    this._interpolator = curve ? animation_1._resolveAnimationCurve(curve) : _defaultInterpolator();
    this._id = transitionId++;
  }

  Transition.prototype.getDuration = function () {
    return this._duration;
  };

  Transition.prototype.getCurve = function () {
    return this._interpolator;
  };

  Transition.prototype.animateIOSTransition = function (containerView, fromView, toView, operation, completion) {
    throw new Error("Abstract method call");
  };

  Transition.prototype.createAndroidAnimator = function (transitionType) {
    throw new Error("Abstract method call");
  };

  Transition.prototype.toString = function () {
    return "Transition@" + this._id;
  };

  return Transition;
}();

exports.Transition = Transition;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/debug.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

exports.debug = true;
var applicationRootPath;

function ensureAppRootPath() {
  if (!applicationRootPath) {
    applicationRootPath = file_system_1.knownFolders.currentApp().path;
    applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
  }
}

var Source = function () {
  function Source(uri, line, column) {
    ensureAppRootPath();

    if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
      this._uri = "file://" + uri.substr(applicationRootPath.length);
    } else {
      this._uri = uri;
    }

    this._line = line;
    this._column = column;
  }

  Object.defineProperty(Source.prototype, "uri", {
    get: function () {
      return this._uri;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Source.prototype, "line", {
    get: function () {
      return this._line;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Source.prototype, "column", {
    get: function () {
      return this._column;
    },
    enumerable: true,
    configurable: true
  });

  Source.prototype.toString = function () {
    return this._uri + ":" + this._line + ":" + this._column;
  };

  Source.get = function (object) {
    return object[Source._source];
  };

  Source.set = function (object, src) {
    object[Source._source] = src;
  };

  Source._source = Symbol("source");
  return Source;
}();

exports.Source = Source;

var ScopeError = function (_super) {
  __extends(ScopeError, _super);

  function ScopeError(inner, message) {
    var _this = this;

    var formattedMessage;

    if (message && inner.message) {
      formattedMessage = message + "\n > " + inner.message.replace("\n", "\n  ");
    } else {
      formattedMessage = message || inner.message || undefined;
    }

    _this = _super.call(this, formattedMessage) || this;
    _this.stack = platform_1.isAndroid ? "Error: " + _this.message + "\n" + inner.stack.substr(inner.stack.indexOf("\n") + 1) : inner.stack;
    _this.message = formattedMessage;
    return _this;
  }

  return ScopeError;
}(Error);

exports.ScopeError = ScopeError;

var SourceError = function (_super) {
  __extends(SourceError, _super);

  function SourceError(child, source, message) {
    return _super.call(this, child, message ? message + " @" + source + "" : source + "") || this;
  }

  return SourceError;
}(ScopeError);

exports.SourceError = SourceError;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/lazy.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function lazy(action) {
  var _value;

  return function () {
    return _value || (_value = action());
  };
}

exports.default = lazy;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/number-utils.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var epsilon = 1E-05;

function areClose(value1, value2) {
  return Math.abs(value1 - value2) < epsilon;
}

exports.areClose = areClose;

function greaterThanOrClose(value1, value2) {
  return value1 > value2 || areClose(value1, value2);
}

exports.greaterThanOrClose = greaterThanOrClose;

function greaterThan(value1, value2) {
  return value1 > value2 && !areClose(value1, value2);
}

exports.greaterThan = greaterThan;

function lessThan(value1, value2) {
  return value1 < value2 && !areClose(value1, value2);
}

exports.lessThan = lessThan;

function isZero(value) {
  return Math.abs(value) < epsilon;
}

exports.isZero = isZero;

function greaterThanZero(value) {
  return value > 0;
}

exports.greaterThanZero = greaterThanZero;

function notNegative(value) {
  return value >= 0;
}

exports.notNegative = notNegative;

exports.radiansToDegrees = function (a) {
  return a * (180 / Math.PI);
};

exports.degreesToRadians = function (a) {
  return a * (Math.PI / 180);
};

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/types.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function isString(value) {
  return typeof value === "string" || value instanceof String;
}

exports.isString = isString;

function isNumber(value) {
  return typeof value === "number" || value instanceof Number;
}

exports.isNumber = isNumber;

function isBoolean(value) {
  return typeof value === "boolean" || value instanceof Boolean;
}

exports.isBoolean = isBoolean;

function isFunction(value) {
  if (!value) {
    return false;
  }

  return typeof value === "function";
}

exports.isFunction = isFunction;

function isObject(value) {
  if (!value) {
    return false;
  }

  return typeof value === "object";
}

exports.isObject = isObject;

function isUndefined(value) {
  return value === undefined;
}

exports.isUndefined = isUndefined;

function isDefined(value) {
  return typeof value !== "undefined";
}

exports.isDefined = isDefined;

function isNullOrUndefined(value) {
  return value === undefined || value === null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function verifyCallback(value) {
  if (value && !isFunction(value)) {
    throw new TypeError("Callback must be a valid function.");
  }
}

exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function ([_a-zA-Z0-9]{1,})\(/;

function getClass(object) {
  return getClassInfo(object).name;
}

exports.getClass = getClass;

function getClassInfo(object) {
  var constructor = object.constructor;
  var result = classInfosMap.get(constructor);

  if (!result) {
    result = new ClassInfo(constructor);
    classInfosMap.set(constructor, result);
  }

  return result;
}

exports.getClassInfo = getClassInfo;

function getBaseClasses(object) {
  var result = [];
  var info = getClassInfo(object);

  while (info) {
    result.push(info.name);
    info = info.baseClassInfo;
  }

  return result;
}

exports.getBaseClasses = getBaseClasses;

var ClassInfo = function () {
  function ClassInfo(typeCosntructor) {
    this._typeCosntructor = typeCosntructor;
  }

  Object.defineProperty(ClassInfo.prototype, "name", {
    get: function () {
      if (!this._name) {
        var results = funcNameRegex.exec(this._typeCosntructor.toString());
        this._name = results && results.length > 1 ? results[1] : "";
      }

      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
    get: function () {
      if (isUndefined(this._baseClassInfo)) {
        this._baseClassInfo = ClassInfo._getBase(this);

        if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
          this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
        }
      }

      return this._baseClassInfo;
    },
    enumerable: true,
    configurable: true
  });

  ClassInfo._getBase = function (info) {
    var result = null;
    var constructorProto = info._typeCosntructor.prototype;

    if (constructorProto.__proto__) {
      result = getClassInfo(constructorProto.__proto__);
    }

    return result;
  };

  return ClassInfo;
}();

exports.ClassInfo = ClassInfo;

function toUIString(obj) {
  return isNullOrUndefined(obj) ? "" : obj + "";
}

exports.toUIString = toUIString;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/utils-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

exports.RESOURCE_PREFIX = "res://";
exports.FILE_PREFIX = "file:///";

function escapeRegexSymbols(source) {
  var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
  return source.replace(escapeRegex, "\\$&");
}

exports.escapeRegexSymbols = escapeRegexSymbols;

function convertString(value) {
  var result;

  if (!types.isString(value)) {
    result = value;
  } else if (value.trim() === "") {
    result = value;
  } else {
    var valueAsNumber = +value;

    if (!isNaN(valueAsNumber)) {
      result = valueAsNumber;
    } else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
      result = value.toLowerCase() === "true" ? true : false;
    } else {
      result = value;
    }
  }

  return result;
}

exports.convertString = convertString;
var layout;

(function (layout) {
  var MODE_SHIFT = 30;
  var MODE_MASK = 0x3 << MODE_SHIFT;
  layout.UNSPECIFIED = 0 << MODE_SHIFT;
  layout.EXACTLY = 1 << MODE_SHIFT;
  layout.AT_MOST = 2 << MODE_SHIFT;
  layout.MEASURED_HEIGHT_STATE_SHIFT = 0x00000010;
  layout.MEASURED_STATE_TOO_SMALL = 0x01000000;
  layout.MEASURED_STATE_MASK = 0xff000000;
  layout.MEASURED_SIZE_MASK = 0x00ffffff;

  function getMode(mode) {
    switch (mode) {
      case layout.EXACTLY:
        return "Exact";

      case layout.AT_MOST:
        return "AtMost";

      default:
        return "Unspecified";
    }
  }

  layout.getMode = getMode;

  function getMeasureSpecMode(spec) {
    return spec & MODE_MASK;
  }

  layout.getMeasureSpecMode = getMeasureSpecMode;

  function getMeasureSpecSize(spec) {
    return spec & ~MODE_MASK;
  }

  layout.getMeasureSpecSize = getMeasureSpecSize;

  function measureSpecToString(measureSpec) {
    var mode = getMeasureSpecMode(measureSpec);
    var size = getMeasureSpecSize(measureSpec);
    var text = "MeasureSpec: ";

    if (mode === layout.UNSPECIFIED) {
      text += "UNSPECIFIED ";
    } else if (mode === layout.EXACTLY) {
      text += "EXACTLY ";
    } else if (mode === layout.AT_MOST) {
      text += "AT_MOST ";
    }

    text += size;
    return text;
  }

  layout.measureSpecToString = measureSpecToString;

  function round(value) {
    var res = Math.floor(value + 0.5);

    if (res !== 0) {
      return res;
    } else if (value === 0) {
      return 0;
    } else if (value > 0) {
      return 1;
    }

    return -1;
  }

  layout.round = round;
})(layout = exports.layout || (exports.layout = {}));

function isFileOrResourcePath(path) {
  if (!types.isString(path)) {
    return false;
  }

  return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}

exports.isFileOrResourcePath = isFileOrResourcePath;

function isDataURI(uri) {
  if (!types.isString(uri)) {
    return false;
  }

  var firstSegment = uri.trim().split(",")[0];
  return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}

exports.isDataURI = isDataURI;

function mergeSort(arr, compareFunc) {
  if (arr.length < 2) {
    return arr;
  }

  var middle = arr.length / 2;
  var left = arr.slice(0, middle);
  var right = arr.slice(middle, arr.length);
  return merge(mergeSort(left, compareFunc), mergeSort(right, compareFunc), compareFunc);
}

exports.mergeSort = mergeSort;

function merge(left, right, compareFunc) {
  var result = [];

  while (left.length && right.length) {
    if (compareFunc(left[0], right[0]) <= 0) {
      result.push(left.shift());
    } else {
      result.push(right.shift());
    }
  }

  while (left.length) {
    result.push(left.shift());
  }

  while (right.length) {
    result.push(right.shift());
  }

  return result;
}

exports.merge = merge;

function hasDuplicates(arr) {
  return arr.length !== eliminateDuplicates(arr).length;
}

exports.hasDuplicates = hasDuplicates;

function eliminateDuplicates(arr) {
  return Array.from(new Set(arr));
}

exports.eliminateDuplicates = eliminateDuplicates;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/utils.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

__export(__webpack_require__("../node_modules/tns-core-modules/utils/utils-common.js"));

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var layout;

(function (layout) {
  var density;
  var MODE_SHIFT = 30;
  var MODE_MASK = 0x3 << MODE_SHIFT;
  var sdkVersion;
  var useOldMeasureSpec = false;

  function makeMeasureSpec(size, mode) {
    if (sdkVersion === undefined) {
      sdkVersion = ad.getApplicationContext().getApplicationInfo().targetSdkVersion;
      useOldMeasureSpec = sdkVersion <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
    }

    if (useOldMeasureSpec) {
      return size + mode;
    }

    return size & ~MODE_MASK | mode & MODE_MASK;
  }

  layout.makeMeasureSpec = makeMeasureSpec;

  function getDisplayDensity() {
    if (density === undefined) {
      density = ad.getResources().getDisplayMetrics().density;
    }

    return density;
  }

  layout.getDisplayDensity = getDisplayDensity;

  function toDevicePixels(value) {
    return value * getDisplayDensity();
  }

  layout.toDevicePixels = toDevicePixels;

  function toDeviceIndependentPixels(value) {
    return value / getDisplayDensity();
  }

  layout.toDeviceIndependentPixels = toDeviceIndependentPixels;

  function measureNativeView(nativeView, width, widthMode, height, heightMode) {
    var view = nativeView;
    view.measure(makeMeasureSpec(width, widthMode), makeMeasureSpec(height, heightMode));
    return {
      width: view.getMeasuredWidth(),
      height: view.getMeasuredHeight()
    };
  }

  layout.measureNativeView = measureNativeView;
})(layout = exports.layout || (exports.layout = {}));

var ad;

(function (ad) {
  var application;
  var applicationContext;
  var contextResources;
  var packageName;

  function getApplicationContext() {
    if (!applicationContext) {
      applicationContext = getApplication().getApplicationContext();
    }

    return applicationContext;
  }

  ad.getApplicationContext = getApplicationContext;

  function getApplication() {
    if (!application) {
      application = application_1.getNativeApplication();
    }

    return application;
  }

  ad.getApplication = getApplication;

  function getResources() {
    if (!contextResources) {
      contextResources = getApplication().getResources();
    }

    return contextResources;
  }

  ad.getResources = getResources;

  function getPackageName() {
    if (!packageName) {
      packageName = getApplicationContext().getPackageName();
    }

    return packageName;
  }

  var inputMethodManager;

  function getInputMethodManager() {
    if (!inputMethodManager) {
      inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
    }

    return inputMethodManager;
  }

  ad.getInputMethodManager = getInputMethodManager;

  function showSoftInput(nativeView) {
    var inputManager = getInputMethodManager();

    if (inputManager && nativeView instanceof android.view.View) {
      inputManager.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
    }
  }

  ad.showSoftInput = showSoftInput;

  function dismissSoftInput(nativeView) {
    var inputManager = getInputMethodManager();
    var windowToken;

    if (nativeView instanceof android.view.View) {
      windowToken = nativeView.getWindowToken();
    } else if (application_1.android.foregroundActivity instanceof android.support.v7.app.AppCompatActivity) {
      var decorView = application_1.android.foregroundActivity.getWindow().getDecorView();
      windowToken = decorView ? decorView.getWindowToken() : null;
    }

    if (inputManager && windowToken) {
      inputManager.hideSoftInputFromWindow(windowToken, 0);
    }
  }

  ad.dismissSoftInput = dismissSoftInput;
  var collections;

  (function (collections) {
    function stringArrayToStringSet(str) {
      var hashSet = new java.util.HashSet();

      if (str !== undefined) {
        for (var element in str) {
          hashSet.add("" + str[element]);
        }
      }

      return hashSet;
    }

    collections.stringArrayToStringSet = stringArrayToStringSet;

    function stringSetToStringArray(stringSet) {
      var arr = [];

      if (stringSet !== undefined) {
        var it = stringSet.iterator();

        while (it.hasNext()) {
          var element = "" + it.next();
          arr.push(element);
        }
      }

      return arr;
    }

    collections.stringSetToStringArray = stringSetToStringArray;
  })(collections = ad.collections || (ad.collections = {}));

  var resources;

  (function (resources_1) {
    var attr;
    var attrCache = new Map();

    function getDrawableId(name) {
      return getId(":drawable/" + name);
    }

    resources_1.getDrawableId = getDrawableId;

    function getStringId(name) {
      return getId(":string/" + name);
    }

    resources_1.getStringId = getStringId;

    function getId(name) {
      var resources = getResources();
      var packageName = getPackageName();
      var uri = packageName + name;
      return resources.getIdentifier(uri, null, null);
    }

    resources_1.getId = getId;

    function getPalleteColor(name, context) {
      return getPaletteColor(name, context);
    }

    resources_1.getPalleteColor = getPalleteColor;

    function getPaletteColor(name, context) {
      if (attrCache.has(name)) {
        return attrCache.get(name);
      }

      var result = 0;

      try {
        if (!attr) {
          attr = java.lang.Class.forName("android.support.v7.appcompat.R$attr");
        }

        var colorID = 0;
        var field = attr.getField(name);

        if (field) {
          colorID = field.getInt(null);
        }

        if (colorID) {
          var typedValue = new android.util.TypedValue();
          context.getTheme().resolveAttribute(colorID, typedValue, true);
          result = typedValue.data;
        }
      } catch (ex) {
        trace_1.write("Cannot get pallete color: " + name, trace_1.categories.Error, trace_1.messageType.error);
      }

      attrCache.set(name, result);
      return result;
    }

    resources_1.getPaletteColor = getPaletteColor;
  })(resources = ad.resources || (ad.resources = {}));
})(ad = exports.ad || (exports.ad = {}));

function GC() {
  gc();
}

exports.GC = GC;

function releaseNativeObject(object) {
  __releaseNativeCounterpart(object);
}

exports.releaseNativeObject = releaseNativeObject;

function openUrl(location) {
  var context = ad.getApplicationContext();

  try {
    var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(location.trim()));
    intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(intent);
  } catch (e) {
    trace_1.write("Error in OpenURL", trace_1.categories.Error, trace_1.messageType.error);
    return false;
  }

  return true;
}

exports.openUrl = openUrl;

/***/ }),

/***/ "../node_modules/tns-core-modules/xhr/xhr.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var XMLHttpRequestResponseType;

(function (XMLHttpRequestResponseType) {
  XMLHttpRequestResponseType.empty = "";
  XMLHttpRequestResponseType.text = "text";
  XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));

var XMLHttpRequest = function () {
  function XMLHttpRequest() {
    this.UNSENT = 0;
    this.OPENED = 1;
    this.HEADERS_RECEIVED = 2;
    this.LOADING = 3;
    this.DONE = 4;
    this._responseType = "";
    this.textTypes = ["text/plain", "application/xml", "application/rss+xml", "text/html", "text/xml"];
    this._listeners = new Map();
    this._readyState = this.UNSENT;
  }

  XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
    if (types.isString(method) && types.isString(url)) {
      this._options = {
        url: url,
        method: method
      };
      this._options.headers = {};

      if (types.isString(user)) {
        this._options.headers["user"] = user;
      }

      if (types.isString(password)) {
        this._options.headers["password"] = password;
      }

      this._setReadyState(this.OPENED);
    }
  };

  XMLHttpRequest.prototype.abort = function () {
    this._errorFlag = true;
    this._response = null;
    this._responseTextReader = null;
    this._headers = null;
    this._status = null;

    if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
      this._readyState = this.UNSENT;
    } else {
      this._setReadyState(this.DONE);
    }
  };

  XMLHttpRequest.prototype.send = function (data) {
    var _this = this;

    this._errorFlag = false;
    this._response = null;
    this._responseTextReader = null;
    this._headers = null;
    this._status = null;

    if (types.isDefined(this._options)) {
      if (types.isString(data) && this._options.method !== "GET") {
        this._options.content = data;
      } else if (data instanceof FormData) {
        this._options.content = data.toString();
      }

      http.request(this._options).then(function (r) {
        if (!_this._errorFlag) {
          _this._loadResponse(r);
        }
      }).catch(function (e) {
        _this._errorFlag = true;

        _this._setReadyState(_this.DONE, e);
      });
    }
  };

  XMLHttpRequest.prototype._loadResponse = function (r) {
    this._status = r.statusCode;
    this._response = r.content.raw + "";
    this._headers = r.headers;

    this._setReadyState(this.HEADERS_RECEIVED);

    this._setReadyState(this.LOADING);

    this._setResponseType();

    this._responseTextReader = function () {
      return r.content.toString();
    };

    this._addToStringOnResponse();

    if (this.responseType === XMLHttpRequestResponseType.json) {
      this._response = JSON.parse(this.responseText);
    } else if (this.responseType === XMLHttpRequestResponseType.text) {
      this._response = this.responseText;
    }

    this._setReadyState(this.DONE);
  };

  XMLHttpRequest.prototype._addToStringOnResponse = function () {
    var _this = this;

    if (types.isObject(this.response)) {
      Object.defineProperty(this._response, "toString", {
        configurable: true,
        enumerable: false,
        writable: true,
        value: function () {
          return _this.responseText;
        }
      });
    }
  };

  XMLHttpRequest.prototype.isTextContentType = function (contentType) {
    var result = false;

    for (var i = 0; i < this.textTypes.length; i++) {
      if (contentType.toLowerCase().indexOf(this.textTypes[i]) >= 0) {
        result = true;
        break;
      }
    }

    return result;
  };

  XMLHttpRequest.prototype._setResponseType = function () {
    var header = this.getResponseHeader("Content-Type");
    var contentType = header && header.toLowerCase();

    if (contentType) {
      if (contentType.indexOf("application/json") >= 0 || contentType.indexOf("+json") >= 0) {
        this.responseType = XMLHttpRequestResponseType.json;
      } else if (this.isTextContentType(contentType)) {
        this.responseType = XMLHttpRequestResponseType.text;
      }
    } else {
      this.responseType = XMLHttpRequestResponseType.text;
    }
  };

  XMLHttpRequest.prototype.addEventListener = function (eventName, handler) {
    if (eventName !== "load" && eventName !== "error" && eventName !== "progress") {
      throw new Error("Event not supported: " + eventName);
    }

    var handlers = this._listeners.get(eventName) || [];
    handlers.push(handler);

    this._listeners.set(eventName, handlers);
  };

  XMLHttpRequest.prototype.removeEventListener = function (eventName, toDetach) {
    var handlers = this._listeners.get(eventName) || [];
    handlers = handlers.filter(function (handler) {
      return handler !== toDetach;
    });

    this._listeners.set(eventName, handlers);
  };

  XMLHttpRequest.prototype.emitEvent = function (eventName) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    var handlers = this._listeners.get(eventName) || [];
    handlers.forEach(function (handler) {
      handler.apply(void 0, args);
    });
  };

  XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
    if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
      this._options.headers[header] = value;
    }
  };

  XMLHttpRequest.prototype.getAllResponseHeaders = function () {
    if (this._readyState < 2 || this._errorFlag) {
      return "";
    }

    var result = "";

    for (var i in this._headers) {
      result += i + ": " + this._headers[i] + "\r\n";
    }

    return result.substr(0, result.length - 2);
  };

  XMLHttpRequest.prototype.getResponseHeader = function (header) {
    if (types.isString(header) && this._readyState > 1 && this._headers && !this._errorFlag) {
      header = header.toLowerCase();

      for (var i in this._headers) {
        if (i.toLowerCase() === header) {
          return this._headers[i];
        }
      }
    }

    return null;
  };

  XMLHttpRequest.prototype.overrideMimeType = function (mime) {};

  Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
    get: function () {
      return this._readyState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
    get: function () {
      return this._responseType;
    },
    set: function (value) {
      if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
        this._responseType = value;
      } else {
        throw new Error("Response type of '" + value + "' not supported.");
      }
    },
    enumerable: true,
    configurable: true
  });

  XMLHttpRequest.prototype._setReadyState = function (value, error) {
    if (this._readyState !== value) {
      this._readyState = value;

      if (types.isFunction(this.onreadystatechange)) {
        this.onreadystatechange();
      }
    }

    if (this._readyState === this.DONE) {
      if (this._errorFlag) {
        if (types.isFunction(this.onerror)) {
          this.onerror(error);
        }

        this.emitEvent("error", error);
      } else {
        if (types.isFunction(this.onload)) {
          this.onload();
        }

        this.emitEvent("load");
      }
    }
  };

  Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
    get: function () {
      if (types.isFunction(this._responseTextReader)) {
        return this._responseTextReader();
      }

      return "";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "response", {
    get: function () {
      return this._response;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "status", {
    get: function () {
      return this._status;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
    get: function () {
      if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
        return "";
      }

      return statuses[this._status];
    },
    enumerable: true,
    configurable: true
  });
  return XMLHttpRequest;
}();

exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
  100: "Continue",
  101: "Switching Protocols",
  200: "OK",
  201: "Created",
  202: "Accepted",
  203: "Non - Authoritative Information",
  204: "No Content",
  205: "Reset Content",
  206: "Partial Content",
  300: "Multiple Choices",
  301: "Moved Permanently",
  302: "Found",
  303: "See Other",
  304: "Not Modified",
  305: "Use Proxy",
  307: "Temporary Redirect",
  400: "Bad Request",
  401: "Unauthorized",
  402: "Payment Required",
  403: "Forbidden",
  404: "Not Found",
  405: "Method Not Allowed",
  406: "Not Acceptable",
  407: "Proxy Authentication Required",
  408: "Request Timeout",
  409: "Conflict",
  410: "Gone",
  411: "Length Required",
  412: "Precondition Failed",
  413: "Request Entity Too Large",
  414: "Request - URI Too Long",
  415: "Unsupported Media Type",
  416: "Requested Range Not Satisfiable",
  417: "Expectation Failed",
  500: "Internal Server Error",
  501: "Not Implemented",
  502: "Bad Gateway",
  503: "Service Unavailable",
  504: "Gateway Timeout",
  505: "HTTP Version Not Supported"
};

var FormData = function () {
  function FormData() {
    this._data = new Map();
  }

  FormData.prototype.append = function (name, value) {
    this._data.set(name, value);
  };

  FormData.prototype.toString = function () {
    var arr = new Array();

    this._data.forEach(function (value, name, map) {
      arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
    });

    return arr.join("&");
  };

  return FormData;
}();

exports.FormData = FormData;

/***/ }),

/***/ "../node_modules/tns-core-modules/xml/xml.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var easysax = __webpack_require__("../node_modules/tns-core-modules/js-libs/easysax/easysax.js");

var ParserEventType = function () {
  function ParserEventType() {}

  ParserEventType.StartElement = "StartElement";
  ParserEventType.EndElement = "EndElement";
  ParserEventType.Text = "Text";
  ParserEventType.CDATA = "CDATA";
  ParserEventType.Comment = "Comment";
  return ParserEventType;
}();

exports.ParserEventType = ParserEventType;

var ParserEvent = function () {
  function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
    this._eventType = eventType;
    this._position = position;
    this._prefix = prefix;
    this._namespace = namespace;
    this._elementName = elementName;
    this._attributes = attributes;
    this._data = data;
  }

  ParserEvent.prototype.toString = function () {
    return JSON.stringify({
      eventType: this.eventType,
      position: this.position,
      prefix: this.prefix,
      namespace: this.namespace,
      elementName: this.elementName,
      attributes: this.attributes,
      data: this.data
    });
  };

  Object.defineProperty(ParserEvent.prototype, "eventType", {
    get: function () {
      return this._eventType;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "position", {
    get: function () {
      return this._position;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "prefix", {
    get: function () {
      return this._prefix;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "namespace", {
    get: function () {
      return this._namespace;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "elementName", {
    get: function () {
      return this._elementName;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "attributes", {
    get: function () {
      return this._attributes;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "data", {
    get: function () {
      return this._data;
    },
    enumerable: true,
    configurable: true
  });
  return ParserEvent;
}();

exports.ParserEvent = ParserEvent;

var _ampCodes;

var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/ig;

function _generateAmpMap() {
  var objCodes = {
    Tab: 9,
    NewLine: 10,
    excl: 33,
    quot: 34,
    QUOT: 34,
    num: 35,
    dollar: 36,
    percent: 37,
    amp: 38,
    AMP: 38,
    apos: 39,
    lpar: 40,
    rpar: 41,
    ast: 42,
    midast: 42,
    plus: 43,
    comma: 44,
    period: 46,
    sol: 47,
    colon: 58,
    semi: 59,
    lt: 60,
    LT: 60,
    equals: 61,
    gt: 62,
    GT: 62,
    quest: 63,
    commat: 64,
    lsqb: 91,
    lbrack: 91,
    bsol: 92,
    rsqb: 92,
    rbrack: 92,
    Hat: 94,
    lowbar: 95,
    grave: 96,
    DiacriticalGrave: 96,
    lcub: 123,
    lbrace: 123,
    verbar: 124,
    vert: 124,
    VerticalLine: 124,
    rcub: 125,
    rbrace: 125,
    nbsp: 160,
    iexcl: 161,
    cent: 162,
    pound: 163,
    curren: 164,
    yen: 165,
    brvbar: 166,
    brkbar: 166,
    sect: 167,
    uml: 168,
    copy: 169,
    ordf: 170,
    laquo: 171,
    not: 172,
    shy: 173,
    reg: 174,
    macr: 175,
    hibar: 175,
    deg: 176,
    plusmn: 177,
    sup2: 178,
    sup3: 179,
    acute: 180,
    micro: 181,
    para: 182,
    middot: 183,
    cedil: 184,
    sup1: 185,
    ordm: 186,
    raquo: 187,
    frac14: 188,
    frac12: 189,
    frac34: 190,
    iquest: 191,
    Agrave: 192,
    Aacute: 193,
    Acirc: 194,
    Atilde: 195,
    Auml: 196,
    Aring: 197,
    AElig: 198,
    Ccedil: 199,
    Egrave: 200,
    Eacute: 201,
    Ecirc: 202,
    Euml: 203,
    Igrave: 204,
    Iacute: 205,
    Icirc: 206,
    Iuml: 207,
    ETH: 208,
    Dstrok: 208,
    Ntilde: 209,
    Ograve: 210,
    Oacute: 211,
    Ocirc: 212,
    Otilde: 213,
    Ouml: 214,
    times: 215,
    Oslash: 216,
    Ugrave: 217,
    Uacute: 218,
    Ucirc: 219,
    Uuml: 220,
    Yacute: 221,
    THORN: 222,
    szlig: 223,
    agrave: 224,
    aacute: 225,
    acirc: 226,
    atilde: 227,
    auml: 228,
    aring: 229,
    aelig: 230,
    ccedil: 231,
    egrave: 232,
    eacute: 233,
    ecirc: 234,
    euml: 235,
    igrave: 236,
    iacute: 237,
    icirc: 238,
    iuml: 239,
    eth: 240,
    ntilde: 241,
    ograve: 242,
    oacute: 243,
    ocirc: 244,
    otilde: 245,
    ouml: 246,
    divide: 247,
    oslash: 248,
    ugrave: 249,
    uacute: 250,
    ucirc: 251,
    uuml: 252,
    yacute: 253,
    thorn: 254,
    yuml: 255,
    fnof: 402,
    imped: 437,
    gacute: 501,
    jmath: 567,
    circ: 710,
    caron: 711,
    Hacek: 711,
    breve: 728,
    Breve: 728,
    dot: 729,
    DiacriticalDot: 729,
    ring: 730,
    ogon: 731,
    tilde: 732,
    DiacriticalTilde: 732,
    dblac: 733,
    DiacriticalDoubleAcute: 733,
    DownBreve: 785,
    UnderBar: 818,
    Alpha: 913,
    Beta: 914,
    Gamma: 915,
    Delta: 916,
    Epsilon: 917,
    Zeta: 918,
    Eta: 919,
    Theta: 920,
    Iota: 921,
    Kappa: 922,
    Lambda: 923,
    Mu: 924,
    Nu: 925,
    Xi: 926,
    Omicron: 927,
    Pi: 928,
    Rho: 929,
    Sigma: 931,
    Tau: 932,
    Upsilon: 933,
    Phi: 934,
    Chi: 935,
    Psi: 936,
    Omega: 937,
    alpha: 945,
    beta: 946,
    gamma: 947,
    delta: 948,
    epsilon: 949,
    epsiv: 949,
    varepsilon: 949,
    zeta: 950,
    eta: 951,
    theta: 952,
    iota: 953,
    kappa: 954,
    lambda: 955,
    mu: 956,
    nu: 957,
    xi: 958,
    omicron: 959,
    pi: 960,
    rho: 961,
    sigmaf: 962,
    sigmav: 962,
    varsigma: 962,
    sigma: 963,
    tau: 964,
    upsilon: 965,
    phi: 966,
    chi: 967,
    psi: 968,
    omega: 969,
    thetav: 977,
    vartheta: 977,
    thetasym: 977,
    Upsi: 978,
    upsih: 978,
    straightphi: 981,
    piv: 982,
    varpi: 982,
    Gammad: 988,
    gammad: 989,
    digamma: 989,
    kappav: 1008,
    varkappa: 1008,
    rhov: 1009,
    varrho: 1009,
    epsi: 1013,
    straightepsilon: 1013,
    bepsi: 1014,
    backepsilon: 1014,
    euro: 8364,
    trade: 8482,
    TRADE: 8482,
    forall: 8704,
    part: 8706,
    larr: 8592,
    rarr: 8593,
    hyphen: 8208,
    dash: 8208,
    ndash: 8211,
    mdash: 8212,
    horbar: 8213,
    Vert: 8214,
    Verbar: 8214,
    lsquo: 8216,
    OpenCurlyQuote: 8216,
    rsquo: 8217,
    rsquor: 8217,
    CloseCurlyQuote: 8217,
    lsquor: 8218,
    sbquo: 8218,
    ldquo: 8220,
    OpenCurlyDoubleQuote: 8220,
    rdquo: 8221,
    rdquor: 8221,
    CloseCurlyDoubleQuote: 8221,
    ldquor: 8222,
    bdquo: 8222,
    dagger: 8224,
    Dagger: 8225,
    ddagger: 8225,
    bull: 8226,
    bullet: 8226,
    nldr: 8229,
    hellip: 8230,
    mldr: 8230,
    hybull: 8259,
    tdot: 8411,
    TripleDot: 8411,
    DotDot: 8412,
    star: 9734,
    phone: 9742,
    spades: 9824,
    clubs: 9827,
    hearts: 9829,
    diams: 9830,
    female: 9792,
    male: 9794,
    check: 10003,
    checkmark: 10003,
    cross: 10007,
    VerticalSeparator: 10072,
    EmptySmallSquare: 9723,
    FilledSmallSquare: 9724,
    starf: 9733,
    bigstar: 9733,
    square: 9633,
    squ: 9633,
    Square: 9633
  };
  var ampCodes = new Map();

  for (var key in objCodes) {
    if (objCodes.hasOwnProperty(key)) {
      ampCodes.set(key, objCodes[key]);
    }
  }

  return ampCodes;
}

if (global.__snapshot) {
  _ampCodes = _generateAmpMap();
}

function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
  if (wordValue) {
    if (!_ampCodes) {
      _ampCodes = _generateAmpMap();
    }

    var res = _ampCodes.get(wordValue);

    if (res) {
      return String.fromCharCode(res);
    }

    return found;
  }

  if (decimalValue) {
    return String.fromCharCode(parseInt(decimalValue, 10));
  }

  return String.fromCharCode(parseInt(hexValue, 16));
}

;

var XmlParser = function () {
  function XmlParser(onEvent, onError, processNamespaces) {
    this._processNamespaces = processNamespaces;
    this._parser = new easysax.EasySAXParser();
    var that = this;

    this._parser.on("startNode", function (elem, attr, uq, tagend, str, pos) {
      var attributes = attr();

      if (attributes === true) {
        attributes = undefined;
      }

      if (attributes) {
        var key;

        for (key in attributes) {
          if (attributes.hasOwnProperty(key)) {
            attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
          }
        }
      }

      var prefix = undefined;
      var namespace = undefined;
      var name = elem;

      if (that._processNamespaces) {
        var stackEntry = XmlParser._getNamespacesStackEntry(attributes);

        that._namespaceStack.push(stackEntry);

        var resolved = that._resolveNamespace(name);

        prefix = resolved.prefix;
        namespace = resolved.namespace;
        name = resolved.name;
      }

      onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
    });

    this._parser.on("textNode", function (text, uq, pos) {
      var data = uq(XmlParser._dereferenceEntities(text));
      onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
    });

    this._parser.on("endNode", function (elem, uq, tagstart, str, pos) {
      var prefix = undefined;
      var namespace = undefined;
      var name = elem;

      if (that._processNamespaces) {
        var resolved = that._resolveNamespace(name);

        prefix = resolved.prefix;
        namespace = resolved.namespace;
        name = resolved.name;
      }

      onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));

      if (that._processNamespaces) {
        that._namespaceStack.pop();
      }
    });

    this._parser.on("cdata", function (data, res, pos) {
      onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
    });

    this._parser.on("comment", function (text, uq, pos) {
      onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
    });

    if (onError) {
      this._parser.on("error", function (msg, pos) {
        onError(new Error(msg), pos());
      });
    }
  }

  Object.defineProperty(XmlParser.prototype, "angularSyntax", {
    get: function () {
      return this._parser.angularSyntax;
    },
    set: function (value) {
      this._parser.angularSyntax = value;
    },
    enumerable: true,
    configurable: true
  });

  XmlParser.prototype.parse = function (xmlString) {
    if (this._processNamespaces) {
      this._namespaceStack = [];
    }

    this._parser.parse(xmlString);
  };

  XmlParser._getNamespacesStackEntry = function (attributes) {
    var stackEntry = {};

    if (!attributes) {
      return stackEntry;
    }

    for (var key in attributes) {
      if (!attributes.hasOwnProperty(key)) {
        continue;
      }

      var attributeName = key;

      if (attributeName.indexOf("xmlns") !== 0) {
        continue;
      }

      var namespacePrefix = "";

      if (attributeName.indexOf(":") !== -1) {
        namespacePrefix = attributeName.split(":")[1];
      }

      stackEntry[namespacePrefix] = attributes[key];
    }

    return stackEntry;
  };

  XmlParser.prototype._resolveNamespace = function (fullName) {
    var result = {
      prefix: undefined,
      namespace: undefined,
      name: undefined
    };
    result.prefix = "";

    if (fullName.indexOf(":") !== -1) {
      var split = fullName.split(":");
      result.prefix = split[0];
      result.name = split[1];
    } else {
      result.name = fullName;
    }

    var i;
    var stackEntry;

    for (i = this._namespaceStack.length - 1; i >= 0; i--) {
      stackEntry = this._namespaceStack[i];

      for (var key in stackEntry) {
        if (!stackEntry.hasOwnProperty(key)) {
          continue;
        }

        if (result.prefix === key) {
          result.namespace = stackEntry[key];
          return result;
        }
      }
    }

    return result;
  };

  XmlParser._dereferenceEntities = function (s) {
    s = String(s);

    if (s.length > 3 && s.indexOf("&") !== -1) {
      s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
    }

    return s;
  };

  return XmlParser;
}();

exports.XmlParser = XmlParser;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tslib/tslib.es6.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}
;
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

/***/ }),

/***/ "../node_modules/tty-browserify/index.js":
/***/ (function(module, exports) {

exports.isatty = function () {
  return false;
};

function ReadStream() {
  throw new Error('tty.ReadStream is not implemented');
}

exports.ReadStream = ReadStream;

function WriteStream() {
  throw new Error('tty.ReadStream is not implemented');
}

exports.WriteStream = WriteStream;

/***/ }),

/***/ "../node_modules/url/url.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var punycode = __webpack_require__("../node_modules/node-libs-browser/node_modules/punycode/punycode.js");

var util = __webpack_require__("../node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
} // Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.


var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,
    // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = __webpack_require__("../node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  } // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916


  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url; // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"

  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);

    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];

      if (simplePath[2]) {
        this.search = simplePath[2];

        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }

      return this;
    }
  }

  var proto = protocolPattern.exec(rest);

  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  } // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.


  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';

    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c
    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.
    // find the first instance of any hostEndingChars
    var hostEnd = -1;

    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.


    var auth, atSign;

    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    } // Now we have a portion which is definitely the auth.
    // Pull that off.


    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    } // the host is the remaining to the left of the first non-host char


    hostEnd = -1;

    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // if we still have not hit it, then the entire thing is a host.


    if (hostEnd === -1) hostEnd = rest.length;
    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd); // pull out port.

    this.parseHost(); // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.

    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.

    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);

      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;

        if (!part.match(hostnamePartPattern)) {
          var newpart = '';

          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          } // we test again with ASCII char only


          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);

            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }

            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }

            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host; // strip [ and ] from the hostname
    // the host field still retains them, though

    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);

      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  } // now rest is set to the post-host stuff.
  // chop off any delim chars.


  if (!unsafeProtocol[lowerProto]) {
    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);

      if (esc === ae) {
        esc = escape(ae);
      }

      rest = rest.split(ae).join(esc);
    }
  } // chop off from the tail first.


  var hash = rest.indexOf('#');

  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }

  var qm = rest.indexOf('?');

  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);

    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }

    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }

  if (rest) this.pathname = rest;

  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  } //to support http.request


  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  } // finally, reconstruct the href based on what has been validated.


  this.href = this.format();
  return this;
}; // format a parsed object into a url string


function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.

  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);

  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  } // hash is always overridden, no matter what.
  // even href="" will remove it.


  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

  if (relative.href === '') {
    result.href = result.format();
    return result;
  } // hrefs like //foo/bar always cut to the protocol.


  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);

    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    } //urlParse appends trailing / to urls like http://www.example.com


    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);

      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }

      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;

    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');

      while (relPath.length && !(relative.host = relPath.shift()));

      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }

    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port; // to support http.request

    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }

    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.

  if (psychotic) {
    result.hostname = '';
    result.port = null;

    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }

    result.host = '';

    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;

      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }

      relative.host = null;
    }

    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath; // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    result.search = relative.search;
    result.query = relative.query; //to support http.request

    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null; //to support http.request

    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }

    result.href = result.format();
    return result;
  } // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.


  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0

  var up = 0;

  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];

    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  } //to support request.http


  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }

  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);

  if (port) {
    port = port[0];

    if (port !== ':') {
      this.port = port.substr(1);
    }

    host = host.substr(0, host.length - port.length);
  }

  if (host) this.hostname = host;
};

/***/ }),

/***/ "../node_modules/url/util.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function (arg) {
    return typeof arg === 'string';
  },
  isObject: function (arg) {
    return typeof arg === 'object' && arg !== null;
  },
  isNull: function (arg) {
    return arg === null;
  },
  isNullOrUndefined: function (arg) {
    return arg == null;
  }
};

/***/ }),

/***/ "../node_modules/util-deprecate/node.js":
/***/ (function(module, exports, __webpack_require__) {

/**
 * For Node.js, simply re-export the core `util.deprecate` function.
 */
module.exports = __webpack_require__("../node_modules/node-libs-browser/node_modules/util/util.js").deprecate;

/***/ }),

/***/ "../node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "../node_modules/webpack/buildin/module.js":
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function () {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function () {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ })

}]);